{"id":"node_modules/@inrupt/solid-client-authn-browser/dist/ClientAuthentication.js","dependencies":[{"name":"/home/jerry/DemoRuben/node_modules/@inrupt/solid-client-authn-browser/dist/ClientAuthentication.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/jerry/DemoRuben/node_modules/@inrupt/solid-client-authn-browser/src/ClientAuthentication.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/jerry/DemoRuben/package.json","includedInParent":true,"mtime":1620201948000},{"name":"/home/jerry/DemoRuben/node_modules/@inrupt/solid-client-authn-browser/package.json","includedInParent":true,"mtime":1625694109603},{"name":"reflect-metadata","loc":{"line":15,"column":8},"parent":"/home/jerry/DemoRuben/node_modules/@inrupt/solid-client-authn-browser/dist/ClientAuthentication.js","resolved":"/home/jerry/DemoRuben/node_modules/reflect-metadata/Reflect.js"},{"name":"tsyringe","loc":{"line":16,"column":27},"parent":"/home/jerry/DemoRuben/node_modules/@inrupt/solid-client-authn-browser/dist/ClientAuthentication.js","resolved":"/home/jerry/DemoRuben/node_modules/tsyringe/dist/esm5/index.js"},{"name":"@inrupt/oidc-client-ext","loc":{"line":17,"column":34},"parent":"/home/jerry/DemoRuben/node_modules/@inrupt/solid-client-authn-browser/dist/ClientAuthentication.js","resolved":"/home/jerry/DemoRuben/node_modules/@inrupt/oidc-client-ext/dist/index.es.js"},{"name":"./constant","loc":{"line":18,"column":27},"parent":"/home/jerry/DemoRuben/node_modules/@inrupt/solid-client-authn-browser/dist/ClientAuthentication.js","resolved":"/home/jerry/DemoRuben/node_modules/@inrupt/solid-client-authn-browser/dist/constant.js"},{"name":"./login/oidc/IssuerConfigFetcher","loc":{"line":19,"column":38},"parent":"/home/jerry/DemoRuben/node_modules/@inrupt/solid-client-authn-browser/dist/ClientAuthentication.js","resolved":"/home/jerry/DemoRuben/node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/IssuerConfigFetcher.js"}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"reflect-metadata\");\nconst tsyringe_1 = require(\"tsyringe\");\nconst oidc_client_ext_1 = require(\"@inrupt/oidc-client-ext\");\nconst constant_1 = require(\"./constant\");\nconst IssuerConfigFetcher_1 = require(\"./login/oidc/IssuerConfigFetcher\");\nconst globalFetch = (request, init) => window.fetch(request, init);\nlet ClientAuthentication = class ClientAuthentication {\n    constructor(loginHandler, redirectHandler, logoutHandler, sessionInfoManager, issuerConfigFetcher) {\n        this.loginHandler = loginHandler;\n        this.redirectHandler = redirectHandler;\n        this.logoutHandler = logoutHandler;\n        this.sessionInfoManager = sessionInfoManager;\n        this.issuerConfigFetcher = issuerConfigFetcher;\n        this.login = async (options) => {\n            var _a, _b;\n            await this.sessionInfoManager.clear(options.sessionId);\n            const redirectUrl = oidc_client_ext_1.removeOidcQueryParam((_a = options.redirectUrl) !== null && _a !== void 0 ? _a : window.location.href);\n            await this.loginHandler.handle({\n                ...options,\n                redirectUrl,\n                clientName: (_b = options.clientName) !== null && _b !== void 0 ? _b : options.clientId,\n                popUp: options.popUp || false,\n            });\n        };\n        this.fetch = globalFetch;\n        this.logout = async (sessionId) => {\n            await this.logoutHandler.handle(sessionId);\n            this.fetch = globalFetch;\n        };\n        this.getSessionInfo = async (sessionId) => {\n            return this.sessionInfoManager.get(sessionId);\n        };\n        this.getAllSessionInfo = async () => {\n            return this.sessionInfoManager.getAll();\n        };\n        this.validateCurrentSession = async () => {\n            const currentSessionId = window.localStorage.getItem(constant_1.KEY_CURRENT_SESSION);\n            if (currentSessionId === null) {\n                return null;\n            }\n            const sessionInfo = await this.sessionInfoManager.get(currentSessionId);\n            if (sessionInfo === undefined ||\n                sessionInfo.idToken === undefined ||\n                sessionInfo.clientAppId === undefined ||\n                sessionInfo.issuer === undefined) {\n                return null;\n            }\n            const issuerConfig = await this.issuerConfigFetcher.fetchConfig(sessionInfo.issuer);\n            try {\n                const jwks = await IssuerConfigFetcher_1.getJwks(issuerConfig);\n                if (await oidc_client_ext_1.validateIdToken(sessionInfo.idToken, jwks, sessionInfo.issuer, sessionInfo.clientAppId)) {\n                    return sessionInfo;\n                }\n            }\n            catch (e) {\n            }\n            return null;\n        };\n        this.handleIncomingRedirect = async (url) => {\n            const redirectInfo = await this.redirectHandler.handle(url);\n            this.fetch = redirectInfo.fetch;\n            const cleanedUpUrl = new URL(url);\n            cleanedUpUrl.searchParams.delete(\"state\");\n            cleanedUpUrl.searchParams.delete(\"code\");\n            cleanedUpUrl.searchParams.delete(\"id_token\");\n            cleanedUpUrl.searchParams.delete(\"access_token\");\n            window.history.replaceState(null, \"\", cleanedUpUrl.toString());\n            return {\n                isLoggedIn: redirectInfo.isLoggedIn,\n                webId: redirectInfo.webId,\n                sessionId: redirectInfo.sessionId,\n                expirationDate: redirectInfo.expirationDate,\n            };\n        };\n    }\n};\nClientAuthentication = __decorate([\n    tsyringe_1.injectable(),\n    __param(0, tsyringe_1.inject(\"browser:loginHandler\")),\n    __param(1, tsyringe_1.inject(\"browser:redirectHandler\")),\n    __param(2, tsyringe_1.inject(\"browser:logoutHandler\")),\n    __param(3, tsyringe_1.inject(\"browser:sessionInfoManager\")),\n    __param(4, tsyringe_1.inject(\"browser:issuerConfigFetcher\")),\n    __metadata(\"design:paramtypes\", [Object, Object, Object, Object, Object])\n], ClientAuthentication);\nexports.default = ClientAuthentication;\n"},"sourceMaps":{"js":{"version":3,"file":"ClientAuthentication.js","sourceRoot":"","sources":["../src/ClientAuthentication.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2021 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\nimport \"reflect-metadata\";\nimport { injectable, inject } from \"tsyringe\";\nimport {\n  ILoginHandler,\n  ILogoutHandler,\n  IRedirectHandler,\n  ISessionInfo,\n  ISessionInfoManager,\n  IIssuerConfigFetcher,\n  ISessionInternalInfo,\n  ILoginOptions,\n} from \"@inrupt/solid-client-authn-core\";\nimport { removeOidcQueryParam, validateIdToken } from \"@inrupt/oidc-client-ext\";\nimport { KEY_CURRENT_SESSION } from \"./constant\";\nimport { getJwks } from \"./login/oidc/IssuerConfigFetcher\";\n\n// By only referring to `window` at runtime, apps that do server-side rendering\n// won't run into errors when rendering code that instantiates a\n// ClientAuthentication:\nconst globalFetch: typeof window.fetch = (request, init) =>\n  window.fetch(request, init);\n\n/**\n * @hidden\n */\n@injectable()\nexport default class ClientAuthentication {\n  constructor(\n    @inject(\"browser:loginHandler\") private loginHandler: ILoginHandler,\n    @inject(\"browser:redirectHandler\")\n    private redirectHandler: IRedirectHandler,\n    @inject(\"browser:logoutHandler\") private logoutHandler: ILogoutHandler,\n    @inject(\"browser:sessionInfoManager\")\n    private sessionInfoManager: ISessionInfoManager,\n    @inject(\"browser:issuerConfigFetcher\")\n    private issuerConfigFetcher: IIssuerConfigFetcher\n  ) {}\n\n  // Define these functions as properties so that they don't get accidentally re-bound.\n  // Isn't Javascript fun?\n  login = async (options: ILoginOptions): Promise<void> => {\n    // In order to get a clean start, make sure that the session is logged out\n    // on login.\n    // But we may want to preserve our client application info, particularly if\n    // we used Dynamic Client Registration to register (since we don't\n    // necessarily want the user to have to register this app each time they\n    // login).\n    await this.sessionInfoManager.clear(options.sessionId);\n\n    // In the case of the user hitting the 'back' button in their browser, they\n    // could return to a previous redirect URL that contains OIDC params that\n    // are now longer valid - so just to be safe, strip relevant params now.\n    const redirectUrl = removeOidcQueryParam(\n      options.redirectUrl ?? window.location.href\n    );\n\n    await this.loginHandler.handle({\n      ...options,\n      redirectUrl,\n      // If no clientName is provided, the clientId may be used instead.\n      clientName: options.clientName ?? options.clientId,\n      // Defaults to no popup.\n      popUp: options.popUp || false,\n    });\n  };\n\n  // By default, our fetch() resolves to the environment fetch() function.\n  fetch = globalFetch;\n\n  logout = async (sessionId: string): Promise<void> => {\n    await this.logoutHandler.handle(sessionId);\n\n    // Restore our fetch() function back to the environment fetch(), effectively\n    // leaving us with un-authenticated fetches from now on.\n    this.fetch = globalFetch;\n  };\n\n  getSessionInfo = async (\n    sessionId: string\n  ): Promise<(ISessionInfo & ISessionInternalInfo) | undefined> => {\n    // TODO complete\n    return this.sessionInfoManager.get(sessionId);\n  };\n\n  getAllSessionInfo = async (): Promise<ISessionInfo[]> => {\n    return this.sessionInfoManager.getAll();\n  };\n\n  validateCurrentSession = async (): Promise<\n    (ISessionInfo & ISessionInternalInfo) | null\n  > => {\n    const currentSessionId = window.localStorage.getItem(KEY_CURRENT_SESSION);\n    if (currentSessionId === null) {\n      return null;\n    }\n    const sessionInfo = await this.sessionInfoManager.get(currentSessionId);\n    // Several types of session data are required in order to validate that the ID\n    // token in storage hasn't been tampered with, and has actually been issued\n    // by the issuer present in storage.\n    if (\n      sessionInfo === undefined ||\n      sessionInfo.idToken === undefined ||\n      sessionInfo.clientAppId === undefined ||\n      sessionInfo.issuer === undefined\n    ) {\n      return null;\n    }\n    const issuerConfig = await this.issuerConfigFetcher.fetchConfig(\n      sessionInfo.issuer\n    );\n\n    try {\n      const jwks = await getJwks(issuerConfig);\n      if (\n        await validateIdToken(\n          sessionInfo.idToken,\n          jwks,\n          sessionInfo.issuer,\n          sessionInfo.clientAppId\n        )\n      ) {\n        return sessionInfo;\n      }\n    } catch (e) {\n      // If an error happens when fetching the keys, the issuer cannot be trusted.\n      // The error is swallowed, and `null` is eventually returned.\n    }\n    return null;\n  };\n\n  handleIncomingRedirect = async (\n    url: string\n  ): Promise<ISessionInfo | undefined> => {\n    const redirectInfo = await this.redirectHandler.handle(url);\n\n    this.fetch = redirectInfo.fetch;\n\n    const cleanedUpUrl = new URL(url);\n    cleanedUpUrl.searchParams.delete(\"state\");\n    // For auth code flow\n    cleanedUpUrl.searchParams.delete(\"code\");\n    // For implicit flow\n    cleanedUpUrl.searchParams.delete(\"id_token\");\n    cleanedUpUrl.searchParams.delete(\"access_token\");\n\n    // Remove OAuth-specific query params (since the login flow finishes with\n    // the browser being redirected back with OAuth2 query params (e.g. for\n    // 'code' and 'state'), and so if the user simply refreshes this page our\n    // authentication library will be called again with what are now invalid\n    // query parameters!).\n    window.history.replaceState(null, \"\", cleanedUpUrl.toString());\n\n    return {\n      isLoggedIn: redirectInfo.isLoggedIn,\n      webId: redirectInfo.webId,\n      sessionId: redirectInfo.sessionId,\n      expirationDate: redirectInfo.expirationDate,\n    };\n  };\n}\n"]}},"error":null,"hash":"14fa5eb1c6e7e672f253b1464f0379da","cacheData":{"env":{}}}