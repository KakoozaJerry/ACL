{"id":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/OidcLoginHandler.js","dependencies":[{"name":"/home/jerry/DemoRuben/node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/OidcLoginHandler.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/jerry/DemoRuben/node_modules/@inrupt/solid-client-authn-browser/src/login/oidc/OidcLoginHandler.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/jerry/DemoRuben/package.json","includedInParent":true,"mtime":1620201948000},{"name":"/home/jerry/DemoRuben/node_modules/@inrupt/solid-client-authn-browser/package.json","includedInParent":true,"mtime":1625694109603},{"name":"tsyringe","loc":{"line":15,"column":27},"parent":"/home/jerry/DemoRuben/node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/OidcLoginHandler.js","resolved":"/home/jerry/DemoRuben/node_modules/tsyringe/dist/esm5/index.js"},{"name":"@inrupt/solid-client-authn-core","loc":{"line":16,"column":42},"parent":"/home/jerry/DemoRuben/node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/OidcLoginHandler.js","resolved":"/home/jerry/DemoRuben/node_modules/@inrupt/solid-client-authn-core/dist/index.js"}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tsyringe_1 = require(\"tsyringe\");\nconst solid_client_authn_core_1 = require(\"@inrupt/solid-client-authn-core\");\nfunction hasIssuer(options) {\n    return typeof options.oidcIssuer === \"string\";\n}\nfunction hasRedirectUrl(options) {\n    return typeof options.redirectUrl === \"string\";\n}\nlet OidcLoginHandler = class OidcLoginHandler {\n    constructor(storageUtility, oidcHandler, issuerConfigFetcher, clientRegistrar) {\n        this.storageUtility = storageUtility;\n        this.oidcHandler = oidcHandler;\n        this.issuerConfigFetcher = issuerConfigFetcher;\n        this.clientRegistrar = clientRegistrar;\n    }\n    async canHandle(options) {\n        return hasIssuer(options) && hasRedirectUrl(options);\n    }\n    async handle(options) {\n        if (!hasIssuer(options)) {\n            throw new solid_client_authn_core_1.ConfigurationError(`OidcLoginHandler requires an OIDC issuer: missing property 'oidcIssuer' in ${JSON.stringify(options)}`);\n        }\n        if (!hasRedirectUrl(options)) {\n            throw new solid_client_authn_core_1.ConfigurationError(`OidcLoginHandler requires a redirect URL: missing property 'redirectUrl' in ${JSON.stringify(options)}`);\n        }\n        const issuerConfig = await this.issuerConfigFetcher.fetchConfig(options.oidcIssuer);\n        const clientRegistration = await solid_client_authn_core_1.handleRegistration(options, issuerConfig, this.storageUtility, this.clientRegistrar);\n        const OidcOptions = {\n            issuer: issuerConfig.issuer,\n            dpop: options.tokenType.toLowerCase() === \"dpop\",\n            redirectUrl: options.redirectUrl,\n            issuerConfiguration: issuerConfig,\n            client: clientRegistration,\n            sessionId: options.sessionId,\n            handleRedirect: options.handleRedirect,\n            prompt: options.prompt,\n        };\n        return this.oidcHandler.handle(OidcOptions);\n    }\n};\nOidcLoginHandler = __decorate([\n    tsyringe_1.injectable(),\n    __param(0, tsyringe_1.inject(\"browser:storageUtility\")),\n    __param(1, tsyringe_1.inject(\"browser:oidcHandler\")),\n    __param(2, tsyringe_1.inject(\"browser:issuerConfigFetcher\")),\n    __param(3, tsyringe_1.inject(\"browser:clientRegistrar\")),\n    __metadata(\"design:paramtypes\", [Object, Object, Object, Object])\n], OidcLoginHandler);\nexports.default = OidcLoginHandler;\n"},"sourceMaps":{"js":{"version":3,"file":"OidcLoginHandler.js","sourceRoot":"","sources":["../../../src/login/oidc/OidcLoginHandler.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AA8BA,uCAA8C;AAC9C,6EAYyC;AAEzC,SAAS,SAAS,CAChB,OAAsB;IAEtB,OAAO,OAAO,OAAO,CAAC,UAAU,KAAK,QAAQ,CAAC;AAChD,CAAC;AAED,SAAS,cAAc,CACrB,OAAsB;IAEtB,OAAO,OAAO,OAAO,CAAC,WAAW,KAAK,QAAQ,CAAC;AACjD,CAAC;AAMD,IAAqB,gBAAgB,GAArC,MAAqB,gBAAgB;IACnC,YAC4C,cAA+B,EAClC,WAAyB,EAExD,mBAAyC,EACN,eAAiC;QAJlC,mBAAc,GAAd,cAAc,CAAiB;QAClC,gBAAW,GAAX,WAAW,CAAc;QAExD,wBAAmB,GAAnB,mBAAmB,CAAsB;QACN,oBAAe,GAAf,eAAe,CAAkB;IAC3E,CAAC;IAEJ,KAAK,CAAC,SAAS,CAAC,OAAsB;QACpC,OAAO,SAAS,CAAC,OAAO,CAAC,IAAI,cAAc,CAAC,OAAO,CAAC,CAAC;IACvD,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,OAAsB;QACjC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;YACvB,MAAM,IAAI,4CAAkB,CAC1B,8EAA8E,IAAI,CAAC,SAAS,CAC1F,OAAO,CACR,EAAE,CACJ,CAAC;SACH;QACD,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;YAC5B,MAAM,IAAI,4CAAkB,CAC1B,+EAA+E,IAAI,CAAC,SAAS,CAC3F,OAAO,CACR,EAAE,CACJ,CAAC;SACH;QAGD,MAAM,YAAY,GAAkB,MAAM,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAC5E,OAAO,CAAC,UAAU,CACnB,CAAC;QAEF,MAAM,kBAAkB,GAAG,MAAM,4CAAkB,CACjD,OAAO,EACP,YAAY,EACZ,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,eAAe,CACrB,CAAC;QAGF,MAAM,WAAW,GAAiB;YAMhC,MAAM,EAAE,YAAY,CAAC,MAAM;YAE3B,IAAI,EAAE,OAAO,CAAC,SAAS,CAAC,WAAW,EAAE,KAAK,MAAM;YAChD,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,mBAAmB,EAAE,YAAY;YACjC,MAAM,EAAE,kBAAkB;YAC1B,SAAS,EAAE,OAAO,CAAC,SAAS;YAC5B,cAAc,EAAE,OAAO,CAAC,cAAc;YACtC,MAAM,EAAE,OAAO,CAAC,MAAM;SACvB,CAAC;QAGF,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAC9C,CAAC;CACF,CAAA;AA9DoB,gBAAgB;IADpC,qBAAU,EAAE;IAGR,WAAA,iBAAM,CAAC,wBAAwB,CAAC,CAAA;IAChC,WAAA,iBAAM,CAAC,qBAAqB,CAAC,CAAA;IAC7B,WAAA,iBAAM,CAAC,6BAA6B,CAAC,CAAA;IAErC,WAAA,iBAAM,CAAC,yBAAyB,CAAC,CAAA;;GANjB,gBAAgB,CA8DpC;kBA9DoB,gBAAgB","sourcesContent":["/*\n * Copyright 2021 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\n/**\n * Handles Common Oidc login functions (Like fetching the configuration)\n */\n\nimport { injectable, inject } from \"tsyringe\";\nimport {\n  IClientRegistrar,\n  IIssuerConfig,\n  IIssuerConfigFetcher,\n  ILoginOptions,\n  ILoginHandler,\n  IOidcHandler,\n  IOidcOptions,\n  IStorageUtility,\n  ConfigurationError,\n  LoginResult,\n  handleRegistration,\n} from \"@inrupt/solid-client-authn-core\";\n\nfunction hasIssuer(\n  options: ILoginOptions\n): options is ILoginOptions & { oidcIssuer: string } {\n  return typeof options.oidcIssuer === \"string\";\n}\n\nfunction hasRedirectUrl(\n  options: ILoginOptions\n): options is ILoginOptions & { redirectUrl: string } {\n  return typeof options.redirectUrl === \"string\";\n}\n\n/**\n * @hidden\n */\n@injectable()\nexport default class OidcLoginHandler implements ILoginHandler {\n  constructor(\n    @inject(\"browser:storageUtility\") private storageUtility: IStorageUtility,\n    @inject(\"browser:oidcHandler\") private oidcHandler: IOidcHandler,\n    @inject(\"browser:issuerConfigFetcher\")\n    private issuerConfigFetcher: IIssuerConfigFetcher,\n    @inject(\"browser:clientRegistrar\") private clientRegistrar: IClientRegistrar\n  ) {}\n\n  async canHandle(options: ILoginOptions): Promise<boolean> {\n    return hasIssuer(options) && hasRedirectUrl(options);\n  }\n\n  async handle(options: ILoginOptions): Promise<LoginResult> {\n    if (!hasIssuer(options)) {\n      throw new ConfigurationError(\n        `OidcLoginHandler requires an OIDC issuer: missing property 'oidcIssuer' in ${JSON.stringify(\n          options\n        )}`\n      );\n    }\n    if (!hasRedirectUrl(options)) {\n      throw new ConfigurationError(\n        `OidcLoginHandler requires a redirect URL: missing property 'redirectUrl' in ${JSON.stringify(\n          options\n        )}`\n      );\n    }\n\n    // Fetch issuer config.\n    const issuerConfig: IIssuerConfig = await this.issuerConfigFetcher.fetchConfig(\n      options.oidcIssuer\n    );\n\n    const clientRegistration = await handleRegistration(\n      options,\n      issuerConfig,\n      this.storageUtility,\n      this.clientRegistrar\n    );\n\n    // Construct OIDC Options\n    const OidcOptions: IOidcOptions = {\n      // Note that here, the issuer is not the one from the received options, but\n      // from the issuer's config. This enforces the canonical URL is used and stored,\n      // which is also the one present in the ID token, so storing a technically\n      // valid, but different issuer URL (e.g. using a trailing slash or not) now\n      // could prevent from validating the ID token later.\n      issuer: issuerConfig.issuer,\n      // TODO: differentiate if DPoP should be true\n      dpop: options.tokenType.toLowerCase() === \"dpop\",\n      redirectUrl: options.redirectUrl,\n      issuerConfiguration: issuerConfig,\n      client: clientRegistration,\n      sessionId: options.sessionId,\n      handleRedirect: options.handleRedirect,\n      prompt: options.prompt,\n    };\n\n    // Call proper OIDC Handler\n    return this.oidcHandler.handle(OidcOptions);\n  }\n}\n"]}},"error":null,"hash":"9ec312559902a22856d0fb06ee857022","cacheData":{"env":{}}}