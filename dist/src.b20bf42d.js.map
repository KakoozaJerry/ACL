{"version":3,"sources":["node_modules/n3/src/IRIs.js","node_modules/queue-microtask/index.js","node_modules/n3/src/N3Lexer.js","node_modules/n3/src/N3Util.js","node_modules/n3/src/N3DataFactory.js","node_modules/n3/src/N3Parser.js","node_modules/n3/src/N3Writer.js","node_modules/n3/src/N3Store.js","node_modules/n3/src/N3StreamParser.js","node_modules/n3/src/N3StreamWriter.js","node_modules/n3/src/index.js"],"names":["RDF","XSD","SWAP","xsd","decimal","boolean","double","integer","string","rdf","type","nil","first","rest","langString","owl","sameAs","r","forSome","forAll","log","implies","namespaces","escapeSequence","escapeReplacements","illegalIriChars","lineModeRegExps","_iri","_unescapedIri","_simpleQuotedString","_langcode","_blank","_newline","_comment","_whitespace","_endOfFile","invalidRegExp","N3Lexer","constructor","options","_simpleApostropheString","_prefix","_prefixed","_variable","_number","_boolean","_keyword","_sparqlKeyword","_shortPredicates","_lineMode","lineMode","_n3Mode","key","RegExp","n3","_comments","comments","_literalClosingPos","_tokenizeToEnd","callback","inputFinished","input","_input","outputComments","whiteSpaceMatch","comment","exec","line","_line","value","prefix","substr","length","test","firstChar","match","matchLength","inconclusive","_previousMarker","_unescape","reportSyntaxError","_parseLiteral","toUpperCase","token","previousToken","self","_syntaxError","item","invalid","replaced","replace","sequence","unicode4","unicode8","escapedChar","String","fromCharCode","Number","parseInt","charCode","opening","openingLength","closingPos","Math","max","indexOf","backslashCount","raw","substring","lines","split","issue","err","Error","context","undefined","tokenize","tokens","error","e","t","push","_pendingBuffer","setEncoding","on","data","Buffer","concat","isNamedNode","term","termType","isBlankNode","isLiteral","isVariable","isDefaultGraph","inDefaultGraph","quad","graph","iri","factory","prefixes","defaultPrefixes","Object","create","processPrefix","N3DataFactory","cache","local","namedNode","DEFAULTGRAPH","_blankNodeCounter","escapedLiteral","quadId","DataFactory","blankNode","variable","literal","defaultGraph","triple","Term","id","equals","other","toJSON","NamedNode","Literal","lastIndexOf","language","atPos","toLowerCase","datatype","datatypeString","dtPos","char","BlankNode","name","Variable","DefaultGraph","termFromId","endPos","components","unescapeQuotes","termToId","escapeQuotes","subject","predicate","object","Quad","_","quoted","languageOrDataType","isFinite","isInteger","isNaN","blankNodePrefix","N3Parser","_contextStack","_graph","_setBase","baseIRI","initDataFactory","format","isTurtle","isTriG","isNTriples","isNQuads","isN3","isLineMode","_supportsNamedGraphs","_readPredicateOrNamedGraph","_readPredicate","_supportsQuads","_supportsRDFStar","_resolveRelativeIRI","_blankNodePrefix","_lexer","lexer","_explicitQuantifiers","explicitQuantifiers","_resetBlankNodePrefix","_base","_basePath","fragmentPos","_baseRoot","_baseScheme","_saveContext","n3Mode","inverse","_inversePredicate","blankPrefix","_prefixes","quantified","_quantified","_restoreContext","pop","_subject","_predicate","_object","_readInTopContext","_error","_callback","_sparqlStyle","_readPrefix","_readBaseIRI","_readSubject","_readNamedGraphLabel","_readEntity","quantifier","_resolveIRI","_namedNode","_blankNode","_readBlankNodeHead","RDF_NIL","_readListItem","_readPunctuation","N3_FORSOME","_quantifier","_readQuantifierList","N3_FORALL","_literalValue","_completeSubjectLiteral","_literal","_getPathReader","ABBREVIATIONS","_readBlankNodeTail","_readObject","_readDataTypeOrLang","_getContextEndReader","_readGraph","_readBlankNodePunctuation","_emit","empty","_readPredicateAfterBlank","list","next","previousList","stack","parent","RDF_FIRST","_readListItemDataTypeOrLang","RDF_REST","_completeObjectLiteral","_completeLiteral","listItem","completed","_readCallback","_readFormulaTail","inversePredicate","_readQuadPunctuation","_readPrefixIRI","prefixNode","_prefixCallback","_readDeclarationPunctuation","_readNamedGraphBlankLabel","entity","QUANTIFIERS_GRAPH","_readQuantifierPunctuation","afterPath","_afterPath","_readPath","_readForwardPath","_readBackwardPath","_readRDFStarTailOrGraph","_readRDFStarTail","_quad","contextStack","message","noop","_removeDotSegments","result","i","pathStart","segmentStart","parse","quadCallback","prefixCallback","quads","every","parser","prototype","escape","escapeAll","escapedCharacters","SerializedTerm","N3Writer","outputStream","_prefixRegex","write","_lists","lists","output","_outputStream","chunk","encoding","done","end","_endStream","_baseIRI","_prefixIRIs","addPrefixes","_writeQuad","_writeQuadLine","_inDefaultGraph","_write","_encodeIriOrBlank","_encodeObject","_encodePredicate","_encodeSubject","_prefixMatch","quadToString","quadsToString","map","join","_encodeQuad","startsWith","characterReplacer","prefixMatch","_encodeLiteral","_blockedWrite","addQuad","addQuads","addPrefix","hasPrefixes","IRIlist","prefixList","prefixIRI","blank","children","child","contents","elements","Array","singleDone","character","charCodeAt","toString","N3Store","_size","_graphs","_id","_ids","_entities","_blankNodeIndex","_factory","size","graphs","subjects","graphKey","subjectKey","predicateKey","keys","_addToIndex","index0","key0","key1","key2","index1","index2","existed","_removeFromIndex","_findInIndex","name0","name1","name2","array","tmp","varCount","entityKeys","value0","entity0","value1","entity1","values","l","parts","_loop","_loopByKey0","_loopByKey1","_loopBy2Keys","_countInIndex","count","_getGraphs","isString","_uniqueEntities","uniqueIds","graphItem","predicates","objects","freeze","ids","entities","changed","import","stream","removeQuad","removeQuads","remove","removeMatches","deleteGraph","getQuads","content","subjectId","predicateId","objectId","graphId","Readable","objectMode","_read","countQuads","forEach","some","getSubjects","results","forSubjects","s","getPredicates","forPredicates","p","getObjects","forObjects","o","getGraphs","forGraphs","g","createBlankNode","suggestedName","index","extractLists","ignoreErrors","onError","node","tails","toRemove","tailQuad","items","malformed","head","headPos","current","objectQuads","subjectQuads","unshift","N3StreamParser","Transform","decodeStrings","_readableState","onData","onEnd","event","emit","uri","_transform","_flush","N3StreamWriter","writableObjectMode","writer","_writer"],"mappings":";ACAA;AACA;AACA;AACA;AACA;ADJA,ACKA,MDLMA,GAAG,GAAI,6CAAb;AAAA,AKCA,AEAA,ACAA,ACAA,AHAA,ALKA,MDLIC,GAAG,GAAI,mCADX;AAAA,AECA,ADMA,MDLIC,IAAI,GAAG,iCAFX;AKEA,AEAA,ACAA,ACAA,AHAA,ALMA,eDJe;AACbC,AEHF,ADOA,EDJEA,GAAG,EAAE;AACHC,AIHJ,ACAA,AEAA,ADAA,INGIA,OAAO,EAAG,GAAEH,GAAI,SADb;AAEHI,IAAAA,OAAO,EAAG,GAAEJ,GAAI,SAFb;AAGHK,AIJJ,AIJA,ACAA,ITQIA,MAAM,EAAI,GAAEL,GAAI,QAHb;AAIHM,AETJ,AMIA,ACAA,ANFA,IHOIA,OAAO,EAAG,GAAEN,GAAI,SAJb;AAKHO,AENJ,AGJA,AGKe,ACAA,ITKXA,EENE,AMCe0d,ACAAW,ITKX,EAAI,GAAE5e,GAAI,EQLL,ACAA,SDA6Bke,ACAAA,yBDA7B,ACAA,CDAuC,ACAA;ATA/C,AEDChe,AGCR,AGCEmC,ACAAA,EPFMnC,AMENmC,ACAAA,CTFa,CKCX4J,SGCS,ACAA,CDAC3J,ACAAA,KJDK,EGCN,ACAA,CJDS,CAAtB,AGCuB,ACAA,EJCvB;ALKE9B,AIZF,AFIM,AMGF,ACAA,ETKFA,EERca,CFQX,EAAE,GQLG,ACAA,OPHV,EAEA;AFOIZ,AIZJ,ACOe,AGDH0d,ACAAvJ,ANPZ,IHaInU,EKLiByL,AGDTiS,ACAAvJ,ETMJ,EAAS,GAAE7U,CKLJ,AIDK,CJCU,CLKP,ASND,GDAG,EAAE,CRKpB,ASLG;ATONW,AITJ,AFEA,AGEE2B,AETF,ACOU,ACAoBwc,ANH9B,AGJA,EDSExc,ELKE3B,CQPA,CJFE,AFEAY,AOAwBud,CTOvB,EAAU,GAAE9e,CKLN,CAACuC,CLKS,KAFhB,AELa,CGEP,EHFU,AGEA,CIFyB,EAAE,+CPAlD;AFQI3B,AIVIH,AFGR,AGEI,AELJ,ACGI,ACDM,ANFH,AGAP,EFAQA,EJUJG,CIVE,AKEF,CPCEY,AIHA6H,CGCiB,CAGnB,CTMK,AKLA+C,AGFAiS,ALHOrW,EHUC,GAAEhI,GAAI,CMVL,EHAX,CAAqBiI,AGAPgB,CDKjB,CGFA,CRIG,AEJiB,AMAA6S,CHEC,AFLlB,EDGoB,AGEvB,AFL8B,OKG9B,GAAiC,IAAjC,CAFmB,CAInB,CFL+BjS,YAAd,EAArB;ANWIhJ,AIXSV,AFIX,AGEE,AELW,AJAb,ECDWA,EJWTU,EOViB2W,EPUb,AEPA,CGECnL,AFLA,CHUQ,AGVP,CAACpE,CDEgB,CFQRjI,AOVJ,CAAc,CFKzB,AFLK,CHUc,EKLL,CFLCiI,GHMZ,AKDH,CAFmB,AFHA,CEOnB,AFPoBC,QAAL,KAAkB,WAAnC;AHWEpH,AIZE,AFIQ,AKFZwB,ACIE,ACDA,ANHH,AGAD,ECAEA,AJEF,EHQIxB,AIZiBQ,EEEf,CJEa,GADQ,AMGjBwS,ACDAiL,GFHG,CPUC,AOVAnL,EPUG,AQND,ACDA,CLLhB,EJYmB5T,AIVnB,AGAa,ACIM,ACDA,EFHEuC,CPUE,CQNA4J,CCDC6S,IFHX,EAAiB,CEGX,GAAe,IAAI5K,EDCnB,CAAa7R,OAAb,CAAf,MCD8B,CAAa;ATExC,AEHiB,AGKpBA,AENA,ACIA,ACDEgS,AHJE9T,EAAAA,CNHO,CKUX8B,CCPE,CGIAgS,CPFuB,CMGrB+J,ENJmB,CGMhB,AIHA,EAAE,CJGC/b,AGFV,ACDUiG,EDCE+V,ECDH,EAAO1J,CJGC,AGFjB,IHEqB,EAArB,CIHS,EAAiBlR,QAAjB,KAA8B;ATQzC5C,AIXF,AFEE,AKDE,ACIA+S,ACFyC,AHJhC3T,ENYXY,AMZWZ,EFCTkJ,AIKAyK,CRMC,EAAE,AETA,EKDE2D,CCIC,CNLiB,AMKhBhE,ECFuChM,CFF9C,EHDJ,AIKI,CDJa,ACIA,ACF4B,CFFzC,AEEmDe,CFJzB,CAG1B,EECyC;ATSzCxH,AIXJ,AFCa,AGKT,AGDE4G,ACHwDjE,ANDvD,AGHD,INaF3C,AIXAsI,AEFiBhI,EEOfsG,CNJY,CMIV,ACHsDjE,CJIrD2I,AFLOnE,CHUN,AQNA,CNNiB,AMMhBqW,CRMC,IQNF,ACH4D,CJIlE,ACRJ,CDQkBjc,AGDAoB,CFLlB,CGE0EA,ANDnE,CCDc,ADCOsE,GCDJ,CAAxB,ACMyB,AFLlB,CEKmBsE,AGDhB,CLJwB,CMCgD,EAApB,CDG/B,EHC3B;ALIG,AIRP,AFDwB,AKCpB,ACII,ACJ+E,ANArF,GHPa,GIOThD,CFDuB,AOAkB,EFCtCmO,AJAA,CAAC,CDHiB,ACGhBzP,IAAF,CIAL,ACIYuW,GDJG1V,AJAAb,CCAC,CIIZ,EJJe,ADAA,CAACC,CIAC,CAACa,MAAP,AJAA,CIAc,IAAd,AJAkB,CIAjC,CAJ0B,CAK1B,KHDJ,GDAE;AHWA9H,AIVF,AFFmC,AGM/BsB,AEHA,ACGI,ACJFwS,ANAL,AGFD,ENYE9T,AGRF,CHQG,CKNCsB,CLMC,CIVCiH,AKAAuL,AHFAf,CJAkC,EOE/B,EPJkB,AGQhB,AIJArQ,CLAC,ACIAgF,ACNA,GFEG,AIIF,AFNK,IDMd,AIJe,EDIX,EHAe6D,AIJA,eJIe,CAAC,IAAD,EAAOjK,OAAO,CAACoG,KCNrD,EDMsC,CAAlC,CAPmB,CASnB,yEDNJ,EAEA;AJSIzH,AEb0C,AMMzBod,ACJI,AHFzB,INaIpd,EMZA+S,CJD+C,IFaxC,AEfgB,CMQNqK,CROP,ASXgB7W,EHDjB,CNYGvH,CSXS,CDIE,ACJQ,AHDnB,ENYK,CQPSyD,CCJL,ODIJ,MRMhB,6CMZL;ANcIxC,AITJ,AFJE,AGQE,AELA,ACEoC,ACJEwC,AHF1C,INcIxC,EITEsI,AEHFyK,CJDG,COCmCvQ,CFEjCgU,CPUC,AEhBiB,AGWjBlL,ELKI,AOVV,GPUYvM,AOVD,CFKC,AELZ,AEF8C,CLGjC,EJSI,AKLD,CDJA,AKHkCyD,GHAjC,GDOMpB,ACPH,EGAsC,EAApB,GJOR,CAACkK,MAAf,KAA0B,QAA3B,GACFlK,OAAO,CAACkK,MAAR,CAAe9H,KAAf,CAAqB,MAArB,EAA6B,CAA7B,EAAgC8F,WAAhC,EADE,GAC8C,EAD7D;ALGC,AINHrB,AFLU,AGQR,AEJA,AEH+D,ANG5D,AGFD,EFGJA,CJZa,IEOE,CIEL,CCEHwO,AJAOxP,CDPW,AGanBsE,CDNY,EGAhB,CDHoB,ECGR5D,EFMA,AFNT,CAAmBb,EEMP,CENG,CAACc,AJAhB,EAAyB,IIAhB,CFMYtE,AENE,IFMX,AENH,CFMiBgI,AEN7B,MFMe,CAFf;ALOFrL,AITAsI,AFNoB,AGQlB,AEHA,ACCI,ACPuC,ANM7C,AGHkB,ENalBtI,AITAsI,GJSG,AShB6B,ETgB3B,AEfoB,AOEpBnH,AHAkB,ECGhBqV,AJAA,CDRkB,AGaejL,AFLhC,CCDU,ADCT1E,CGJa,CCIpB,CAAU,AENoB,CDOrB,ACPT,ANMK,CEKuC,AIfzB,CASnB,CFCA,CFK+C,AFLhCA,CKCX,EDDc,CAAlB,AJAmB,CITO,AJSNC,CIAC,CFKiCzD,IAAP,CAAYgI,CFL5C,KEKgC,AFLd,CEGjC,QFHF;AHWEpL,AITFsI,AFP8B,AGQ5B,AGFkB4U,ALArB,AGJ+B,EFK9B5U,ADCF,EHQItI,GEhBiC,CIEC,EFElB,AFPO,AGcnBuL,CLKG,CQVW2R,CRUR,AMfU,GNeRre,CQVW,GRUN,AKLH,AGLYyD,GHKT,KGLC,IHKQc,IAAT,CAAcgI,MAAd,CAHjB;ALOG,AIPL7C,AFRwC,AGQtC,AEFA,ACAoC,ACDpC,AHFE,EFKJA,KFR6C,CIGnC,CFCQ,AGEXiO,AEDA8G,CPRkB,AGciB9R,GCVpB,KDU4B,AELhD,CEDA,EJMmD,AELlC/D,CEDC,CAACN,IFCI,AEDL,CJMwC/D,AELlCsE,CEDC8L,GJM0B,CAAYpI,CEL9C,CAAc,EEDb,EJMiC,AELlC,AEDkBqI,CJGnC,AEFA,CAV0B,CAUY,CEDpB,KAA0B;ATZjC,AIgBbjL,AFTkD,AGQhD,AEDA,ACHI,ACC0CkV,AHF/B,EFMjBlV,IKJgDkV,CPLO,CIGhC,EJNE,AGenBjS,EIPgD,CAACyJ,AHJjC,CFGJ,ACQR,GAAG,GIPmC,CAAe/N,CJO7CrF,GIP8B,EAAqB2R,EJOxD,EIPmC,CJOpB,KAAKrQ,IAAL,CAAUgI,MAAV,CAJ1B;ADEFjE,AFV4D,AGQ1D,AGAG,ACHwE,ANIxE,AGNyB,EFO9BA,GKLE,CLDgB,CFJ+C,CIG7B,CHMtBH,CDZW,AGgBnB0E,GCZgB,MHQjB,CEIW,AFJS9E,GEIN2E,CFJd,EAA0B,OEIF,IAAIC,QAL/B;ADGF/C,AFVA,AGaE,AENA,ACNa,ALQf,AGP2C,EFQ3CA,GITE,ENDG,AMSD,CJCE,ACGA,ACX2C,CCK1CgO,AJEA,CCCCtP,AFdiB,AGiBjB,AFJA,CAACP,IEII+E,AFJN,IAAU/E,IAAI,CIFnB,AJEoBC,GIFG,CAAvB,CAZ0B,CAc1B,EJAe,GEIT,EFJ2B,CEIC,EAAEwE,OFJtC,CEI8C,IAAII,IAAd,CAA9B,CAAJ,EACE,KAAKG,0BAAL,GAAkC,KAAKC,cAAvC,CAjBiB,CAkBnB;ADZgB,AFHR,AMUN,ACLF,ANKH,AGVuB,CFGxB,AELA,CHcA,CGPA,EEKO5F,ENVU,EOKRsX,CPTkB,AMcrB,EAAQpW,GCLV,CDKE,ECLYsM,GDKK,CCLD,IAAI;APLJ,AGgBlB,AENA,ACAqBxN,ACLGyX,MDKHzX,ACLGyX,CPLD,CKUnB,CFMC5R,AENA5K,CLdkB,CMcG,CCLI,CAACwS,ELOpBtL,AIFmB,CDA1B,AELoB,CAAWqL,GFKnBlB,ACAmB6K,CCLX,EJWxB,CGN8B,CDA1B,ACAoC,CHMlB,EDF1B,ACE4B/R,CENC,CAACkH,ECAI,EAAmBtM,CDAlB,CFMC,AENA,CAAD,CAA/B,CCA8B,CHMMqF,AELlCpK,ACDmB,IAAsCiG,EHMnC,CELf,CCDsD,EHMjBoE,AELlCgH,ECDuD,GDCjE,EAAiBA,ACDqDnM,GHMhD,CGN2C,CDC3C,ACDqDe,EHMjBsE,CELjC,CCDwC,CAA9C,CHMC,CAAtB,AELE,CFdiB,CAoBnB;AHjB4B,AKY5BvK,ACFqF,ACL1C,AHC/C,ICMIA,CCXA,ACIA,CHCE4R,CJN+B,AMW/B,GNfqB,CKgBhB,GAAG5R,MDNd,CCMqB,IAAI,EAArB,EDNyBwH,mBAA7B,CAAkC;AJNQ,AGkBtC,AELA,ACDE,ACNH,ANOI,AGNL,GGdoD,CAetD,CDIOzF,ENZwC,EGkBtC8I,AELA2K,AJAOzP,CDjBW,CMgBrB,EAASoW,GAAT,CDCF,GAAgBnc,CCDG,ELChB,CAAwB0F,CEK3B,EELuB,CFKCwE,AELA9D,AJArB,EAA8B,IEKH,CELd,IFKmB,AELAM,EFKX,IAAiB,WAAWxE,IAAX,CAAgBgI,AELzD,CAlB0B,CAoB1B,IFGyC,CAAzC,CArBmB,CAsBnB;AHnBgD,AMY3B,ALEvB,AGNA,OJRuD,ECchD,CDlBkB,ACkBjB,CKFoBgS,ALEnBxW,IKFc,ALEhB,CKF0B,GLEhBA,IAAI,CKFE,ALEDC,EKFqB5D,MAApB,ALEN,EKFkCoa,GAA5B,ALEY,cAAnC;ACCK,AFfuD,AGoB1D,AEJA,ACJwD,ALG3D,AGNCzU,EHQF,AGREA,GERE,CJcSF,CFfsD,AMN5C,CH0BfgD,AEJA6G,ACDJ,AFNI,EFMD,AFnBoB,CEmBT,AENP,ECOP,EACE,GFGF,EACE,AEJK4C,KFIAnJ,GEJL,CAAcuG,KAAd,UFIA,GAA2BlL,GAAG,IAAI;ADLtCpG,AFfA,AGoBwC,AEHvC,AETD0Y,AHCE,EFMF1Y,AKPA0Y,CFf2B,CA0B3B,GLnBK,COQC,CAACC,CPbkB,CIchB,EFME,ACKoC,CDLnCjR,CKPN,CLOK,AENT,CDWsC,AIZzB,CLOC;AACd,AFhBQ,AGoB4C,AECtD,ACNE,ACNAiR,AHCD,IGDCA,CJWE,EHpBW,EEgBRjR,AIDA2U,CNpBkB,AOcjB,CLON,AKPO/W,EAAP,CLOUoC,AKPA,ELOV,GIDA,CCNA,EDMkB,ACNExB,CDMDoM,GCNK,EDMN,EAAQC,ACNE,QDMV,EAAkBC,IAAlB,KAA2B;AJE9C,AFjBmB,AGqBlB,AGN+CwJ,ACNjB,ANQ3B,GCHW,CAKhB,EIJiDA,CNfxB,EGqBlBhR,AFJO/E,CDtBW,COcYgM,CDMkB,CAACK,GCNxB,CAAWpM,CDMY,CAAN,ECNjB,ENQ3B,CAAwBA,CEI3B,GAAwB,AFJrB,EAA8B,KEIFjG,OAAO,CAAC2J,eAAf,KAAmC,QAAnC,GAA8C,EAA9C,GACE3J,OAAO,CAAC2J,eAAR,CAAwBxG,OAAxB,CAAgC,SAAhC,EAA2C,IAA3C,CAD1B;AHrB4B,AGuB5B,AGR8DoP,ACNb,ANSnD,AGbgC,EAQlC,GGJI,CDM8DA,CNf7B,EGuB5BvH,AFLAjF,CDvBkB,AMoB2C,KHQlE,GAAc/F,KFLK,CAACiG,CEKC,CAACgF,EFLE,CAAC/E,EEKX,GFLK,CEKY,AFLjC,IEKqCpG,gBAAJ,CAAY;AHvBL,AGuBOa,AEDvC,ACPiE,ACLvE+X,ANSH,EAED,EMXIA,CDKA,CHQ6C/X,AED3C8U,CLtByC,GKsBrC,AEZA,CAACpQ,EFYE,AEZT,CJaqD,AIb3C,EJa6CmF,GIbvD,EAAoB,KJauB,CIbjB;ALUnB,AFzBgB,AG4B4CzJ,AEAnE,AEb4B,CPfhC,KEyBMe,ACGiEf,EAAE,EAAEwJ,CDHhE,AKV0BiI,GLUvB,AKVkB;ALW5B,AFnBJ,AGqB+C,AEC3C,ACRA,ACNyC,AHI9B,KDSoB,AIb/B,CPREtT,AGqBF,ACTiB2S,CDlBE,CA4BnB,AEAI4D,CCRC4G,EJKE,CGGC,EDVG,CCUA,ACRX,AFF0B,CFOd5U,EAAZ,AILc8K,EDQE2C,CLtBC,CMcC,ENdE,CKsBpB,CCRsB,0BNd1B;AEoBG,AFlBH,AKqBI,ACTwB8G,ACLxBtD,ANWG,AGPL3Y,EAAAA,CFDgB,CAUhB,AKbE2Y,EPPEvZ,AMYsB6c,EDSpBvG,CJHQ1T,CMXN,CDKuB,ACLtBsD,CFcC,CEdR,AHIS,CGJC,AHIAyM,CHOP,CAAgB3L,CIGN,EJHV,EDlBc,AKqBjB,AEdA,ANWwBC,EIItB,AEfkBrB,CPPA,EIWX,EGJgB,ANWtB,AGPqB/E,ECWfyV,AJJwB,EMXJ,EFe3B,CAJO,ADPA,CCaT,CDbiC;AJVnCrW,AGoBE,AGTiCmT,ACLF,ANYjC,AGPE,EJXFnT,IAAI,AMW+BmT,ENX7B,CGoBCrH,AFFA7E,CKPgC,CCLD6V,CPPhB,GOOW,CAAU,CNY5B,CAAC,KMZiB,EAAmBnX,IJclD,CId+B,EJcH,CAAC,CAAC/E,OAAO,CAACmL,mBAAtC;AHnBF9L,AGoBC,AEGCoW,ACb0C,ACLiB,ANY3C,AGNhB,EJXFpW,CGX4B,CAiC5B,AECEoW,CCbA,ACLA,GFkBI,AJNgBtP,CGNf4L,ECYE,CAAP,GLvBW,EAAE,IAFO,AIapB,GAAoB,KAApB,CAFiC,CAIjC;AFMFrK,AFlBApI,AGuBA,AEAE,ACbD,ACLCoZ,ANWc,ECEhBhR,AFlBApI,CMfoD,AL+BrC,CKJf,ACPEoZ,CNW2BtS,GCEvB,CAACuB,CGKC+N,AElBA,CAACrQ,CNWM,CMXb,ANWK,CCED,AKbM,ANW0B,ECExB,AGKA,AJPP,CAAP,EIOiB,ELvBE,COKjB,CPLmB,CKuBC8P,AElBA,CAACpT,EPRD,IK0BpB,AElBoB,EAASoE,GAAT,KAAiB;ALcrC,AFlBF5G,AKuBE,AEnBuC,ANY1C,AGJG,EJZFA,ACkBF,MIKQoW,ADXA7D,GJZG,AOIqC2K,EPJnC,GKuBT,CL3BoB,CK2BNxT,AEnByB,CAAaiL,CHQpC,IAAI,CCWpB,GEnBuC,CAAuBnS,EHQnC+P,IGRY,EAA+B3L,GAA/B,GHQA,CAAC6L,KAApB,KAA8B,UAAlD,EACEhS,OAAO,GAAG8R,YAAV,EAAwBA,YAAY,GAAG,IAAvC;AFMF,AFlBFtS,AOG+E,AHU7EQ,EJbFR,EIaEQ,CGVA,GPHI,EAAE,CIaC,GJlBa,AIkBVA,OAAO,IAAI,EAArB;AFMA,AFlBFP,AGqB4B,AEC1B,ACZFgZ,ACPE,AHUA,EJbFhZ,AMUAgZ,MJQM9Q,AIRA,CHWCyD,AECA,ACZAsN,AFGAzG,CJbC,COGC,CPHC,CEkBC,EGIE2D,ACZP,ACPJ,AHUA,CJnBoB,CMgBP,CFGC5V,KCSd,EHJqBwH,AELA,CAAC0K,CCSCwD,EHJvB,CCG0B,CDFxB,AENF,CARiC,CDgBJ,AEC7B,ADPA,ECQE,GHJO,EGIF,GHJOjO,EAAL,CGIIoO,IHJQlO,KAAK,CAACF,AGIzB,EHJA,CAJU,CAKZ,AGG4BkO,QAAQ,GAAGD,MAAM,CAACE,QAAD,CAAN,CAAiBD,QAAtD,EACE,KAAK,MAAMG,YAAX,IAA4B7M,OAAO,GAAG0M,QAAQ,CAACE,UAAD,CAA9C,EACEJ,IAAI,IAAIlP,MAAM,CAACwP,IAAP,CAAY9M,OAAO,CAAC6M,YAAD,CAAnB,EAAmC7T,MAA3C;ALxBRvC,AGqBEiK,AGXA+O,ACPD,ANaI,EDhBLhZ,EGqBEiK,AGXA+O,KLMYrS,CDhBN,AMUA,CAAChB,CNVC,CMUR,CAAU,ENjBU,CCuBjB,CAAkBiB,CEKN,CGXf,EHWkB,AGXC+L,CHWnB,IGXwB,IAAI,ELMzB,EAAmCjM,OAAnC,EAA4C;ACI/C,AFnBFzG,AGqBC,AEGC,ACf8B,ALOhC,AGFE,EJdFA,CGjB4B,CAwC5B,ICTM,CAACmS,EFKE,AGKA,ACf4BE,CJU3B,CAACrK,AFnBA,EAAE,CKwBCuN,ACfkB,CAAW7C,CJUlC,CF3Ba,EKgCb,ADVP,CFKkB,AIVY,CFKX,CCUCoD,GHLG9P,CGKvB,OHLkB,KAAkBgC,KAAK,CAAChC,QAAnC,IACW,KAAK7D,KAAL,KAAkB6F,KAAK,CAAC7F,KAD1C;AAED,AFpBDlC,AGwBA,AEAC,AChBmD,AC7BA,ANqCpD,AGFI,EJdJA,CECgB,AGrBW,CH0C3B,AGIA,CClBE,GLQIyG,EGFE8L,EJdE,EAAE,ECgBE,AGFA,GHEG5L,AGFA,EAAb,IHEmB,CAACC,MAAP,CAAc,IAAd,CAAjB;ADzBsB,AKqCtB,ACnBEkS,AFME,CJxBN,GMkBIA,MAAM,CAACrT,AFMA+M,EENP,CAAU,KAAV,EAAmB,GFMjB,GEN4B,AFMP;AJb3B,AK2BE,ACpBkC,ALQlC,AGDMJ,MJdFnS,CCeC,CGDCmS,GEPiCQ,ELQ5BzQ,AGDA,CEPuB,AFOtBsQ,KJdK,ACejB,AGDW,EAAQC,CJdC,CCeChM,IDfvB,EAEA,AIYa,EAAkBiM,IAAlB,EAAwB,CHCnC,EACE9L,aAAa,CAAC1E,MAAD,EAASuE,eAAe,CAACvE,MAAD,CAAxB,CAAb,CAJ+C,CAKjD;ACIA6F,ACEAmC,AGhB+C,AFOVoI,EFOrCvK,ACEAmC,GGhBE,GJcI,ECEE,ACT6BoI,CFO5B,ACEAnI,KCTkC,EDSnC,EAAU,ACT6BqI,KAAV;AFQnC,AFnBW,AGqBX,AGhBAqG,AFMoDnG,IENpDmG,ENLiB5Y,EGqBb,CAACkK,CGhBC,AFM8CuI,CFQ7C,AIdAlN,ENLI,AMKX,CNLyB,AMKf,AFM8C,EDUxD,EAAc,ACV8CkN,GEN5D,CFMgE,CEN7CxN,CFMiC,IEN5B,IAAI;AJe1BY,AFnBJ5F,AGqBI,AEGJiW,ACpBgC,ALUhC5P,AGJuE,EJVvErG,AKwBAiW,AJVA5P,ICKIT,GDLG,AGLkB,EDYhB0F,AGjB4B6Q,CLU3B9V,CDdC,AKwBA,CHLC,AFnBApG,AKwBAiW,CCpBoB,CJelB,ACEV,AGjBsC,GHiBzB,AFPA,CIUN,CHLQtQ,AFnBR,AGqBP,CEGgBuQ,CLxBC,AMIW,ALUXxP,EKV8B3B,CDoBxC,EAAeoR,CHNjB,CIduB,EDoBrB,EAAqBC,IAArB,EAA2B,KJVtC,CANiD,CAQjD;ACIItU,AFnBF,AGqBE,AEGF,ACrB0D,ALa5D,KKbE,CJgBEA,KAAK,ACEAwJ,EDFK,KAAKxJ,ECEf,GAAiB,EAAjB;ADJK,AFhBP,AGqBC,AEGD,ACrBA,AFMI0Q,KFOJ,ACEA,GCTIA,ECeE6D,CFFD,AGnBE,AFMA,EAAE9D,EENT,CDqBY,CDfC,ECeE0D,EDfE,ICeI,CAACC,IAAD,CAAN,KAAiBD,MAAM,CAACC,IAAD,CAAN,GAAe,EAAhC,CAAf;AHJD,AFnBC,AGsBE,AEEF,ACrBD,ALYD,AGPqB3D,SJRdnT,CKwBCkX,ADhBa/D,CHOZ9L,EDfP,CIQuB,EJRX,AKwBA,EDhBe8L,CCgBZ8D,GDhBgB,CAAC,CHOlC,CISuB,AJTAtU,CISCoU,CDhBS,EAAOhE,CCgBjB,CAAN,AJTjB,EAA+BhM,EGPE,CCgBCkQ,AJTlC,AGPqB,EHOe,IISI,CAACF,IAAD,CAAN,GLxBhC,AKwB+C,CL3B5B,CAG8B,AKwBlC,CAAf,CAHoC,CAIpC;AFFE,AFPF,AGRgD,YDexC5K,WAAW,GAAGvB,OAAO,CAAC9F,OAAR,CAAgB,GAAhB,CAApB;AD/BY,AFSd,AGuBE,AEEF,ACxDkD,AL+ClD,AGXuB,EFiB3B,KEjBM,CHWE,CDhBC7E,CGuBCkM,AEEAgL,KJTKpQ,EISE,CJTT,GEOa,AEEDiQ,CLzBhB,CCgBmB,EDhBE,AGuBA,AEED,CFFlB,EACEpM,CECoBsM,EJTxB,EAA6B,EEQlB,AECE,CAAb,EFDctM,OAAO,CAAChI,MAAR,CAAe,CAAf,EAAkBuJ,UHxBhC,CAJmB,AG4BL,CHxBkD,AGwB5D,CAJC,CAKH;AECF,AJTE,AGRA,QCiBE,CAACgL,EDjBE9D,KCiBP,EACE6D,GDlBA,GCkBM,ADlBY,CCkBXF,GDlBP,CCkBM,CAAN,GAAe,IAAf;AL1BF,AGyBE,AEEF,AJVE,AGRD,KAPD,IJFK9W,EGyBE+L,AEEA,ADjBF,CCiBGkL,AJVA5P,IEQN,CFRW,EEQEqD,AEEf,CJVgBzD,MEQd,AFRoB,CAACC,CDjBvB,GAA2B,ECiBX,CAAc,IAAd,CAAd,kBDjBF,CALmB,CAKoC;AG0BrD,AEEH,ADjBG,GC1CuB,CA6D3B,OFJS8E,ACfA8G,SDeL,GAAmBpI,CCfnB,GAAqB8H,GDeK,CAAC5N,OAAR,CAAgB,ACfnC,GDemB,IAAuB,CAAvB,GAA2B8F,OAA3B,GACAA,OAAO,CAAC7G,OAAR,CAAgB,mBAAhB,EAAqC,EAArC,CADnB;AHzBF,AG2BE6G,AFVA3D,AGNA,MDgBA2D,AFVA3D,GDjBGpG,EIWEwS,EDgBE,CFVC,CAAC1Q,CEUCiI,KFVF,AGNR,CHMA,CEUiB,CAAC5H,AChBApC,CHMC4G,IEUT,CAAc,AFVA,CGNC,CJX3B,AIW4B4L,EHME,CDjBC,AIWX,KAAgB5N,SAAhB,GAA4B,IAA5B,GAAmC,CAAC,CJXxD,AIWyD5E,OAAO,CAACwS,GAA/D,EDgBU,CAAV;ADNC,AFpBH,AG2BE,AFVE,AGNH,KAtBgC,CF+BxB3K,AEPT,GJbKtI,EG2BEiM,IDPJ,ADHQ7E,GDjBX,EG2BE,AFVc,CDjBC,ACiBAC,EEUIoD,CDPMxC,EDHX,CAAL,CCGR,CAA6B,CCOJ,CAAC,CAAD,AFVAb,CEU1B,IFV+B,CAACC,KAAD,CAAL,GAAeR,OAAO,CAACS,SDjBnD,ACiB2C,CAAkBV,GAAG,GAAGS,KAAxB,CAAhC,CAAP;ACIN,AFpBE,AG2BE,AECJ4P,AJXK,EIWLA,KJbI,EDfGtW,EG2BEuL,KH3BP,EK4Bc,CL5BC,AK4BAwK,GFDb,GAAmBjM,AECP,EAASkM,IAAT,CFDc,CAAC,AECAC,CFDD,CAA1B,EECY,EAAqBC,IAArB,EAA2B,kWL5BzC;AEqBU,AFpBV,AG2BC,AECD,AJXC,KAND,CCSEzQ,GFpBGxF,ECkBA,GCEK,CDFD,ECEI,ADFF4B,CDlBX,GAAiB,ECkBA,IAAIsE,QAAZ,CAAJ,EAA2B,miCDlBhC;AEqBA,AFpBA,AG2BD,AECC,AJVE,AGPF,GD7C0B,CA+D5B,KH7BOjG,AIWAgM,CCiBCiK,CHRC,CDFC,IIUI,AJVA3R,CGPZ,CJXA,CK4BeuR,CDjBC,CJXC,ACkBT,CCER,ADFmB,EGPnB,CCiBqB,CAACC,IAAD,CAArB,UJVqCnU,MAAO,EAApC,CAAN,kXDlBF;AEqBD,AFpBC,AG6BF,AEFE,AJTC,SDlBIvC,CK2BwB8W,KL3B7B,CK2BmC,EL3BrB,CK2BwBD,MAAM,CAACF,IAAD,CAA5C,iZL3BA;AACA,AK2BA,ADjBA,QAAI,CJVC9V,AIUC,ECiBCiW,KL3BP,CK2Ba,CAACF,CL3BC,GK2BF,CAAb,ADjBK,CCcoC,ADdnBlU,CCmBtB,GDnBK,CAAsBlC,OAAO,CAACkK,MAA9B,CAAL,EAA4C,sDJV5C;AEegC,AFdhC,ACiBA,AGPE,EFWN,OFrBS5J,ECiBE+F,AGPA3F,MJVP,ECiBe,CDjBC,ACiBAqB,AGPd,GAAiB,GHOJ,CAAf,CGPE,mCJVF;AACA,AG2BF2J,AECE,AJXD,AGPG,EDiBJA,OH3BOnL,AK4BA,EDlBEuJ,GDiBG,CAAC3L,AECA0C,EL5BX,AIUE,CCkBF,CFDU,CH3BM,AIUAiG,CDiBCZ,CECCoQ,IFDR,EAAcrN,AECxB,EAA0B,EDlBxB,GDiBQ,EAAuBC,KH3BjC,IG2BU,EAAkCC,MAAlC,EAA0C;AH1BpD,AG2BA,ACjBE,SJVG3I,CG2BCmL,CCjBC+G,KDiBK,GAAG,ACjBb,GAAgB1S,CJVlB,CG2BoBY,EH3BE,GIUG,CAACoJ,CDiB1B,MCjBE,wBJVF;AACA,AK2BA,AJXF,AGNI,SJVGvJ,ACgBAgG,EIWE4P,ADjBA1D,MCiBM,CAACwD,IAAD,AJXf,AGNI,CCiBF,EL3BA,AIUqB5P,GJVG,GIUG,CAACC,MAAP,CAAc,IAAd,CAAnB,WJVF;AACA,AG0BA,AFVH,AGNKxG,MAAAA,GJVGP,AG0BAoK,IChBI,CAACxD,GJVV,GAAgB,EG0BhB,AChBE,CDgBiBnB,GChBG,CDgBtB,CAAwB,GChBG0N,WAAL,CAAiB5S,OAAO,CAACqG,QAAzB,CAApB,GJVF;AEkBG,AFjBH,AG0BE4C,AEAF,ADhBC,KAND,CFaSnB,ACSPmB,GH1BGvJ,AK0BA,EDfA,EFMF,ACSM,EAAEuJ,AEAApI,EL1BX,CK0BA,EL1BgB,EEiBS2G,ACQD,AECN6O,IHTf,CAA2B,CGS9B,EAA0B,GL1B1B;AEkBF,AFjBE,AGyBoBnN,ACdlB,MDckBA,GHzBfvJ,EIWEe,IDcsB,EAAEwI,GHzB/B,AIWE,GJXiB,AIWA,GDaK,CCbtB,KJXF;AEkBU,AFjBV,AGwB0CC,AEC1C,ADdE,MFMAxD,ACOwCwD,GHxBrCvJ,EKyBEqW,ADdApD,CDayC,EDPtC,ACOwC1J,GDPrC,AGQA,CAAC+M,CLzBd,CGuBwB,CCZtB,CJXgB,AKyBL,CAAb,CDdoB,KAAKpD,WJXzB,GIWE;AFOF,AFjBA9S,AGwBEkG,AECH,ADdE,GC1DwB,CL+CzBlG,AK2BF,EFHIkG,KDPK,AFjBA,AGwBA,EAAEA,CHxBClG,IGsBc,EDLxB,CFjBiB,IAAI,EAArB,CArBmB,CAuBnB;AEgBD,ACMiB7B,AEIlB,ADhBC,GFE+B,AExCJ,CF8C5B,AENA,EDUkBA,IAAI,EAAEA,IAFE;AHnBxB,AGsBEyN,AEIJ,ADbA,MDSIA,EHtBE,KAAKlL,AGsBA,EAAEiL,MAAM,CHtBb,EGsBgB,CHtBC,CAAC,CAAC3L,EGsBE6L,KHtBK,CAAClL,QAA/B,EAAyC,CGsBxB,GAA4B,KAHrB;AHlBtB,AGsBAmL,AEIJ,MFJIA,KHtBKlL,MGsBM,CHtBX,CGsBa+K,EHtBE,IGsBI,CHtBnB,CADuC,CAEvC,AGqBsB,KAAKI,SAAL,CAAe1C,CAAlB,GAAsB,EAJnB;ADDjB,ACML2C,AEIJ,MHVIlK,ACMAkK,KDNK,GAAG,ECME,EAAEL,MAAM,GAAG,KAAKM,WAAR,GAAsB;ADL1C,AFhBE,AGgBsB,AEU1B,ADfmB,KDKjB,CCLE8G,CDGkD,CASpD,GDPO,AFhBA,KEgBKtL,CFhBC5G,CEgBN,CAAQwD,CFhBb,CIWe,GJXG,AIWA,IFKb,AFhBL,CEgBuB,CAAlB,AFhBmB,EEgBE,KAAKoD,EAAL,CAAQM,WAAR,CAAoB,GAApB,CAArB,CAAP;AACD,AFhBK,AK0BN,ADfE,GFJ8B,CAWhC,OEPSjB,CJXC,EAAEjG,GAAG,IAAI1B,EIWE,CAACuI,MAAb,CAAoB,KJXnB,AIWwBoC,KJXK,CIW9B,CAAP,GJX0CjJ,GAAL,aAAqBC,MAAtD,EACE,KAAKD,GAAL,IAAYhB,aAAZ;AACH,AKyBL,ADfC,GA7C2B,CA+C5B;AJXG,AGoBD,AEKF,KLhCE,CAQA,EGmBI8L,MAAJ,EAAY;ADJF,AFvBV,AG4BE,AEKJ,MHVI3D,GFdG,KEcK,GAAG;AACb,AFdE,AGmBA,ACVJgL,EAAAA,MAAM,CAAC/U,EDUE4N,EHnBAjL,EISH,EAASQ,GJTX,GAAepB,EISb,EAAmB,CDUrB,EHnBsB,CAACe,AGmBE,EHnBV,GGmBf,CAFU,CHjBoB,AGoB9B,KHpBA;AEeF,AFdC,AGoBC,ACXF,OJ5CmB,CAoCnB,CIQKqR,CFKC3K,EAAE,GAAG,KAAKA,EAAhB,AELA,CAAmBuK,KAAnB,CAAyB/T,MAAzB,EAAiC,MAAjC,EAAyCmD,QAAzC;AFMA,AGQFqV,ADbC,ECaDA,CD/D4B,CAoD5B,IFGMxO,KAAK,CGQC,CAACgO,CHRCxO,EAAE,CAACM,EGQL,EAASmO,IAAT,EAAeC,CHRb,CAAe,EGQjB,CHRE,CGQmBC,GHRG,CAAlC,AGQU,CHXG,CAIb,AGOqCM,KAA3B,EAAkCC,KAAlC,EAAyCC,KAAzC,EAAgD1Q,KAAhD,EAAuD9E,QAAvD,EAAiEyV,KAAjE,EAAwE;AFFhF,AEGF,QAAIC,GFHG/K,AEGP,EAASsK,MAAT,CFHE,CAAehN,AEGAiN,CFHf,GAAoB,EEGtB,CADkF,CAElF,CFJ2BxM,MAAL,GAAe,GAAE,KAAKA,MAAL,CAAYrC,EAAZ,CAAezF,MAAf,CAAsB,CAAtB,CAAyB,GAA1C,GAA+C,GAAnE,CALU,CAMV;ADLF,AFfA,SAAKhB,EEeEiH,KAAK,EFfZ,CEeeR,EAAE,AFfA,CEeCxF,AFfA,CAACjC,KEeZ,EFfmB,CAACiB,CEeCwG,EAAE,CAACQ,IFf/B,CEeoC,AFpDjB,CAsCnB,CEc8B,CAAF,KAAgB,GAArC,GAA2CR,EAAE,CAACzF,MAAH,CAAUiG,KAAV,EAAiBC,WAAjB,EAA3C,GAA4E,EAAnF;AACD,ACKG,AEGF,ADbF2K,EAAAA,CFbgC,CAoBhC,MGMQkE,CFHC9K,CCVC,CAAChD,KCaK,EDbN,CCaS,CFHf,AEGgBiN,ADbAhN,GDUG3C,CEGJ,GAAQ,CAAC4P,CFHC,ACVnB,CDUoB3P,CCVC2C,CCaZ,GAAgB,CFHZ,AEGaiN,CFHC,ACV3B,EAA6BlQ,CCarC,EFHwC+F,ECVhC,EAAoCsG,IAApC,EAA0C,CDU7B,CAAnB;AHnBF,AGoBC,AEED,ADZA,QAAI,CJVCrR,CKuBD8V,UAAU,GAAGD,ILvBjB,GAA0B,CAA1B,AKuByB,GAAG,CAAX,GAAexQ,MAAM,CAACwP,IAAP,CAAY,KAAKV,IAAjB,CAAf,GAAwC,KAAKC,SAD9D,CAHkF,CAMlF;ALxBD,AGoBA,ACVG,GJnDuB,AGvBC,CHkE5B,AGoBA;ADNY,AFZZ,AGmBA,AEEE,ADdE,MFKAnN,EGSE+N,EDdE,CAAChQ,CCcP,EHTU,AGSA,CAAC4Q,CDdC,CFKC,AELApP,CCcC,GAAGuO,EDdV,CAAa,GCcT,EAAcA,ADdAnM,MCcM,ADdxB,CAAL,ECcgC,ADdA,ECcxB,EAA4BoM,IAA5B,IAAoCY,GAAG,CAACZ,IAAD,CAAvC;AHRV,AELI,WFKG,IAAIrO,SAAJ,CAAc,KAAKO,cAAnB,CAAP;AACD,AGQC,ADbI,GFlB0B,CAyBhC,KGMO,IDbI4K,ECaEiE,IDbP,CAAY,CCahB,ADbiB,ICaIhB,CDbC7J,KCatB,EAA6B,CDbZ,KAAkB,IAAlB,GAAyB,EAAzB,GAA+B,KAAK2G,eAAL,GAAuB,KAAvB,GAA+B,OAA/D,KACCjM,YAAY,CAACY,MAAb,CAAoBxB,KAApB,IAA6B,EAA7B,GAAmC,GAAE,KAAK+M,iBAAL,CAAuB/M,KAAvB,CAA8B,MADpE,CAAZ;AJRN/E,AGmBA+K,AEGI,AGnGN,ER6EE/K,AGmBA+K,UEGUgL,ILtBI,CAAC9V,AGmBA,EEGE,CFHC,EEGE4V,GLtBN,EAAW3V,KKsBK,CAAC4V,MAAD,CLtBhB,AKsBV,ELtBoC;AACtC,AGmBA,ACVI,UDUEtS,GCVGmF,IDUI,ECVT,CDUY,ECVE5D,GDUG2D,ECVjB,WDUY,CAAmBsC,GAAnB,EAAhB;ADJgB,AFdhB,AGkBA,AEIE,ADbE,AIvFR,MN4FM/D,EFdE9G,EGkBsCqK,AEIpC0K,GLtBG,AISAjK,GJTG,AGkBoC,AEIpC,GFJuC,AEIpC6J,CHRC,CFdC1U,AISb,EFKe,CCIqCX,ACTpC,CCaC,CAACqW,CLtBtB,CISI,GDSJ,CEIqB,CAAnB,EAA6B;AHP/B,AFdA,AKsBI,ADbD,OARC,CASF,EJVIzV,cAAc,GAAG,KAAKR,SAA5B;AEeA,ACGA,AEKI,AGrGR,SLgGSoL,CDHC3E,EAAE,AGQA0O,GHRG,CGQP,CFLJ,CEKc,CAACW,CHRCrP,ACGE9C,EDHlB,AGQkB,GAAG0R,EFLI,CAACpN,GEKX,EAAcoN,EFL7B,IEKmC,GAAG,EAAxB,EAA4BF,IAA5B,IAAoCW,GAAG,CAACX,IAAD,CAAvC;AHRd,AFdA,AGkBA,SAAK9J,CDJehE,CFdb,IEckB,AFdzB,EAAa,CEceZ,CCI5B,CDJ8B,CAACM,CCIbpD,OAAO,CAACuE,EDJE,CAAe,GAAf,GCI5B,CDJkD,CAAlD;AACA,AFdE,AGkBF,AEII,ADbF,AIxFN,SLiGSoD,CDJChE,AELAW,GCaG,CHRC,ECIV,CDJaZ,AELA,CAACX,CDSI/C,AEIHwS,GHRG,EELZ,CFKe1P,AGQjB,ADbiB,CDSI,CDJF,ACIG0B,CDJFlH,CGQCoU,CDbCjK,GDS1B,CDJa,CGQT,EHR6B3E,AGQA,CDb3B,CFK6B,AELjC,CFKkCY,CELC,IFKF,CAAtB,GAAgC,EAA7C,CAHmB,CAInB;AFdE,AGkBF,AEIM,ADbF,SDSCyB,CHlBCrI,KGkBN,CEIY2V,EFJMzS,KEIC,ELtBjB,AGkBuB,CAACuB,AEIJ8Q,CLtBCtV,IGkBvB,CALgB,CAMhB,CHnBE,EKsB8B,CAACyV,MAAD,CAA1B;AHPN,AELI,AIzFR,WN8FW7O,CELCY,GFKG,KAAK,CELC,CAACxB,CFKX,GAAeD,EAAE,AELhB,CFKiBzF,AELA,KAAKqK,CFKR,CAAUhE,KAAK,GAAG,AELhC,CFKc,AELlB,CFKG,CEJD,EFKC,GELI2K,MAAL,CAAa,KAAI,KAAKE,aAAL,CAAmB/J,MAAnB,CAA2B,EAA5C,EAA+CoJ,IAA/C,EADF,CAEA;AFKIjK,AFhBN,AGmBF,AEIM,ADdF,IFOIA,IAAI,ACGRqD,KDHa,AFhBRlK,AIaH,CDMN,AEIU6U,EHPF,ACGI,ECNDtD,CFGYpV,CGOP,EHPU,CAACK,AGORoY,CDVb,CAAa,GJbK,CEgBhB,AGOiB,CAACc,CLvBC,CEgBSjZ,GAAG,AEFrB,CFEsBK,AFhBRkB,AKuBP,CAAnB,EAA6B,CDTZ0T,IJdI,CAAcxR,CEczC,GFd2B,CAAmBL,KAAnB,CAAzB,AIcgB,CAAsB,CJdc,IIcT+K,UAAL,GAAkBnD,SAAxC,CAAmD,IACnD,KAAKgK,aAAL,CAAmB/J,MAAnB,CAA2B,EAFvC,EAE0CoJ,IAF1C;AFIP,AFhBK,AGmBF,AEIM,ADRL,AI/FP,GN8DkC,CAoChC,GEZI,CAUA,GDGK1G,iBAAL,GAAyBlH,OAAO,CAACiH,OAAjC;AHlBE,AGmBF,AEIM,ADlBN,WDcKG,ACFH,CJjBIvK,IIiBCwR,ECMKqE,EFJZ,CAAehO,CAAf,ACFE,CAAa,CCMG,CFJC1E,CHnBC,AIiBH,CCMIyR,ADNH,IJjBO1U,AKuBA,CFJC,ACFH0K,CDEIN,CEIEsK,ILvBG,AKuBC,EDNf,CJjBiB,CKuBEE,EFJrC,CCFoC,CJjBI5W,EKuBX,CDNX,ECM4B,CAAC0W,ADNJ,EJjBR,AIiBjB,CJjB+BzU,CKuBH,CAAjB,ADNmB,EJjBb,CAAmBF,AKuBC,EAA9B,ADNR,GCM4C8E,CDL/C,KCKqD,ADLhD6M,CCKiD2C,GLvBC,CAAC,AKuBT,CLvBQ,AKuBIO,CLvBtC,CAAf,CAAlB,EACElV,CKsByD,CAAvD,CAF2B,ADHnB,CCMR,ADN4B,IJjBtB,CAAC,AIiB0BgL,IJjB3B,EAAO,EIiBe,GAAgBnD,OAApC,CAA6C,IAC7C,KAAKkK,gBAAL,CAAsB,KAAK9G,UAAL,GAAkBnD,SAAxC,CAAmD,IACnD,KAAKgK,aAAL,CAAmB/J,MAAnB,CAA2B,EAHvC,EAG0CoJ,IAH1C;AJhBmB3Q,AGmBrB,ACCD,AIrGL,KJ2EI,CA2BA,IJrBuBA,CGmBhBqK,ECEAlH,CJrBoB,EAAE,EIqB7B,EAAc,CJrBoBlD,CGmBhC,GAAmB8C,CHnBA,MGmBO,CAACqH,UAA3B;ADFJtE,AFjB2CvJ,AGoBxC,AEIO,ADHQoU,EFJlB7K,IEIkB6K,EFJZ,CAAC5K,CFjBoCxJ,AIqBrB,IFJhB,AFjByC,AIqBrBoU,EFJZ,AFjBmC,CKwBlC,CDHe,CAACxN,ECGZuS,CAAC,EDHU,CJrBP,AKwBA,ADHL,CCGR,EAAgBA,CAAC,GAAGD,MAAM,CAACpV,MAA3B,EAAmCqV,CAAC,EAApC,EAAwC;AHNhD,AFlB0DxV,AGqB3D,AEIW,ADJ4B,GDpGZ,CAsG5B,MHvB4DA,KAAK,EAAEJ,GKyBjD6V,ILzBwD,CAAC,AKyBpD,CLzBmD,CAAnD,CKyBG;AHNxB,AFnB6ExV,AKyBnDkH,ADH3B,GAlF2B,CAoF5B,MJxB+ElH,MAAM,AKyBzDkH,ELzB2D,KKyBpD,EAAE,IAAX;AHLxB,AFpBqB,AKyBoBC,AGxG7C,QNmGQvB,CFpBU,CAAR,CAHgD,CAIlD,CEmBK,GGKgCuB,SHLpBpB,AGK6B,EAAE,IAA5B,CHLxB,EACE,OAAO,KAAKL,EAAL,KAAYE,KAAK,CAACF,EAAzB,CAJU,CAKZ;ACEF8E,AEC4DpD,EFD5DoD,cEC4DpD,GFD3C,CAACvG,EECgD,EAAE,CFDnD,EAAQ;ADDvB,AFrBItB,AGuBJ,AEAwB,ADA1BwR,EAAAA,MJvBMxR,GEqBG,CAAC,ACEAsB,CDFC+E,AFrBA,EKuBC,CLvBErG,AIuBA,CDAC,ACAA2H,CFFN,ACEO9K,GHvBG,CEqBC,AFrBA6D,AGuBlB,CDFmB,CAAC2F,AEER,EAAUuB,EJvBV,CEqBa,AFrBAzH,CEqBC0G,KEEd,EAAqBgB,CFF1B,IACW,CECN,CJvB4B,CAAC,AIuBAjD,CJvBD,CEsBjBP,AFtBE,CAAmB1D,EIuBhC,EAAoCsQ,EJvBpC,CEsBM,CFtBkCjR,AIuBxC,EAA0C,EFDlBqG,CFtBqB,CAAC1F,GEsBjB,CAAC0D,EFtB9B,CAAR,KEqBG,IAEW,KAAK7D,KAAL,KAAkB6F,KAAK,CAAC7F,KAFnC,IAGW,KAAKkG,QAAL,KAAkBL,KAAK,CAACK,QAHnC,IAIW,KAAKG,QAAL,CAAcrG,KAAd,KAAwB6F,KAAK,CAACQ,QAAN,CAAerG,KAJzD;AAKD,AFzBK,AGuBJ,AEAUyV,ADAV,aJvBS1V,CKuBC0V,ILvBN,CKuBW,CAACb,KAAD,CAAL,GAAe,+BAAWQ,OAAX,EAAoB,KAAK1B,QAAzB,CAAf;ALtBP,AGuBH,AEAU+B,ADAV,OJjCa,CAWX,GGsBG,ACAE,GCAGA,EFAV,ACAYlE,GCAG,CAACsD,KAAD,CAAL,EDAV,CCAyB,+BAAWS,OAAX,EAAoB,KAAK5B,QAAzB,CAAf;AHGZ5N,ACFI,AEAQ2P,EHEZ3P,MAAM,GAAG,CCFD,EEAI2P,GFACzN,EEAI,CAAC8M,GFAV,EEAS,CAAL,EFAY,CEAG,GFAvB,EACE,OAAO,KAAKpK,MAAL,CAAY,OEDawK,SFCzB,CEDmC,CFCLpU,AEDMyU,KFCpC,CAAP,AEDiD,CAACC,CAAD,CAAP,CAArB,EAAkC,KAAK9B,QAAvC,CAAf;AHGV,ACDE,ACFF,SAAKxC,EFGE,ICDE,ACFT,CAAY,IDEEjH,CCFGuH,QDER,CAAejK,CAAtB,ECFU,CAAkBJ,OAAlB,EAA2BC,SAA3B,EAAsCC,MAAtC,EAA8CjD,KAA9C,CAAZ,EAAkEqM,IAAlE;AFIE5M,AF1BA,AGyBA,AEFQ,ADAX,GAzF2B,CA2F5B,EFCIA,IF1BI,CAAClE,GE0BG,CCDD,CDCG,ICDEgL,AEFExG,CHGCN,GGHG,ELvBd,CKuBiB,EHEhB,ACAE,CAAe,CHzBGlE,CKuBC+T,EFEnB,EAAqB,IAArB,AEFc,CAAcvP,CFED,GEFb,CLvBmB,AKwB9BsR,CFC6BxL,EHzBI,EKwB5B,CAAC9C,ELxBgCtJ,EGyBzC,CAAP,EEFqB,EACI4X,ILxBkB,CAAiB5V,AKwB9B,CAACuH,GLxBY,CAAsB5H,KAAtB,AKuBtB,CLvBjB,CAAJ,AKwB0CiW,ELvBxCjW,GKuB6C,CAAC6H,CLvBzC,GAAG7H,EKsBW,EACmC,CLvBzC,CAACU,MAAN,CAAaP,eAAe,CAAC,CAAD,CAAf,CAAmBQ,GKuByBiE,GLvBzD,EAAwC5E,AKuBM,EAAkB,GLvBnB,CAACW,CKuBuBuT,KLvBrE,CAAR,CAbS,CAeX,AKqBwD,CADnC,CAAb;AHIR1T,ACDF,MDCEA,KAAK,EAAK,KAAKA,KAFV;AAGLkG,AFxBA,AKqBQ,MHGRA,IFxBI,IEwBI,CFxBCpI,CEwBC,EGHEiX,GHGG7O,EGHP,ELrBJ,AKsBM6O,CLtBU3U,GEqBf,CFrBD,AKsBW,CLtBUZ,AKsBT4D,IAAN,CLtBN,AKsBiBe,CLtBrB,EAAiC,CKsBvB,EADF,KAEK,IAAI7E,QAAQ,CAAC6E,IAAD,CAAZ,EACH,OAAO,IAAP;AHCVkC,AFxBE,AGsBJ,AEES,ADHXmL,EAAAA,IFGInL,KCFG,GDEK,AEHA,CAACc,CFGC,GCFZ,GCDU,EAAUC,SAAV,EAAqBC,MAArB,EAA6BjD,KAA7B,EAAoC;AFGhCP,AFvBV,AGsBF,AEEK,ADHP,QFEcA,GEFL,CJrBDtE,CGsBDqL,CCDI,EFEW,EAAE,CEFR0G,MJrBZ,AGsBF,EHtBqB,CGsBD,CDCV,GCDV,CCDS,CAAoBnK,OAApB,CAA6B,IAChC,KAAKgK,iBAAL,CAAuB/J,SAAvB,CAAkC,IAClC,KAAKgK,aAAL,CAAmB/J,MAAnB,CACC,GAAEjD,KAAK,IAAIA,KAAK,CAACpE,KAAf,GAAwB,IAAG,KAAKmR,iBAAL,CAAuB/M,KAAvB,CAA8B,MAAzD,GAAiE,MAAO,EAHnF;AFEqCpE,AFtB/B,AKwBD,ADAN,GAjG2B,CAmG5B,IFJuCA,KAAK,EAAE,KAAKsG;AAArC,AFrBN,AGqBN,AEGG,WFHE,GHrBK5G,MGqBV,QHrBwB,KAAKE,OAAO,GAAG,KAAKhC,QAAL,CAAciC,IAAd,CAAmBL,KAAnB,CAAf,CAAlB,EACEF,QAAQ,CAAC,IAAD,EAAO;AEgBhB,AFhBkBQ,AGqBvB,AEGD,KHRD,OFhByBA,GGqBhB,CHrBoB,EAAE,EGqBjB+K,GHrBsB9K,KAAb,GGqBrB;ADCH,AFtB4C1D,AGsB3C,ACGFoV,EAAAA,UJzB6CpV,GIyBhC,CJzBoC,AIyBnCkT,EJzBqC,GIyBtC,EAAQ,IJzBI;AAAqCvP,AKyB5D,ADCA,WCDO+U,ADCAxF,CJ1BqDvP,IKyB5D,ADCY,CJ1BqD,AI0BpD0R,EJ1BsD9R,CI0B5D,CAAUuD,CAAC,IJ1BwD,AI0BpD,CJ1BqD,CAAD,CAAnD;AEnCO,AFmCiDlD,AGuB/E,AEGD,ADCG,EFFN,CGzH6B,CA4H3B,OFLO,CHvB0EA,CI2BtE,IDJT,CHvBqF,AI2BvEuR,EJ3ByE,UI2B9E,CAAkBrO,CAAC,CAACgE,OAApB,EAA6BhE,CAAC,CAACiE,SAA/B,EAA0CjE,CAAC,CAACkE,MAA5C,EAAoDlE,CAAC,CAACiB,KAAtD,CAAP;AJ3BqB,AGwBrB,ACID,KAFM,EAEJuN,IJ5Ba,AI0BT,CJ1BC,AI4BA,CDJD/G,CCEA,CAAP,UDFE,GAAoB,IAApB;AHvBItL,AI4BP,GAxG2B,CA0G5B,MJ9BQA,QAAQ,CAACE,KAAK,GAAG,IAAT,EAAe;AAAEM,AGwB/B,AEIF4V,EAAAA,KAAK,CAACvB,GFJC,CHxB0BrU,EK4B5B,EL5BgC,AK4BvBR,EL5ByB,AGwBrC,KHxB0CS,CK4BvC,EAAmB,EL5BO;AAAoB1D,AGyB/C,AEIF,SAAK,GL7B4CA,GGyBxC,AEIE+X,CL7B0C,EAAE,CK6BvD,CFJctJ,GHzBe,AK6BVqJ,MAAnB,EACE7U,CFLA,OEKQ,CAAC8U,IAAD,CAAR;AHLC,AFzB2DpU,AG0B9D,AEKD,ADADsR,EAAAA,CChI2B,CAkI3B,EHRW7K,MFzBqDzG,GEyB3D,CEMS,CJ/BuD,AI+BtDiO,EJ/BwD,EAAxC,EI+BjB,CFNevI,CEMN,GFNlB,CAA6B;AAClCzH,AF1B2EgC,AIgCzE,EFNFhC,SEMSgQ,CJhCkEhO,CE0BhE,CAACyG,GEMG,CFNJ,AF1BsE,AIgCjE7C,EFNE,AF1BiE,MIgC1E,KAAoB,MAApB,GACL,KAAK+N,WAAL,CAAiB3D,MAAjB,CADK,GACsB,KAAKkD,iBAAL,CAAuBlD,MAAvB,CAD7B;AFLA,AF3B6B,AG2B7B,ACOD,GA9G2B,CAgH5B,MFTS,CF3BO,AG2BT,CH3BC,EG2BN,CDAWvH,IAAK,EAAhB;AACD,AF3BM,AG2BH,AEMJiP,EAAAA,CHTkC,CAKlC,QCFQ,CEMG,CAACxB,GFNCxL,GEMF,EAASyL,IAAT,EAAe9U,QAAf,CFNP,CEMgC,CFND;AAC7B,AEMJ,QAAIiV,MAAJ,CFNSvM,CEMGqM,IAAZ,CFNI,GAAc,EAAd;AH3BA,AG4BA,ACONlD,EAAAA,aJnCa,AG4BF7G,ICOM,CJnCC7K,AImCAwO,GDPZ,GH5BO,AG4BS,ACOL,EAAS,CJnCCzO,CG4BrB,IH5BA;AE6BM,AF5BP,AG4BC,AEKJ,ADEA,MFPEqE,CFrDW,CA2BX,AK+BE0Q,MHLM,AGKA,GHLG,ACAF,AEKEJ,KFLGpJ,CEKG,CAACqJ,IAAD,CAAnB,EAA2B,GFLvB;ADCJ,ACAG,AEKD,ADEF,QAAInG,GFPG,AGKAoG,GDEG,CCFR,ADESxQ,ICFI0Q,GHLf,CEOI,ECFF,EACEjV,CDCoB,OCDZ,CAAC+U,GDCb,CCDY,CAAR,ADCiC;AFNtC,AGME,ADCC,GFf8B,CAUlC;AF7BI,AG2BF,AEOD,ADCG,GC1IuB,CA2I3B,MDDQ,CDRD,CH3BGvU,GImCGqQ,CJnCC,EG2BZ,CH3Be,EImCT,GJnCcpQ,CImCEkO,IJnCpB,EImC0B,CAACjO,KAAP,IAAgB,KAAKmQ,MAAzC,EACElC,MAAM,GAAG,KAAKrB,IAAL,CAAU,KAAKuD,MAAL,CAAYlC,MAAM,CAACjO,KAAnB,CAAV,CAAT;AJpCF,AG4BA,ACSA,YJrCyBK,AG4BrB,CCSG,IDTEsI,IH5ByB,AIqCnBsF,GJrCsBzO,GIqC9B,EJrCmC,CAAC,AIqCnByO,CJrCkB,CAA1C,IIqC8B,CDT9B,ACS+BtI,EDR7B,ACQK,GAA8B,IDR5B,CCQgCsI,IDR3BjD,ECQiC,CAAChL,KAAM,EAAtD,UDRE;ADCG,AF7BL,AG6BF,ACQC,MFRCA,IF7BI3D,CE6BC,GAAG,AF7BA,GAAG,EAAX;AE8BF,AF9BE,AKoCJuZ,EAAAA,QLpCmB5V,CE8BV,EGME,CAACmU,CLpCY,CE8BVxO,EAAL,AF9BkB,CE8BVzF,CF9Bb,AKoCO,EAASmU,GHNX,CAAe,AGMb,CHNF,CAAP,AGMwB/U,QAAf,EAAyB;AHLnC,AF/BG,AG8BF,AEOA,ADCA,QCDI8U,ADCA/P,EJtCyBpE,CIsCtB,CCDP,EAAUsU,ADCAtG,EJtCyB,GAAG,CKqCtC,ADCgB,CJtCd,AIsCejO,KAAjB,CARwB,CASxB;AJvCE,AG+BA,UH9BIM,KAAK,AG8BF,GH9BK,EG8BAyK,EH/BZ,UG+BO,CAAkBjK,KAAlB,CAAP;ADb8B,AFlB9B,AGEF,AEoCA,ADEA,QAAI,CCFCsT,CLrCe7T,GKqCpB,ADESqQ,ICFIuD,ILrCkB,AIuC3B,ECFJ,CLrCkC,CADhC,AKsCmB,ADEA9P,GAAG,CAACwN,UAAJ,CAAe,KAAKjB,QAApB,CAArB,EACEvM,GAAG,GAAGA,GAAG,CAACnE,MAAJ,CAAW,KAAK0Q,QAAL,CAAczQ,MAAzB,CAAN,CAXsB,CAYxB;AJ1CE,AGiCH,AEMGoU,GF7IwB,CAyI5B,EEIIA,ILtCmC/T,EKsC7B,GAAG2T,MAAM,CLtCgC,AKsC/BC,GLtCkC,CKsCnC,CAAf,GLvCA;AKwCA,ADGF,QAAIzE,ECHE4E,IDGI,CAACnU,CCHC,CAACiU,EDGT,CAAYhQ,CCHJ,CAAV,CDGE,CCFA/E,ADEJ,EACE+E,GAAG,GCHO,ADGJA,CCHK+P,EDGF,CAAC/S,CCHA,CAAR,KDGI,CAAYuO,SAAZ,EAAuBkC,iBAAvB,CAAN,CAdsB,CAexB;AJ3CE,AKwCD,cLxCSzR,SAAR;AEgCC,AF/BD,AGiCJ4K,AEOC,ADGC,EDVFA,CE5I2B,CAqJ3B,EHXWtE,IEYHoL,GJ3CC,AGiCE,CDFN,ACEOjR,EHjCR,GGiCO,EAAQoK,ACUA,EFZSxF,CEYN,GFZjB,CAA4B,CEYNuK,EDVhB,EAAoB,QCUT,CAAkBpQ,IAAlB,CAAuBwE,GAAvB,CAApB;AFXFpG,AF/BM,AGiCJ,EDFFA,MCEM+B,KDFK,ACET,CDFU0G,IAAD,EAAO;AAChB,AF/BI,AI0CJ,UFXO,CEWA,CAACqL,EFXErL,AF/BFlH,IE+BO,CF/BF,CE+Bb,AF/BcW,GI0CP,GJ1CC,AI0Ce,GJ1CA,CAAnB,AI0CsBkE,EJzCpB,CIyCwB,GAAvB,EJ1CH,CAEA,AIyCI,CAAC0N,WAAW,CAAC,CAAD,CAAZ,GAAkB1N,GAAlB,GAAwB,KAAKwM,WAAL,CAAiBkB,WAAW,CAAC,CAAD,CAA5B,IAAmCA,WAAW,CAAC,CAAD,CAD9E;AFVD,AFhCK,AGiCJ,AEQF8D,ADGC,ECHDA,CHZiC,AErHL,CF0H5B,AEYA,QDbU/U,EEQE,CLtCD,AKsCEqT,EFRE,CAAC9X,CH9BDmD,EKsCH,CFRV,CEQmB4U,CLtCD,CAAC,CAAD,CAAL,AKsCH,EAAeC,GLtCC,CKsChB,ELtCD,AKsCsB/U,ELtCA,MKsCrB,EAA+B;ALrCnC,AG8BN,AEQA,QAAIiV,MAAJ,EAAYC,GLtCD/T,GKsCX,EAAoB6T,IAApB,MLtCM,GAAuB,IAAvB,CADyB,CAEzB;AG8BN,WAAK,KAAL;ADAU,AF7BJ9U,AG8BN,AEOA,ADIFwS,EAAAA,IFZInO,EGQE,CAAC0Q,EFPA,GDDK,AF7BJ/U,CKqCK,CDIC,CFZC,AEYA+F,CCJC4O,CLrCH,CG8BX,EH9Bc3U,EKqCM,ADIR,CCJS4U,CDIC,CJzCH,CAAClU,CKqCA,CAAhB,ILrCU,CAAa,CAAb,AKqCkBsU,CLrC1B,KKqCgC,GAAGD,MAAM,CAACF,IAAD,CAA3C,CAAJ,EAAwD;AHPxD,ACCE,AEOA,ADIF,WFZO,AGQAC,GFPCjQ,CEON,EFPS,EEOImQ,CFPD,CDDd,ICCmBrJ,AEOjB,EACE7L,QAAQ,CFRE,AEQDgV,CFRkBxT,GEQnB,CAAR,CFRgC,CAACd,KAAvB,CAAZ;ADAH,AF9BO,AKuCL,ADGD,GFpB+B,CAUjC,IEUMA,KAAK,GAAGuF,EJ1CF/F,KAAK,AI0CI,CJ1CH,AI0CIQ,CJ1CL,CAAL,GI0CV,EJ1CuB,GAAjB,EAAsB;AACpBQ,AG8BN,AESH,ADGC,GC/JyB,CA8J3B,IDCMmP,IDZEtL,ECYI,CDZD,ACYEjE,CJ1CHI,GI0CJ,CDZU,ACYER,IDZd,CCYE,CDXA,ACWJ,EJ1CoB,AI2ClBA,GJ3CqB,EG+BZ,ACYJ,EJ3CC,CI2CEA,EDZM0K,GCYD,CAACrJ,EDZL,CAAY,ICYb,CAAcuO,QDZb,CCYD,CDZ4B9O,CCYHgR,IDZxB,CAAP,YCYM,CAAR,CAJoB,CAMtB;AJ5CQ,AG+BN9R,AEUJ,QFVIA,KAAK,GAAG,KAAKoL,UAAL,CAAgB/G,GAAhB,CAAR;ADAK,AF9BA,AG+BL,AEUJ,ADGE,MFdErE,EEcEuF,GFdG,GAAG,CEcC,CAACW,QAAZ,EACE,OAAQ,IAAGlG,KAAM,KAAIuF,OAAO,CAACW,QAAS,EAAtC,CARoB,CAUtB;AFhBA,AF9BK,AG+BL,WDDO,EFtCE,CASL,EE6BQP,EAAL,CAAQzF,MAAR,CAAe,CAAf,CAAP;AACD,AFvCU,AIuDT,QAAI,KAAKtB,IJ7CA,KI6CT,EAAoB;AJ5Cd,AG6BN,AESFkX,ADOI,ECPJA,SFTO,IESM,CAAC3B,CFTZ,GH7BU,EKsCC,EAASC,CLtCLtV,GKsCJ,EAAeuV,ELtCpB,EAAkB,AKsCb,EAAqBC,IAArB,EAA2B;AHvBP,AFdvB/T,AG6BR,AESA,ADOE,EFfN,MGQQwV,EDOExQ,CDhBD,EESI,GAAG,CAAZ,ADOa,CJ7CLhF,AI6CM8F,GDhBd,KCgBM,CAAiBrG,EJ7CJ,GAAG,AI6ChB,CJ7CE,II6CyBlE,GAAG,CAACK,MAAnC,EACE,OAAQ,IAAG6D,KAAM,GAAjB;AJ7CI3D,AG6BN,AEQF,ADSC,KAJD,GCLe2Y,GAAf,ADUK,GDlBG/U,IH7BA5D,EG6BM,EH7BF,CG6BK,EH7BF,GAAP,AG6Bc4N,SAAL,CAAenJ,KAAK,CAACb,MAArB,CAAf;AH5BK,AG6BL,AEOF,ADWE,QCXkBsU,IFPdtU,EEON,IFPY,KAAK6C,SAAf,EACE,OAAO,KAAK4H,MAAL,CAAa,qBAAoB5J,KAAK,CAACb,MAAO,IAA9C,EAAmDa,KAAnD,CAAP;AACFd,AEKF,ADYE,QDjBAA,AEK0BwU,KFLrB,CEKP,ADYUjP,CCb4B,CFJ5B,AEOV,KFPe6F,ACiBE,CAAC/E,QAAR,CDjBA,ACiBiBrG,CDjBDC,ICiBxB,EDjB8B,GAAGa,KAAK,CAACd,KAA/B,CAAR;AH9BI,AG+BJ,ACiBA,aAAKlE,GAAG,CAACK,MAAT;AFpBC,AF3BE,AG+BL,AEMA,ADWI,MFrBKyK,EGULwN,IAAJ,EAAU,CAACY,EDWC,CFrBT,AGUW,GAAGb,ADWFnU,KAAM,CFrBS0F,AGUnB,EAAcyO,ADWrB,EFrBD,CAAgC,GGUJ,GAAG,EAAxB,EAA4BC,IAA5B,IAAoCY,GAAG,CAACZ,IAAD,CAAvC;AHTZnW,AF3BM,EE2BNA,WAAW,GAAG;AACZ,ACGA,AEMA,ADWE,SCXG,CHTC,CCGD,CDHL,CEoBOnC,ECXIqZ,CDWD,CAACnZ,CDjBX,GEMA,GDWE,CCXmBmY,MAArB,EAA6B;AHR7B,AF5BE,AG+BAnU,AEMA,ADWE,QDjBFA,EEMIuU,CHTCvP,EF5BA,AG+BA,CCiBChF,EJhDN,AG+BQ,AEME,GAAGmU,ADWF,EDjBE9I,EDHI,CEoBD,CCXG,CAAC8J,CHTC,GEoBf,CFpBR,ACGU,CAAgB,AEML,CAAnB,CDW0BnV,CCXG,EFNAiK,ECiBE,KAAK,EDjBZ,CAAenJ,ICiBrC,CDjB0C,CAACb,ACkBzC,MDlBoB,CCkBbD,GDlB4Cc,ECkBnD,GDlBwD,CAACd,KAArD,CAAR;ADFH,AF5BK,AG+BF,AEME,ADYA,GFzB+B,CAMrC;AF7BM,AG+BJ,AEMI,YAAIqU,ELrCA/T,EKqCJ,EAAU,CLrCD,AKqCE0U,GLrCC,AKqCE,GAAGT,ELrCAhX,IKqCN,EAAcgX,MAAM,CLrCnB,CAAmB1U,CKqCG,EAAxB,CLrCE,CAAwBL,AKqCE6U,IAA5B,CLrCE,CAAZ,EACEhY,AKoC4C2Y,GAAG,CLpC3C,AKoC4CX,GLpCzC,CKoCwC,CAAvC,GLpCR,EAAcrU,KAAK,GAAGM,KAAK,CAAC,CAAD,CAA3B,CADF,CAEA;AAFA,AIiDF,aAAKxE,EJ9CE,CI8CC,CAACI,EJ9CEoE,KAAK,AI8ChB,GJ9CmB,KAAKhD,IAAL,CAAUuC,IAAV,CAAeL,KAAf,CAAZ,EAAmC;AE2BlC,AF1BJQ,AG4BN,AEMI,ADYA,MFpBF6D,KCEG,EEMI,CHRC,AF1BJ7D,AI8CE,EDlBR,CDFa,EF1BF,AKkCIqV,GLlCD,GKkCV,ELlCe3U,AI8CEN,ECZImU,EDYjB,CAAkBvU,GCZtB,CLlCU,CAAeM,AKkCI,ADYzB,CAAJ,EACE,EJ/C4B,CAAC,CAAD,CAApB,CAAR,CI+CON,KAAP;AFpBN,AF1BM,AG4BJA,AEMI,ADaF,QDnBFA,GDFK,ECEA,CEMGwU,EFNA,EH5BAxU,EKkCM,CFND1B,EH5BA,AKkCIiW,EHRnB,GF1BoB,CKkCK,CFNf,AEMgBc,CFNDvU,CH5Bf,IAAkB1D,AG4BE,AEML,CFNM4C,AEMzB,EAA6B,GFNV,CAAYE,MAAZ,CAAmB,CH5BD,AG4BlB,CH5BmBE,AG4BlC,CAAR,GH5B0B,CAAqBJ,KAArB,CAAtB,EACE,OAAOW,iBAAiB,CAAC,IAAD,CAAxB;AE0BT,AFzBOtE,AG2BJ,AEMM,GHjB2B,CAWrC,UF3BQA,IAAI,GAAG,KAAP;AACD,AG2BL,AEMQ,ADYN,aJlDO,AIkDFP,CJ5CH,EKgCQwY,ADYF,CAACvY,GCZH,EAAWuY,EDYjB,ECZqB,IAAIE,MAAT,IAAoBuB,KAAK,EAAzB,CAAV,CACA;ALvCC,AKsCD,ADaJ,cAAI,GJ5CC,AKiCIA,ILjCAvW,CKiCK,ILjCA,AKiCIiF,CLjCHtE,KKiCS,ADWFC,CJ5Cb,AKiCgB6T,GLjCD,AI4CpB,CJ5CK,AKiCS,ADWSjU,CCXGwU,GLjCDhV,CI4CzB,CAAJ,CCXkB,CDYhB,CJ7CgC,AKiCIW,CLjCH,CAAD,CAAL,GKiCpB,ADYAH,EJ7CiC,GAArC,AI6CH,EJ5CA3D,IAAI,GAAG,IAAP,EAAakE,WAAW,GAAG,CAA3B,CADG,CAEL;AEuBNqF,AFzBW,AG0BT,AEQO,ADYH,EFrBNA,MAAM,CAACC,KAAD,EAAQ,GFtBH,IAAI,KAAK/G,OAAL,IAAgBU,KAAK,CAACW,MAAN,GAAe,CAA/B,IAAoCX,KAAK,CAAC,CAAD,CAAL,KAAa,GAArD,EACHnD,IAAI,GAAG,SAAP,EAAkBkE,WAAW,GAAG,CAAhC,EAAmCP,KAAK,GAAG,GAA3C;AEsBN,AFrBI,AGsBF,AEQG,eFRI,KAAK0K,MAAL,CAAa,2BAA0B5J,KAAK,CAACzE,IAAK,EAAlD,EAAqDyE,KAArD,CAAP;ADAF,AC3BA,AEoCG,ADWD,KDjD2B,CA+B7B,OCkBOhF,GAAG,CAACG,MAAT;AFnBF,AFrBE,AK8BD,ADWG,aJzCG,CIyCC,EJzCN,uCIyC+CmE,IAAzC,CAA8CJ,KAA9C,CAAJ,EACE,OAAOA,KAAP;AFpBN,AFrBI,AI0CA,WFrBI,GFrBAR,KAAK,CEqBIqG,AFrBH1F,KEqBP,CFrBC,GEqBoB,AFrBL,CEqBM,AFrBrB,CEqBsB0F,GFrBFrG,EEqBA,GFrBK,CEqBO,AFrBN,CAAD,CAAL,GEqBiBqE,EFrBJ,GAArC,EACExH,CEoBkC,GFpB9B,EEoBgDwJ,CFpB7C,IEoBkD,AFpBzD,CEoB0DhC,CFpB7CtD,OEoBnB,IFpB8B,GAAG,CAA3B;AEqBP,AFpBK,AGoBJ,AEQA,ADNE,QDFE,CAAC2K,EEQE6K,KAAP,GFRI,IAAe,KAAKjX,OAApB,IAAgCkB,KAAK,CAAC2F,EAAN,IAAY,KAAKwE,WAArD,EACEnK,KAAK,GAAG,KAAKmK,WAAL,CAAiBnK,KAAK,CAAC2F,EAAvB,CAAR;AACF,AEOD,ADaE,GClMwB,CAuL3B,CD3BwB,CAwCtB,KDtBO3F,KAAP;ADnBmC,AFDjC,AGqBH,AESD,EHTF,CC7K8B,CA+K5B,SHvBS,GAAL;AACE;AACA,AIyCJ,WAAQ,IAAGA,KAAM,MAAK,KAAKmR,iBAAL,CAAuB5L,OAAO,CAACc,QAA/B,CAAyC,EAA/D;AJxCI,AGqBN0E,AEOAiL,ADaC,EDpBDjL,AEOAiL,CDpK4B,CAmL5B,QCfU,CAAC5R,CFPC,CAACtD,GEOH,EFPE,AEOM,EFPE;ADFtBkE,AFlBQ,AGqBJ,AEOA,QAAI,CFPCuF,AEOA0L,GHVG,EFlBA,CEkBG,AFlBF3V,EK4BI,CAAC8D,CHVCwC,ACGf,CHrBc,EGqBI,CHrBD,AK4BJ,CAAb,EFPA,AEQE,EL7BoBlJ,GEkBX,EAAf,AGWa,CL7BQ,CEqBrB,AFrBiCmC,GK6BfwT,CL7BG,CAAiB7T,KAAjB,AK6Bf,CL7BM,KACAD,aAAa,KAAKe,KAAK,GAAG,KAAK5C,MAAL,CAAYmC,IAAZ,CAAkB,GAAEL,KAAM,GAA1B,CAAb,CADjB,EAEEnD,IAAI,GAAG,OAAP,EAAgB4D,MAAM,GAAG,GAAzB,EAA8BD,KAAK,GAAGM,KAAK,CAAC,CAAD,CAA3C;AACF,AK2BJ,UAAMsT,MAAM,GAAG,EAAf;AHRG,ACAH,AESAA,ADYFvC,EAAAA,ECZEuC,KHTY/M,CGSN,CAACzC,CFTCtD,IESF,CFTO,AESb,CFTczE,ACqBA,CFrBX,AEqBY+K,CFrBQzB,AGSP,EHTb,ACAH,EDA2BrB,CGSN+O,GDYP,EAAY,CFrBvB,CGSa,CHToB,AGSPjP,KAAb,CAAhB;AHRFE,AFlBI,AGkBF,AESA,ADYA,EFrBFA,OAAO,ECAA,AESEsP,ADYAxM,CFrBC9C,CFlBD,CGkBP,EHlBE,CK2BF,EHTe,CEqBC,CAACtE,EFrBEoF,GEqBZ,KAAoBhJ,GFrB7B,AEqBgC,CFtBM,AEsBLC,CFnBjC,GEmBS,GAA+B,GAA/B,GAAqC,KAAK8U,iBAAL,CAAuB/J,SAAvB,CAA5C;AJtCI,AGkBF,AESH,ADYA,GC3M0B,ADqBC,CC4K5B,ADYA;AFrBA,AFnBM,AGkBF,AEWJ,MHVI,CAACzB,EAAL,EACE,ECFOiE,CHlBCtJ,IEoBDgE,CFpBM,GAAG,GEoBF,ACFZ,CDEakB,ACFK,CHlBChI,MGkBnB,EAA2B,GDEtB,EAAP,ACFkCwK,CDHE,CAOtC,IFtBkB,AGkBd,CHlBuCnI,CGmBrB,GHnBJ,CAA8BL,CGmBrB8K,IHnBT,CAAZ,EACEtK,CGkBc,GAAgB,CHlBzB,GAAGM,CGkB2B+K,IHlBtB,CAAC,CAAD,CAAb,CADF,CAEA,CGiBgC,EADlC,EACqD,IADrD,EAC2D,IAD3D;AHlBE,eAGK;AEoBX,AFnBQ,AGgBJ,ACqBJ+F,EAAAA,QFlBQzL,EAAE,CAAC,CAAD,CAAV,AFnBS,AGgBE,ACqBE,CAAC0B,IDrBEiE,ECqBH,EAAS,cDrBlB;ADIJ,AFpBWtL,AK0BXkW,ADYE,ECZFA,OHNK,GAAL,AEkBU7O,IJtCCrH,CK0BI,CAACV,ADYA,CAACuE,EJtCR,KK0BM,CDYb,CCZwB;AHLxB,AFrBgBtD,AGiBhB,AEUA,ADYA,UCZM4V,CFVD,ACsBA,EFlBE7R,CCJP,EHjBgB/D,CIuChB,ECZe,CHND,CAAC+E,CGMGb,MAAM,CHNjB,AGMkBC,CHNDiB,EAAE,CAACzF,EGMT,CAAc,GHNR,CAAU,AGMhB,CHNM,AGMxB,CHNO,CAAP;AFrBO,AGkBL,AEUF,ADYE,WCZKyF,EAAE,EDYA,ECZI,CL5BmB,EIwClBiM,GJxCuBhR,QIwC5B,CAAiByG,IJxCM,CAAmB7H,CIwC1C,CAAP,GJxC8B,CAA1B;AEsBR,AFrBQ,AGkBJ,AEUA,SHPC,CGOG,EHPR,AGOUmG,CFVDiE,CEUG,IL5BA5J,AK4BImW,KL5BC,EGkBb,CAAkB,CEUd,CL5Bc,AK4BlB,EAAwB,EL5BpB,AGkBJ,EHjBM,AGiBoB,KAAKnO,EHjBlBrH,IGiBb,EAAuC,KAAK4K,MHjBd,CAAC,AGiB/B,EAAqD,EHjBvB,CAAxB,CGiBN,EAA2D,IAA3D;ADIF,AFpBK,AK2BD4K,ADWJ,QCXIA,GDWC,EFlBE7R,IGOM,CAACqB,EHPA,AGOD,ADWb,CFlBeN,AGOX,GAAgB,IAAhB,EHPG,CAAkBM,EAAE,CAACzF,MAAH,CAAU,CAAV,CAAlB,CAAP;ACHE,AEWEZ,ADWF,QCXEA,KFXGgL,ECsBE,CCXG,CAAC,GDWC0H,CDtBZ,GAAgB,IAAhB,MCsBO,CAAoB3K,MAApB,CAAP,MCXsB,KAAKmM,SAAL,CAAe7N,EAAf,CAAX,EAA+B,KAAK+N,QAApC,CAAD,CAAR;AHPN,AFpBM,AGiBF,AEWC,SHRA,GAAL,EFpBUpT,CGiBC,IHjBI,CGiBCkL,IHjBI,IAAV,IAAkBjL,CGiBxB,UHjBmC,KAAK,CAAtC,EAAyC;AEqB7C,AFpBMlE,AK4BL,ADUD,KCfA,OLvBMA,IAAI,GAAG,SAAP;AEqBN,AFpBM,AGgBN,AEYD,ADUG,GCrNuB,CA6M3B,MHVMiI,CCJC,GAAL,CCsBS,EFlBE,AFpBAlF,GIsCG+R,EFlBE/L,WAAhB,EACE,AFrBI,EIsCG,CJtCuB,AIsCAiC,CJtC1B,GEqBG,EEiBA,CAAP,CFjBWrB,OAAJ,CAAYL,EAAZ,CAAP,CAHJ,CAIE;AFrBK,AGgBH,AEeJ,ADAE;AFTA,ACLE,AEeJ,ADOC,GAlM2B,CAoM5B,MFnBMA,EAAE,ACLA,CDKCA,ACLA,EDKE,CAACxF,ECLErB,IDKL,GAAY,ACLjB,CDKI,CAAF,ACJA,KDIsB,ECJf,CDIX,EACE,ECLc4L,KDKPpG,CCLE,CAAY,KDKP,CAACiB,OAAR,CAAgBI,EAAE,CAACzF,CCLjB,EAAgCY,GDKlB,CAAU,CAAV,ACLd,CAAP,CDKkC6E,EAAE,CAACxF,MAAH,GAAY,CAAzB,CAAhB,CAAP,CANJ,CAOE;AFvBI;AEwBJ,ACNE,YDMI2G,CCNC8C,KDMK,GAAGjE,EAAE,CAACM,CCNhB,CAAkB,SDML,ACNb,CDM4B,CCNC,EDMhB,EAAoBN,CCNCqC,CDMC,CAAC7H,ICNpC,EDMiC,ACLf,GDK2B,CAAhC,CAAf,ACLyB6H,MAAL,GAAc,KAAKqD,UAAL,EADhC,EACmD,IADnD,EACyD,IADzD;ADOF,AFvBE,AK8BJ6G,ADSAN,ECTAM,ADSAN,OCTO,CAACzK,GHPC7C,AFvBA,AIuCE,CAAC,EJvCR,CK8BG,EAAU8C,CHPD,CAAC7B,OAAR,AGOF,CHPkBI,CGOG0B,CHPD,CAACnH,IGOrB,EHPkB,AGOWkE,CHPD,CAAV,EAAa0C,CGO/B,EAAoC,GHPC,GAAG,CAAtB,CAAhB,EACCnB,EAAE,CAACmB,MAAM,GAAG,CAAV,CAAF,KAAmB,GAAnB,GAAyBnB,EAAE,CAACzF,MAAH,CAAU4G,MAAM,GAAG,CAAnB,CAAzB,GACyBxC,OAAO,CAACS,SAAR,CAAkBY,EAAE,CAACzF,MAAH,CAAU4G,MAAM,GAAG,CAAnB,CAAlB,CAF1B,CAAP;AFtBI,AGiBF,AEaF,ADQYK,IAAAA,OAAF,GJtCF,CAAC,AGiBA,KHjBKvI,AGiBAmM,SHjBV,EAAqB,CGiBvB;ADQJ,AFxBQ,AK8BN,ADOqB3D,IAAAA,ICPjB,CHND,AGMEA,GHNP,CEaY,KCPV,EACEhD,KAAK,GAAG+C,OAAO,CAAC/C,KAAhB,EAAuBiD,MAAM,GAAGF,OAAO,CAACE,MAAxC,EACED,SAAS,GAAGD,OAAO,CAACC,SADtB,EACiCD,OAAO,GAAGA,OAAO,CAACA,OADnD,CAHuC,CAMzC;AHTA,AFxBM,AGgBN,ACoBgCE,IAAAA,MAAtB,CDpBL,CDQCN,ECRN,EHhBUzG,KAAK,CEwBC,EFxBE,CEwBC6E,IFxBIhH,EEwBE,CAAC0B,IAAP,CAAY8F,EAAZ,CAAnB,YFxBkB,CAA6B9F,IAA7B,CAAkCL,KAAlC,CAAZ,EACEQ,KAAK,GAAGM,KAAK,CAAC,CAAD,CAAb,CADF,CAEA;AEuBN,AFzBM,AGiBH,AEiBH6G,ADEwC/C,ICFxC+C,ADEwC/C,OCFjC,EHTAE,CGSG,GL/BC,GEsBG,CAACH,IAAR,CACL0C,UAAU,CAACG,MGQMG,OAAT,CHRiB,AGQ3B,CHR4BJ,UAAU,CAAC,CAAD,CAAX,CAAf,EAAgCzC,OAAhC,CADL,EAELuC,UAAU,CAACG,cAAc,CAACD,UAAU,CAAC,CAAD,CAAX,CAAf,EAAgCzC,OAAhC,CAFL,EAGLuC,UAAU,CAACG,cAAc,CAACD,UAAU,CAAC,CAAD,CAAX,CAAf,EAAgCzC,OAAhC,CAHL,EAILyC,UAAU,CAAC,CAAD,CAAV,IAAiBF,UAAU,CAACG,cAAc,CAACD,UAAU,CAAC,CAAD,CAAX,CAAf,EAAgCzC,OAAhC,CAJtB,CAAP;AFrBQ,AGcN,AEiBF8C,ADCU,GAAD,CCDTA,CDCiD,QCDxC,EFjBA,CEiBG,CL/BH,GGcKqE,gBAAL,CAAsB3K,KAAtB,CAAP,EEiBmBsG,SAAT,CAAZ;AHJF,AF3BapH,AKgCXqH,ADCA,ICDAA,MAAM,CDCE,ECDC,GDEP,EJlCSrH,GIkCJsR,EJlCE,YIkCP,CAAoBnK,MCFJE,CDEhB,CAA6B,ICFtB,ADGP,CCHF,IDGOgK,gBAAL,CAAsBjK,SAAtB,CAAiC,IACjC,KAAKgK,aAAL,CAAmB/J,MAAnB,CAA2B,GAC3B,4BAAejD,KAAf,IAAwB,EAAxB,GAA8B,IAAG,KAAK+M,iBAAL,CAAuB/M,KAAvB,CAA8B,EAAE,IAJnE;AFLA,AF5BkB7D,AGelB,AEkBA6D,ADKD,GA3M2B,CCsM1BA,ADOF,KCPO,EFlBA,CEkBG,CHLDE,KF5BW/D,EE4BJ,CAACwE,ACbf,SDaO,CAAkBY,EAAlB,CAAP,OGKiBvB,KAAT,CAAR,CAVyC,CAYzC;AHjCF,AFFW,AGgBP,YAAI,CAAC,KAAKtF,EHhBsB,KAAK8B,AGgBrC,EACE,OAAO,IHjBuB,CAAmBpB,AGiBrCkL,KHjBkB,CAA1B,AGiBG,CAAY,uBAAZ,EAAqC5J,KAArC,CAAP;ADaP,AF7BW,AGiBN,AEkBF,EHJJ,MGIQsV,KFlBG9L,IEkBM,GLnCDtK,AKmCI,CFlBd,GAAgB,CHjBD,AKmCIqT,GFlBnB,EHjBoB,EKmCN,CAAajP,CLnCrB,EACE,EKkCM,CAAhB,CAbyC,CAczC,ELnCiBzD,iBAAiB,CAAC,IAAD,CAAxB;AACH,AGgBL,ACsBJsR,EAAAA,WDtBS1H,ECsBI,GAAG,KDtBZ,GAAkB,KAAKmB,UAAvB;AACA,AEkBF,ADIA,QCJI,CAAC0K,CDIC,GDtBCzK,CCsBG/I,ICJV,CDIM,CCJU,ADIA,IDtBd,GAAmB,KAAKyI,UAAxB,4BCsBI,CAAN;AFTG,AF7BG,AGiBJ,AEkBA+K,ADIH,GAhN2B,CAkN5B,ECNIA,GHNUnP,MCZH,AEkBE,CLnCD3G,CE6BP,CAAkBsD,AGMP,EFlBAgI,CHjBC,CE6BZ,CGMgByH,CHNQ,EF7BP,IAAV,AKmCI,CAAajP,GLnCC7D,EKmCd,GFlBZ,CEkBkC,KLnCG,KAAK,CAAtC,EAAyC;AE8BjD,AF7BUlE,AKkC8BwX,MHLpC,EGKoCA,KHL7BjQ,CF7BDvH,EKkCsC,CHL5C,CF7BU,AKkCoC,EAAZ,CLlCrB,CE6BG,QAApB,AF7BU,EE8BR,OAAOuH,IAAP;AACF,AF9BU,AGgBR,AEiBoDyS,MHHlDzS,EGGkDyS,EHH9C,CCdD,OEiByD,CLjCjDjX,CGgBb,AEiBgE,EHH9CsG,AGGkB,IHHlC,IAAwB9B,IAAI,CAACC,EF9BvB,GAA0B,CAA1B,EE8BkB,KAAkB,MAA9C,EACE,OAAOD,IAAI,CAAC+B,EAAZ;AACF,AF/BS,AGgBL,AEgBkE2Q,ADOtEpE,EAAAA,IFRI,CAACtO,CGCiE0S,CDO/D,CAACnP,CFRR,CCfQ,CDgBN,AChBO,EEgBoE,EAAE,ADOxE,CDvBOrI,CCuBGsI,CFPRpC,KChBL,EACE,CCsBC,EAAqBqC,EFPP,CAAC1B,CCfT,CDeX,CAN2B,AEatB,CFLP,CEKoCvB,CDtBlBsG,ICsBX,EDtBM,ACsB8B+F,CDtBlB,GCsBlB,EAA0C,iBDtBpC,EAAoC3P,KAApC,CAAP;AHhBC,AGiBH,AEckC,ADQpC,OCRE,CADc,CAEd,IFfKwJ,QAAL,GAAgB,IAAhB;ADiBJ,AChBI,AEeA,ADOF,QAAIjD,EFNEzD,GChBC2G,CDgBG,AEMA,CFNC1G,IEMIf,IFNjB,AChBI,GAAkB,ECsBpB,EACE,CDvBuB+I,ICuBlBkF,KDvBL,KCuBA,CAAgB5J,OAAO,CAACA,OAAxB,EAAiCA,OAAO,CAACC,SAAzC,EAAoDD,OAAO,CAACE,MAA5D,EAAoEF,OAAO,CAAC/C,KAA5E,EAAmFgD,SAAnF,EADF,CAEA;AFPF,AFlCM,AGkBF,ACqBF,SFLG,AEQE,IDxBEuE,ACwBE,OFRX,AEQkBvH,IDxBd,CCwBO,EDxBY,GCwBK,EDxBA9F,QCwBrB,CDxBH,CCyBA,KAAKyS,UAAL,CAAgB5J,OAAhB,EAAyBC,SAAzB,EAAoCC,MAApC,EAA4CrC,YAA5C,EAA0DZ,KAA1D,EADG,CAEL;AFVmB,ACfjB,AEcAK,ADSG,MCTHA,KDaA,CCbM,CHCkBb,AGDjB2S,EFdA,CC2BFxF,CFZuB,CAAC/Q,CGD7B,CFdY4L,AEcEwK,GHCG,GEYjB,CAAgBjP,ECbhB,KDaA,EAAyBC,GD3BzB,MC2BA,EAAoCC,MAApC,EAA4CjD,KAAK,IAAIY,YAArD,EAAmEyL,IAAnE;AJ5CA,AKgCD,ADaF,GA7N2B,CA+N5B,CCnC2C,CAsBzC,OLlCO,GAAL;AEiCJ,AFhCM,AGiBJ,AEiBA,SHFG,ECfE,SDeP,ACfE;ADemB,AF/Bf,AGiBF,AEiBF,YFjBM,CDcqB,ACdpB,CHjBC,IE+BuB7M,ACdnB9E,CHjBCA,GE+BsB,CAACkB,ECdlC,CHjBM,CGkBJ,CDasC,EAAvB,CF/BMM,GGkBd,EHlBmB,GAAG,AGkBjBoK,KHlBsBpM,CGkB3B,CAAY,OHlBU,CAAeuB,IAAf,CAAoBL,KAApB,CAAzB,CAAJ,AGkBO,EHjBLnD,AGiBuCyE,IHjBnC,CGiBC,CAAP,CHjBS,KAAP,EAAcd,KAAK,GAAGM,KAAK,CAAC,CAAD,CAA3B;AACF,AI4CN6R,EAAAA,QAAQ,CAAC5C,KAAD,EAAQ;AFdhB,ACZI,AC2BF,SFfG,AEeE,GD3BCzO,CC2BGmO,CAAC,GD3BC,AC2BE,CD3BDhP,AC2BZ,CFfF,CEekBgP,CAAC,GD3BX,AC2BcM,CD3BDpP,IC2BM,CAACA,CD3BpB,KAAwB,AC2B9B,CD3BE,CC2BgC8O,CD3BD,AC2BE,EAAnC,EACE,KAAKiD,OAAL,CAAa3C,KAAK,CAACN,CAAD,CAAlB;AFhBiB,AF5BjB,AGiBE,AEcJ,ADcD,GAnO2B,CAqO5B,MChBQuH,GHHqB,AF5BpB,AK+BE,EFdA1K,CHjBP,AK+BU,CHHkBlI,IAAI,AGGjB2P,CHHkBvT,GGGnC,EHHyC,CCXrC,CDWe,ECXMc,KAAK,CAACd,KAA3B;AHhBA,AGiBA,AEcJ,UAAMyW,OFdK,CEcG,GAAG,CFdD1K,IEcMyH,SAAtB,UFdI;ADWN,AF3BM,AGiBD,AEcHrM,IAAAA,KHJG,ACbD,EEiBK,GL/BC,AK+BIqP,CFZR,EEYW,CAACrP,CL/BH1G,CGmBJ6J,GDQX,EGIiB,CAAH,EFZR,GAAgB,AEYWkM,GL/BvB,AK+B0B,CAACC,CFZVzK,GHnBQ,IK+BU,CFZvB,AEYwB,CFZVlL,CEYY,EL/BtC,EGmB+B,CAACd,AEYWsT,EL/BJhT,CK+BJ,CAAR,CFZf,EHnBgC,AGmBL,AEYW6G,GL/BH,EGmBHiE,EEYlB,CL/B0B3N,AK+B7B,GAAwC,IFZxB,CAAgBqD,AEYawS,CL/BrB,CAAezT,CK+B1D,CAAZ,CFZoE,CHnBb,AGmBcI,CHnBMT,KAApB,AGmBR,CHnBvC,AGmBY,CHnBhB,AGmBA,EHlBEnD,IAAI,GAAG,UAAP,EAAmB2D,KAAK,GAAGM,KAAK,CAAC,CAAD,CAAhC,CADF,CAEA;AEyBe,AF3Bf,AKgCJ8G,ADcFgL,EAAAA,ECdEhL,ODcO,CAACnH,CFnBkB,AGKjB,EHLU,AFxBV,CK6BGuW,EDcL,CJ3CMlW,AK6BE,CAAC8G,ADcA/C,GAAT,CJ3CW,CI2CGoM,EJ3CA,EK6BN,ADcR,CCdK,CDce,CJ3CDhS,GK6BK+X,GAAG,CAACC,CL7Bd,CAAc5W,IAAd,CAAmBL,CK6BG,CAAC,EAAE,CL7BzB,CAAZ,EACHnD,CK4B6CiX,GL5BzC,AK4BiC,CAAR,EL5BtBhT,CK4B6C8G,IL5BxC,CAAC,CAAD,CAAZ,EK4B4B,CAAH,GAAwC,KAAKkM,GAAhE,CAAZ;AL3BI,AGgBF,AEYFjM,ADcA,ICdAA,MAAM,ADcA9C,GCdMiS,GAAG,CAACnP,CDcF,GAAG,ECdF,ADcf,CCdY,KAAmBmP,GAAG,CAACC,QAAQ,CAAC,EAAE,KAAKnD,GAAR,CAAR,GAAuBjM,MAAxB,CAAH,GAAwC,KAAKiM,GAAhE,CAAZ;AHLF,AEoBE/O,IAAAA,KFpBG,GEoBK,CAACtE,KFpBX,CEoBU,CAAR,GAAmBoE,GAAnB;AFpBmB,AFrBjB,AGeF,AEaA,ADcA,SAAKyM,CCdC4F,CFbD,EDMsB,AFrBpB,EGeP,CHfE,CEqB4B9S,AGOjB,GAAG,ADchB,CFrBkC,AEqBjBW,CFrBkBvE,GGOdkU,EHPoB,EEqBzC,EFpBAtQ,AEoB2B6M,IFpBvB,AEoBJ,CFpBKvK,AGMW,CAAiBkQ,OHNjC,EGM0C,CHNzB,AGM0BvC,IHNvBjQ,IAAI,AGMR,CHNSsC,CGM8BiB,OHNrB,AGMlB,EHNhB,AGMkEC,GHL/DxD,IAAI,CAACyC,CGKQ,EAA6DgB,KHL1E,CGKa,CAAhB,EHLoBzD,IAAI,CAACyC,QAAL,CAAcrG,KAAd,KAAwBlE,GAAG,CAACK,MAA7C,GAAuD,KAAIyH,IAAI,CAACyC,QAAL,CAAcrG,KAAM,EAA/E,GAAmF,EAAI,EAFvE;AFpBf,AGeF,AC2BH,GA1O2B,CA4O5B,QD7BQ,CAAC,KAAK+I,gBAAV,EACE,OAAO,KAAK2B,MAAL,CAAY,wBAAZ,EAAsC5J,KAAtC,CAAP;ADON,AFtBM,AK2BJ,SHLG,AGKEoT,KL3BG1U,CEsBV,IFtBe,CAACW,AK2Bd,CAAiBiW,KL3BT,IK2BkB,CL3BD,AK2BEC,CL3BnB,GAAqB9W,MK2B7B,EAAuC6H,KL3B/B,GAAsC5H,CK2B9C,EAAkD6H,EL3BC,CAAC,CAAD,CAAL,CK2B9C,EL3ByD,AK2BIF,GL3Bf,IAAkB3H,AK2BhE,KL3BqE,CAAC,CAAD,CAAL,GAAW,GAAvE,EAA6E;AEuBjF,AFtBMnD,AGeJ,YHfIA,CGeCuN,GHfG,GAAG,GAAP,GGeJ,CAAkB,IAAlB,EAAwB,KAAK5B,MAA7B,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,IAAjD;ADQF,AFtBMzH,AK0BN,ADgBFuQ,EAAAA,OChBOoD,GL1BC3T,CI0CG,CAACgE,MChBV,CAAiB6R,CDgBR,CJ1CQ,CI0CG3F,EJ1CA,CAAd,CI0CG,EChBiB,ADgBA,CChBC6F,OAA3B,EAAuCjP,MAAvC,EAAkDF,OAAlD,EAA6DC,SAA7D,EAjCyC,CAmCzC;AHLA,AFtBM,AGcJ,AC4BF,aFpBQ,ACRDY,KDSHd,CCTF,GAAc,IAAd,IDSc,CAACD,QAAQ,CAACrD,IAAI,CAACuD,OAAN,CAAT,CACb,IACCD,YAAY,CAACD,QAAQ,CAACrD,IAAI,CAACwD,SAAN,CAAT,CACb,IACCF,YAAY,CAACD,QAAQ,CAACrD,IAAI,CAACyD,MAAN,CAAT,CACb,GACE,4BAAezD,IAAI,CAACQ,KAApB,CAAD,GAA+B,EAA/B,GAAqC,IAAG6C,QAAQ,CAACrD,IAAI,CAACQ,KAAN,CAAa,EAC9D,IARH;AFrBK,AGcH,AC4BF,QAAI,CAAC,KAAKyM,CD5BD,KAAK9F,KC4Bd,EACE,KD7BA,EC6BO0F,IAAI,IAAIA,IAAI,EAAnB,CAHwB,CAK1B;AFfF,AGHE,SAAK2C,KAAL,GAAa,IAAb;AHGO,AF7BH,AGcJ,AEaA,ADkBA,QAAIf,GClBGqE,CHEM,IAAI9T,EGFjB,CDkBe,EFhBF,CAAW,AEgBN,KAAlB,mBFhB+CgB,IAAI,CAACC,QAAS,EAAhD,CAAN;AApBT,ACMI,AEaH,GAvP0B,CAyP3B;AHCD,AF7BK,AGcA,AC8BF,EFZJ,OEYS,GD9BC,CHdC,AGcA,AC8BE5D,GJ5CP,EGcUqK,CC8BZ,IAAmB/F,GD9BZ,GAAgB,EC8BvB,EAA6B,CD9BD0G,WAAL,CAAiBnK,KAAjB,CAAjB,MAA8CgC,SAAlD,EACE,OAHJ,CAIE;AHfA,AI4CA,UAAIuB,GJ5CC,AI4CE,GJ5CP,AI4CUE,QAAQ,CAACtE,MAAD,CAAlB;AJ3CA,AGeA,AEYJkS,ADiBI,ECjBJA,QAAQ,ADiBA,CCjBC5C,CFZD,CHfC,GAAL,AK2BI,CFZKzQ,AC6BEuF,CCjBC,EDiBR,ID7BJ,CC6BmB,CD5BjB,OAAO,AC4BT,EACEA,GD7BY4H,AC6BT,GAAG5H,GAAG,CAACrE,KAAV,ED7BO,CAAoB,KAAK4I,0BAAzB,CAAP;ADeD,AF9BD,AG5CF,AEuEA,ADkBEyJ,KD3FgB,CD4ET/K,ACZT,AC2BE+K,GClBG,CHGF,GF9BI,AK2BEpD,CAAC,EL3BR,CK2BW,ADkBA,CClBb,CHGsBvJ,CGHNuJ,ADkBA,CClBC,EHGd,CAAwB,AGHPM,ADkBlB,CAJ2B,CAK3B,GCnBuB,CAACpP,MAA1B,EAAkC8O,CAAC,EAAnC,EACE,KAAKiD,OAAL,CAAa3C,KAAK,CAACN,CAAD,CAAlB;AHGJhR,AF9BI,AGkBF,AEUD,EHEDA,CG/P2B,CA+P3B,SHAW,AF9BF,CE8BGkJ,EF9BR,KE8BO,EAAUC,SAAV,EAAqBC,MAArB,EAA6BjD,KAA7B,EAAoC;AAC7C,AF9BE,AI6CA,UFfI,AEeA,EFfN,CF9BO,EI6CIkG,CJ7CT,OI6CI,KAAkB,IAAtB,EAA4B;AFd9B,AF9BE,AI6CE,SFfCnD,IF9BE,AI6CE+J,GFfT,AF9BE,GE8Be/J,AEeb,CAAY,KAAK8J,CFfrB,cEegB,GAAuB,KAAvB,GAA+B,OAA3C;AFdJ,AF9BE,AGgBF,AEYF0F,EAAAA,MAAM,CHECvP,AGFAwP,EFZE,EHhBA,EK4BH,CL5BF,AGgBUhO,CEYC,CHEb,GAAiBxB,SAAjB,YCdA;ADeA,AF9BE,AGgBH,AEYCwP,ADgBI,GD/QsB,CAqP5B,AEUEA,KHEKvP,CGFC,CAAC9D,EL5BA,AK4BP,ADgBS+G,CChBC,CHEV,CF9BE,EE8BejD,EGFjB,CDgBI,CChBclD,EHElB,AEcoB,EChBE,EDgBlB,EChBsB,ADgBA,KAAK6D,MAAL,GAAc,EAApC;AFbJ,AF9BE,AK2B0B,ADiBzB,OAT0B,CAU3B,CFfG5D,EGH4B8N,EL3B1B,CE8BP,EF9BE,CE8Be9N,CGHW,CAAaD,GHGnB,CGHM,GHGFa,YAA1B;AACD,AF9BG,AK0B+C,GHHtB,CAS7B,CGNE,QL1BO,GAAL;AACA,AGgBJ6D,AEUE,EFVFA,SEUS+N,EL1BA,GAAL,AGgBU,CAAC9V,AEUb,KFVY,EAAQ;AHfhB,AGgBJ,AEUD,ADiBG,GCpRuB,CAqQ3B,MFZQzE,CC2BCwU,GD3BG,GAAG/P,KAAK,AC2BhB,CD3BiBzE,AC2BAgI,GAAjB,CD3BF,GC2B2BpE,MAAM,IAAI,GAAnC;AFZQ,AF9BN,ME8BF4D,QAAQ,GAAG;AACb,AF9BI,AGeJ,AC2BE,WFZK,AEYAqN,CD3BC7U,IAAR,CDeA,AEYE,CAAa,WAAU4D,MAAO,KAAIoE,GAAI,MAAtC;AFXH,AF9BK,AGeJ,AEWFwS,ADgBG,EChBHA,CHR6B,CAc7B,CEV4B,CAqB1B,KD5BK,CEWG,CAAC1P,CL1BD7G,KAAK,CGeb,AEWQ,EL1BQ,AK0BE8G,KL1BG7I,IK0Bb,EAAqB8I,CL1Bb,CAAaxH,IAAb,AK0BR,CL1B0BL,CK0BG4E,IL1BrB,CK0BR,EAAoC,ELzBpC7E,aAAa,KAAKe,KAAK,GAAG,KAAK/B,OAAL,CAAasB,IAAb,CAAmB,GAAEL,KAAM,GAA3B,CAAb,CADjB,EAC+D;AAC7DnD,AGcJ,AEWF,YLzBMA,CGcC0N,GHdG,GAAG,SAAP,EAAkB/J,AGctB,GAAyB,EHdE,EGc3B,CHd8BM,KAAK,CAAC,CAAD,CAA/B;AACAL,AKyBN,QAAI,CAACmH,GLzBCnH,MAAM,AKyBZ,EACEmE,CL1Bc,IK0BT,GL1BgB9D,AK0Bb6G,KL1BkB,CAAC,CAAD,AK0BX,CL1BD,AK0BE/C,KL1BkB,AK0BlC,EAAuBiD,ML1BT,AK0Be,GL1BgBvL,AK0BbqL,GL1BgB,CAAClL,GK0BV,CAACoL,EL1B1B,GACC,CKyBf,EACED,IL1BoB9G,KAAK,AK0BhB,CL1BiB,CAAD,CAAZ,AK0BD6G,KL1BqB,EK0Bd,CAACC,KL1BP,GAA+BtL,CKyB9C,ELzBiD,AK0BhBqL,CL1BiBpL,MK0BV,CL1BzB,EK0B4BoL,CL1BiBrL,GAAG,CAACI,EK0Bd,CAACiL,IL3B/C,GK0BJ,CAH0C,CAM5C;AHCFrB,AF5BO,AGYL,AC2BA,EFXFA,MAAM,AEWAuM,GFXG,AChBF,QC2BL,EAAiB,ID3BjB;ADiBA,AChBE,AEeFlL,ADYE,ICZFA,MDYMmL,CFXC,AGDA,EFfA/H,CEeG,GDYG,GAAG,EAAd,CD3BA,GAAkB,KAAK2B,YEeN/E,CFfC,CAAmBrG,KAAK,AEelC,CFfmCd,AEe7C,KFfoB,CAAlB;ADiBA6D,AF7BE,AGaF,AEeFuD,ADWE,ICXFA,EHCEvD,IEUkB0O,GCXX,CHCC,EAAG,AGDD,IDWkB,CFVZ1O,EEUe,EAA/B,IFXK,gBGAcuD,SAAT,CAAZ;AHEED,AGDFE,IAAAA,EHCEF,IGDI,GHCG,AGDA,EHCI,KAAKA,OAAL,CAAarB,MAAb,EAFN,MGCWuB,MAAT,CAAT;AHEED,AF7BA,AGYF,AEgBAhD,ADUE,ICVFA,EHCEgD,GGDG,EFhBA,AC0BE,CCVC,CL5BD,CGYP,CDiBW,CF7BT,CE6BW,AESAoL,KFTKpL,IEShB,IAAwB,CFTb,CAAetB,GESG+K,GFTlB,EAHN,CGEUzM,KAAT,ADUN,CCVF,CAV4C,ADoBA,CCR5C;AHAEiD,AF7BA,AGYF,AEkBA,ADQIiL,MFTFjL,EESEiL,GD1BC,CDiBG,CF7BD,CE6BM,ACjBb,CC0BW,CJtCT,GE6BgBjL,AESHiL,MFTF,CAAYxM,AESH,GAAI,GFTb,CESgB0M,CFbtB,QEagC,EAAjB,GAAqBA,SAAvC;AFRFpO,AF7BA,AGYF,AC0BImO,MFTFnO,EESEmO,GFTG,ACjBF,EDiBQ,AF7BN,CGYP,EHZE,EE6BgBnO,AESJ,IAAI,CFTL,AESMmO,CFTKzM,MAAX,GESgB,GAAG,GAAH,GAAS,EAApB,IAA0B,KAAK+K,WAAL,CAAiB2B,SAAjB,CAAxC;AFdG,AFvBL,AGYA,AEiBF,ADSG,KFfH,KGMMgE,GL7BC,AK6BE,GL7BP,AK6BU,KAAKjD,IAAjB;AHCD,AF7BG,AGYA,AEgBF,GHtB2B,CAyB7B,MGHyBK,EFhBjB,CHZC,GAAL,AK4B2B,CFhBlBrJ,EEgBqB,KAAK8I,GFhB/B,IEgBN,CFhB0B,IAAxB,EACE,OAAO,KAAK3I,MAAL,CAAa,cAAarO,IAAK,EAA/B,EAAkCyE,KAAlC,CAAP;AHZF,AGaA,AEeF,ADSEwR,MAAAA,ECTE8D,KL5BG,AGaA9L,ACwBE,GJrCP,AIqCUgI,CCTZ,EAAeuB,EFfb,ECwBiB,CDxBD,ACwBExS,GCTpB,CFfE,CEeuBgV,EDSb,CAAgB,OCT5B,kBDSY,EAA2C,MAA3C,CAAV;AJpCE,AGaF,AEeF,ADSE,QCTE,EAAElP,CDSC8I,IDxBE5T,EEeI,EFfA,CEeMma,GAAG,ADSpB,CDxBgB,AEeKrP,EDSD,CDxBb,GAAe,ACwBEnI,CCTJ,CAAlB,GFfyBmN,CCwBP,CCTc,ADSF,ECTI/E,KDSEmL,ICTO,GAAGiE,EFf1B,CAAwB1V,AEeK,ADSF,CCTGsG,IFf9B,CAAf,GAAgD,CEeJ,CAAjB,ADSH,CCT7B,EFf0DqE,ACyB5B,ECT9B,EAAEpE,CDSgCiL,KCT1B,EDSkC,CCT3BkE,GFhBsC,AEgBnC,CFhByD1V,AEgBxDuG,KFhBkC,CAAvD,AEgBoB,CAAlB,CADA,IACgC,EAAE+O,SAAS,EDQzB,CCR4BxC,ADQhD,MCRsD,CAACxP,KAAD,CAApB,CADhC,IAEA,EAAEyP,QAAQ,GAAKuC,SAAS,CAACvC,QAAV,CAAmB1M,OAAnB,CAAf,CAFA,IAGA,EAAEkP,UAAU,GAAGxC,QAAQ,CAACzM,SAAD,CAAvB,CAHA,IAIA,EAAEC,MAAM,IAAIgP,UAAZ,CAJJ,EAKE,OAAO,KAAP,CArB0C,CAuB5C;AHLFzQ,AF7BM,AIsCH,EFTHA,GEtB4B,CAgC1B,EFVI,CAACC,KAAD,AF7BIvF,EE6BI,GF7BC,GAAG,KAAK5B,cAAL,CAAoBmB,IAApB,CAAyBL,KAAzB,CAAZ,EACEnD,IAAI,GAAGiE,KAAK,CAAC,CAAD,CAAL,CAASO,WAAT,EAAP,CADF,KAGEL,YAAY,GAAG,IAAf;AE2BN,AF1BI,AGSJ,AEsBA,SAAKkU,EHLE,ACjBF,CDiBG,CAAC7O,CCjBT,IDiBO,IAAW,GGKlB,CAAsBuQ,CHLCjP,OAAL,CAAavB,AGKA,CAACiO,KHLd,CAAoBhO,EGKtC,EAA4CsB,CHLD,CAACA,KGK5C,EHLkB,AGKqCC,CHLhD,IACW,IGIlB,CHJuBA,CGI2CC,MAAlE,EHJkB,CAAezB,MAAf,CAAsBC,KAAK,CAACuB,SAA5B,CADX,IAEW,KAAKC,MAAL,CAAYzB,MAAZ,CAAmBC,KAAK,CAACwB,MAAzB,CAFX,IAGW,KAAKjD,KAAL,CAAWwB,MAAX,CAAkBC,KAAK,CAACzB,KAAxB,CAHlB;AAID,ACpBG;AHRA,AGSA,AEqBF,ADIA,SCJKsQ,ADIAxD,IJlCE,EGSE,ACyBT,CJlCE,AIkCUmB,IDzBE9H,KEqBd,CAAsB6L,CDIC,GDzBd,ACyBiB,IAAH,CDzBM,AEqBE,CAACC,CDIC,EDzBxB,ACyBT,EAAqC5F,CDzBD,GCyBpC,CCJA,CFrByC5H,CEqBGzB,SAA5C,EAAuDC,EFrB9C,GACA,CEoBT,EAAkEF,EFpBpDuD,KEoBd,CFpBS,CAAY,8BAAZ,EAA4C5J,KAA5C,CADP;ADZyB,AFIzB,AIkCH,GA/Q2B,CAiR5B,SJpCS,GAAL;AACE,AGSJ,AEoBA,SAAK4T,EFpBA,OAAL,OEoBA,CAAsB0B,SAAS,CAACE,OAAhC,EAA4CjP,MAA5C,EAAuDF,OAAvD,EAAkEC,SAAlE;AL5BI,AGSF,YAAI,CAAC,CHTC9G,IGSIxB,CHTC,GAAG,GGSd,EHTmBN,AGUjB,OAAO,CHVK,CAAcqB,GGUd6K,CHVA,CAAmBlL,IGUxB,CHVK,AGUO,CHVnB,EACEnD,IAAI,GAAG,SAAP,EAAkB2D,KAAK,GAAGM,KAAK,CAAC,CAAD,AGS1B,CHTL,CGSuDQ,CHTnBb,IGS/B,CAAP,CHT4C,GAAGnE,GAAG,CAACE,OAAjD,CADF,KAGEwE,YAAY,GAAG,IAAf;AACF,AKyBJ,ADMFiS,EAAAA,KAAK,CCNC,ADMArL,KCNKgM,IDMN,CCNC,CDMW/L,ICNI,EDMhB,ECNH,ADMuB,ECNE,KAAK+L,KAAL,GA3BmB,CA6B5C;AHFJ,AClBI,ACyBA,QAAIV,QAAQ,GAAGtL,SAAf;AFNG,AFxBD,AGMA,AEoBF,ADIA,QAA0BuL,CFNdzL,AGEPC,GFpBC,CHNC,AGMA,ACwBP,GJ9BE,AK0BF,EFpBYoD,EEoBI6L,CHFb,CAAsBzQ,EAAtB,EAA0B,EClBtB,CEoBkB,CAACkO,CFpBD,KAAK5I,EEoB9B,EAAoC,OFpBX,AEoBkB,CFpBDnK,GEoBN,EFpBX,CAAnB,MAAgDgC,SAApD,EACE;ADkBN,AFxBM,AGjBJ,AC8CA,KDhDoB,CA2BpB,ECqBiC3C,CFL5BwF,EAAE,CAACtE,EEKR,CADuB,CAEvB,GFNK,CAAW6D,cAAX,EAA2B,CAACqC,CAAD,EAAIC,MAAJ,KAAgB,IAAGA,MAAM,CAACnG,OAAP,CAAe,IAAf,EAAqB,IAArB,CAA2B,EAAzE,CAAP;AACD,AFxBO,AKyBJ,EHCJ,SGDWuS,GLzBCtT,GKyBK,CAAC8D,CLzBD,GAAG,CKyBH,CAAb,GLzBqBzF,gBAAL,CAAsBkB,IAAtB,CAA2BL,KAA3B,CAAZ,EACEnD,IAAI,GAAG,cAAP,EAAuB2D,KAAK,GAAG,GAA/B,CADF,KAGEQ,YAAY,GAAG,IAAf;AACF,AKsBJ,ADIA,QAAI4G,GCJG,IAAP,EDIa,KAAKtE,SAAlB,EACE4P,QAAQ,GAAG,EAAX,CADF,CAEA;ADxBA,AEmBD,ADGC,GC1SyB,CAyS3B,KDIO,EDzBE,ECyBEtL,GDzBGgF,MCyBM,CAACvI,IDzBnB,ICyBK,EACH6O,QAAQ,GAAG,CAAC;AFPX,AFrBD,AGGH,ACyBiBtL,GD5SU,CAqR5B,ICuBkBA,CFPJJ,IFrBL,GAAL,CI4BuB,EAAEI,IFPxB,CAAwBzB,EAAxB,EAA4B,AEOjB;AFNhB,AFrBM,AI2BkC0B,QAAAA,CFNjC1B,EAAE,CAACtE,EEMoC,EAAEgG,GFNzC,CAAWnC,cAAX,EAA2B,CAACqC,CAAD,EAAIC,MAAJ,KAAgB,IAAGA,MAAM,CAACnG,OAAP,CAAe,KAAf,EAAsB,GAAtB,CAA2B,EAAzE,CAAP;AACD,AFrBO,AKsBNyV,ADIgB,EFHlB,AGDEA,KDIe,CAAX,CADG,CAEL,GCLS,CLtBD,AKsBEvH,KLtBGzQ,AKsBJ,EAAQ,KLtBT,IAAgBU,KAAK,CAACW,MAAN,GAAe,CAAnC,EAAsC;AACpC9D,AGGR+P,AEmBE,ADEK,EDrBPA,OEmBO,EDKA,CJ3BC/P,CGGG,AEmBA4S,CFnBCnO,AEmBA,CDKD,CJ3BC,CKsBG,ADKF,CCLX,CLtBa,AGGJ,CEmBOmO,CFnBC,AEmBA,GAAGM,KAAK,ADKFnI,CCLGjH,GLtBpB,GKsBN,EAAkC8O,ADKzB,CCL0B,ADK9B,ECLL,ADMEyD,ECLA,KAAKmE,CDKG,GAAG,CAACzP,KCLZ,CAAgBmI,GDKL,CAAX,CCLqB,CAACN,CAAD,CAArB;ALtBI,AGGN,AEoBD,GA7S0B,CA+S3B,QFtBUnO,IHHEtB,CGGG,CAACnD,GHHC,CAAC,AGGhB,CHHe,CAAL,KAAa,GAAjB,EACEkE,WAAW,GAAG,CAAd,EAAiBP,KAAK,GAAG,GAAzB,CADF,KAGEO,WAAW,GAAG,CAAd,EAAiBP,KAAK,GAAG,GAAzB;AEmBZ,AFlBS,AGAL,ACyBA,SFPK+E,EClBA,CCyBG5E,MFPZ,AEOkB,CFPCkE,CClBf,CCyBiBqO,CFPrB,EAAwB,KEOK,CAACvS,MAA1B;AFNF,AClBI,ACyBF,SFPK,IAAI4F,SAAJ,CAAc1B,GAAd,CAAP;AACD,AFnBO,AGCF,AEoBJ0S,ADKE,EFLJ,AGAEA,MAAM,CAACH,EDKA,CDzBC9V,ACyBN,GCLI,EFpBO,AEoBE,CFpBDb,MAAN,CAAaE,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,AEoBJyW,ADKE,ICLFA,MAAM,CAACrT,EAAP,CAAU,CFpBDuI,ACyBA,IAAIgE,CCLb,EAAkB3L,IAAI,EFpBlB,EEoBsB,CFpBDrD,ECyBhB,CAAmB,EDzBE,CAACd,CCyBtB,CAAP,GDzBE;AHAF,AGCE,AEmBwB,ADM5B,WCNiC6W,ELpB1B,GAAL,CGCS,IEmBiB,CFnBZxK,AEmB4BlI,IAAhB,eFnBxB;ADmBR,AFnBQ,AGCD,AEkBiD,KAApD,IHAKkB,ACrBH,CAIA,IHFM,CAAC,GEmBb,CAAmBqB,CFnBD5H,GEmBlB,EAAyB,EFnBjB,EACE;AEmBR,ACtBI,AEsBF,ADMA,SFNK,EGAE8X,ADMF,CAAL,CFNSnQ,AChBL,IEgBJ,CFhBS+D,IDgBJ,CAAc9D,EChBf,EDgBmB,CChBJ,GDgBS,EChBJsF,IDgBS/G,IChBd,CAAcnE,KAAK,CAACd,KAApB,CDgB+B,CChBJ,CDgBO,EAAhD,CAAP,CChBqDoL,UAAL,CAAgBtK,KAAK,CAACb,MAAtB,CAA3B,CAAf;ADiBP,AFnBK,AKmBH,ADMG0S,EFJN,CGrT6B,CAqT3B,IDIIA,KJzBK,AIyBA,GJzBL,AIyBQD,QAAQ,CAAC,CAAD,CAAhB;AJxBA,AGEA,AEmBJ,ADII,YAAI,CJzBC,CIyBCC,EJzBN,GIyBW,CAACtL,MAAN,YAAwByI,cAA1B,CAAJ,EACE,OAAO,IAAIA,cAAJ,CAAoB,KAAI,KAAKuB,gBAAL,CAAsBsB,KAAK,CAACvL,SAA5B,CAAuC,IAC5C,KAAKgK,aAAL,CAAmBuB,KAAK,CAACtL,MAAzB,CAAiC,IADpD,CAAP;AJzBF,AI2BF,aJ3BO,GAAL;AEoBN,AFnBM,AGCF,SDkBK9B,EClBA,EHDE,CGCP,EDkBJ,AFnBM,CEmBWvF,KAAjB,EAAwByH,kBAAxB,EAA4C;AAC1C,AFnBI,AGCA,AEkBJuP,ADOE,ECPFA,WLnBS,EKmBI,CLnBT,AKmBU7P,OAAD,EAAUC,SAAV,EAAqBC,MAArB,EAA6BjD,KAA7B,EAAoC;AHCjD,AFnBI,AGCA,AEkBF,ADOE,MFPA,KGAK,CDODwO,CFPGnL,AFnBF,AGCAmC,GHDL,AKmBUmN,IDOE,ECPP,CAAY,ADOF,EDzBf,CAAkB,ACyBlB,CADF,CCNwBzW,ADQtB,GFRA,EClBA,AEkBiB,CAAW6G,CFlBD,CDkBG,IClBEa,CEkBf,EAAoBZ,CHAzC,EACE,ACnBE,EAAwC,IEkBvB,CHCZ,ACnBwCkD,CEkBGjD,GHCvCrB,GGDQ,CFlBjB,CEkBwD5B,CFlBD,CDmBlD,CAAa,EGDD,CFlB2CmG,AEkBvD,CHCgBvK,AGDvB,KHC6B,ICnB3B,CDmB+ByH,CClBb,KAAK6C,QAAL,GAAgB,CDkBe,CAAClE,GClBXiF,QDkBR,EAAiC,AClB9B,EDkB7B,ACnBL,CDmBF,CAHwC,CAK1C;AFrBI,AKmBH,GAzT0B,CA2T3B,SLrBS,GAAL;AEsBJ,AFrBI,AGCA,ACyBA,MFLAhF,OFrBK,AI0BA,CFLG,CCpBD,CHDP,CEqBWoB,AEKFwH,CAAC,EDzBE3D,CCyBC,CAAb,EAAgB2D,CAAC,GAAG9O,MAApB,CFL6B,CEKD8O,CAAC,CFLGxH,ACpBhC,CCyBA,EAAiC,eFLiB,CAACzH,KAAtB,GAA8B,EAA/D;AFpBM,AI0BA2S,UAAAA,IJ1BI,CAAC,AI0BA,GAAGD,EJ1BE9T,MI0BM,CAACqQ,CAAD,CJ1BhB,AI0BA,CAD+B,CJzBV,AI2BrB;AFNN,AFpBQ1O,AGAN,AEmBF0W,EAAAA,IHCI5Q,KCpBG,CHAC9F,CKmBG,CHCC,ACpBV,AEmBU6D,KHCK,AGDN,EHCX,AGDmB,EHCE,AFpBF,GAAG,CAAd;AEqBN,AFpBM/H,AGAJ,AEmBF,ADOI,WCPG,CLnBDA,EI0BEsW,EJ1BE,AKmBEqE,GLnBC3W,AI0BA,CAAC+G,QJ1BR,CKmBC,ADOC,CCPkB,ADOFxB,ICPjB,EAAyB,ADOxB,CAAuBwB,GCPxB,EAA+B,IAA/B,ADOC,CAAJ,CCPwChD,CDQtCwO,ICRC,CAAP,GDQc,IAAK,KAAI,KAAKxB,aAAL,CAAmBuB,KAAK,CAACtL,MAAzB,CAAiC,EAAlD,CADF,CAEA;AFPJ,AFpBK,AGAH,AEmBH,ADMK,GCpUqB,CAgU3B,IHDM,KCpBGuC,EDoBI5J,AEQF,KFRL,KAAiB,ACpBnB,CAAkB,MAAlB,EDoBF,ACpB4B,EDqB1BqG,GCrB+B2B,KDqBvB,CCrBR,EDqBWlM,ACrB4B,GDqBz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vBM;AEwBP,AFxBwB3I,AGRrB,AEyBE,ADOJqU,EFEF,AEFEA,GAAG,CAACD,ICPI0G,ADOL,EJxBoB9a,AIwBb,IJxBiB,CKiBZ,ELjBe,CKiBZuX,KLjBK,CKiBC,CAAC2D,OAAD,CAApB,EAA+B;ALjBM,AGPrC,AEyBE,ADOJ;AD/BE,AEyBE,ADOJ,QAAI,IDhCE,AEyBEH,CFzBD,ACgCE9M,KDhCGE,GEyBR,ADOA,ECPe,EFzBZ,CCgCe,EDhCA,ECgCtB,EAA4B,CDhCDS,WAAL,CAAiBnK,KAAjB,CAAhB,MAA6CgC,SAAjD,EACE,OAHJ,CAIE;AD+BN,AF1BQ,AKmBE,ADOJ,SFAGqB,EEAE+M,EFAX,CAAc/J,AGPAmQ,CLnBD,EI0BP,CAAY,EJ1BV,CE0BR,CGPU,CHOalQ,AEAA6J,CCNX,QHMZ,EAAkC5J,IEAhB,EFAlB,CEAyC,CFACjD,IEAxB,CFAlB,EAAiD,AEAA,OAA3C;AFCJ,AF3BuB/H,AGJnB,AEyBM,SHMH,GF3BgBA,AGJf,CD+BGiL,GF3BgB,CE2BpB,AC/BMxI,AEyBE6V,CHMCxN,CF3Bc,KGJ1B,CD+BG,CC9BD,CD8BmBC,CF3BF,CKqBb,CAAkB+P,GFxBf,GD8BN,CGN4B,CHMC9P,AC9BlB4E,AEwBkBqK,MHM7B,CGNG,CHMkClS,CGNCkT,IHMtC,CAAP,AC9Ba,CAAoB,EEwBvB,EAA6CF,CFxBjB9K,QEwB5B,EAAwD+K,UFxBjC,CEwBvB,CFxBG,CAAP,AEyBsB,QADlB,EAC4B,SAD5B,EACuC,WADvC,EACoDE,OADpD,EAC6D,IAD7D,EACmEhI,KADnE,EAFF,KAKE;AHIX,AF5B0C,AG3CvC,AEoEQ,ADEN,WAAKjF,MCFMqK,EDEX,GAAgB,IAAhB,GCFM,CAAkBwC,OAAO,CAACtD,QAA1B,EAAoCuD,SAApC,EAA+CC,WAA/C,EAA4D,IAA5D,EACkB,SADlB,EAC6B,WAD7B,EAC0C,QAD1C,EACoDE,OADpD,EAC6D,IAD7D,EACmEhI,KADnE;AAEH,ADCJ,KALO,CAMR,GCXI,MAUK,IAAI8H,WAAJ,EACH;AL5BF,AGFJ,AE+BM,WF/BC,IE+BI1C,CF/BCrI,WE+BN,CAAkB6K,OAAO,CF/BxB,AE+ByBd,EF/BhC,QE+BM,EAAsCgB,WAAtC,EAAmDC,QAAnD,EAA6D,IAA7D,EACkB,WADlB,EAC+B,QAD/B,EACyC,SADzC,EACoDC,OADpD,EAC6D,IAD7D,EACmEhI,KADnE,EAFG,KAIA,IAAI+H,QAAJ,EACH;ALhCejb,AGDtB,AEkCO,GFpWoB,CAoU5B,QHDuBA,GKiCVsY,CLjCc,GAAG,EAAP,MKiCf,CAAkBwC,OAAO,CAACb,OAA1B,EAAmCgB,QAAnC,EAA6C,IAA7C,EAAmD,IAAnD,EACkB,QADlB,EAC4B,SAD5B,EACuC,WADvC,EACoDC,OADpD,EAC6D,IAD7D,EACmEhI,KADnE,EAFG,KAKH;ALvCF,AKwCE,ADRN,SAAK2B,MCQMyD,ADRX,GAAc,KAAK1C,ICQb,CAAkBkF,OAAO,CAACtD,ADRhC,CAPQ,CASR,MCMM,EAAoC,IAApC,EAA0C,IAA1C,EAAgD,IAAhD,EACkB,SADlB,EAC6B,WAD7B,EAC0C,QAD1C,EACoD0D,OADpD,EAC6D,IAD7D,EACmEhI,KADnE;ALnCH,AKqCA,OLjSU,CA8PX;AGFJ3G,AEsCG,ADRD,ED9BFA,MC8BMmK,UAAU,GAAGtC,IAAI,GD9BG,CAAC3P,CC8BC,CAACmC,GD9BH,EAAQ,AC8BN,EAAQ+L,MAAR,KAAmB;AD7B7C,AC6B+C+D,MAAAA,KD7BxCjS,KAAK,AC6B6C,CD7B5CzE,EC6B+C,ED7BrD,EC6BwC,EAAmBoU,CD7B5C,GAAf,AC6B+D,CAACxN,ED7B3C,GC6B0C,ED7BrCsJ,AC6B6CyC,MAAR,CAAvB,GD7BnB,CAAgBlO,KAAhB,CAArB,GAA8C,KAAK+H,cAAL,CAAoB/H,KAApB,CAArD;AHEE,AGDH,AEqCC,ADTwF,GDnW9D,CAyU5B,CC0BuB,CAArB,IJ3BM,CAACzE,AKoCAkT,ILpCL,CKoCF,CLpCa;AACT,AKoCL,GA/W0B,CAiX3B;ALrCM,AKsCN,ADZE,QAAI,KAAKoB,UAAT,EAAqB;AJzBjB,AGDNpE,AC2BI,ED3BJA,QC2BQ,ED3BE,CAACzL,KAAD,EAAQ;AHEZ,AGDJ,AC0BQ,QD1BJA,IHCIvB,CGDC,CAAClD,CC0BK,GD1BX,EC0BgBiU,GD1BD,EHCE,CGDrB,EACE,CHAwB,CAAC,GIyBZ,CAAmBI,CDzBzB,ECyBM,CAAuBqC,EDzBxBrI,EHAyBtK,IAAZ,AGAlB,CHAmCZ,AGAtB,CCyBP,CAAP,GJzBmB,CAAD,IAA4B,QAAQY,IAAR,CAAaZ,GGApBsB,EHAO,CAAlD,EACE,AGD8C,CAACzE,IAAK,EHC7CsE,AGDJ,EAAoDG,KAApD,CAAP,CAFc,CAGhB,OHA8B,CAAC,IAAD,CAAxB,CADF,KAGE,OAAO,KAAKrB,MAAL,GAAcD,KAArB;AACH,AKiCLc,ADZsD,ECYtDA,KLxSe,AKwSV,ADZD,CJnBA,AK+BE6G,ADXF,OCWC,ADXMlE,ECWImE,GDXX,EAAc,ICWb,EAAqBC,MAArB,EAA6BjD,KAA7B,EAAoC;AFnCvC,AEoCA,ADZkB,SDxBb4D,CEoCC4O,KFpCN,CEoCY,EFpCE,CEoCC,IFpCItM,AEoCAkN,QFpCnB,EAA6B,KAAKlN,QAAL,CEoCd,CAAa,CFpCiB,IAA7C;AACA,AEmC8BmN,ADZgB,MCYhBA,KFnCvB,KAAK1M,AEmC4B,EAAE,UFnC1C;AHIE,AGHH,AEkC6B,ADX3B,GDvWyB,CAkV5B,CEgCiB,CAAf,CADuC,CAGvC,ILjCQjK,KAAK,GAAG;AAAEhB,QAAAA,IAAI,EAAEA,IAAR;AAAczD,AKkC9Bua,ADbA7D,ICaA6D,ADbA7D,IJrB8B1W,EKkCxB,CAACqb,CLlC2B,EAAErb,AIqB1B,ECaV,ELlCgB,AIqBF0W,CCaC,MAAM,GDbG,EAAxB;AJrB0C/S,AGA5CsL,AEmCI,ADbH,EDtBDA,MHA4CtL,GKmCnC,ELnCwC,EAAEA,EKmCpCmE,GLnCG,AGAA,CAACrD,AEmCf,IAAmB,CFnCL,EAAQ,EEmCEoW,QAAL,CAAc/P,OAAd,EAAuBC,SAAvB,EAAkCC,MAAlC,EAA0CjD,KAA1C,CAAnB,EACEwS,MAAM,CAACxT,IAAP,CAAYe,IAAZ;ALpCoDlE,AGCxD,QHDwDA,AGCpDa,KAAK,CHDqD,AGCpDzE,EHDsD4D,EGC5D,KAAe,GAAnB,EAAwB;AHDR,AGEd,AEmCA2W,ADrWwB,EAyV9B,ICYMA,CLrCA,IGEKtM,CEmCC,CAAClH,IAAP,CAAY,CFnCZ,GAAgB,AEmChB,IFnCA;AHDA9D,AGEA,AEmCD,KAJD,CLjCEA,OGEO,CHFC,CAAC,GGEG6M,CHFJ,EAAOrL,KAAP,CAAR,SGEO,CAAwBA,KAAxB,CAAP;AHDA,AGED,KAHD,MHCOC,AGGF,aHHH,GAAqBD,KAArB;AACA,AGGA,AEkCF,WLrCOL,AGGA8J,AEkCAqM,MAAP,IFlCE,GAAkB,EHHlB,EGGA,CHHuBva,IAAvB,CA7QW,CA8QX;AGGA,AEkCH,GA9X0B,CAgY3B,SFpCW,KAAKwM,cAAL,CAAoB/H,KAApB,CAAP;AHFAtB,AGGD,AEoCH,ADlBF,MJrBMA,GIqBGsS,EJrBE,GAAGtS,KAAK,CAACU,MAAN,AIqBd,CJrB2BK,AIqBAyS,SAA3B,EJrBsC,AIqBA,IJrBI1S,KAAK,CAAC,CAAD,CAAL,CAASH,MAArC,EAA6CX,KAAK,CAACW,MAAnD,CAAR;AACD,AGGF,ACkBD,GD9W4B,CA8V5B,CHzRwC,CAsRtC;AIoBF,MAAI6O,MAAM,GAAGa,iBAAiB,CAACmD,SAAD,CAA9B;ACiBA2E,EAAAA,UAAU,CAACxQ,OAAD,EAAUC,SAAV,EAAqBC,MAArB,EAA6BjD,KAA7B,EAAoC;ALpC5C,AGGF+H,AEkCE,ADjBF,EDjBAA,ICiBI6C,MAAM,CJpBCrO,IIoBImC,GDjBG,CAAChC,KAAD,ACiBlB,EDjB0B,ACiBA,EJpBxB,CAA2BE,IAA3B,EAAiC;AAAE1B,AGInC,AEkCA6H,ADjBA,ICiBAA,ELtCmC7H,EGI/BwB,GEkCG,EFlCE,CHJkC,AGIjCzE,AEkCA8K,CLtCkCnG,GGIxC,CHJ4C,CAACC,CKsChC,EFlCE,EEkCE,CFlCrB,EACE,IHL0C,CAAkB,EGKrD,KHL4DpB,AGKvD2M,IHLgD,CAAYhN,KAAZ,EAAmB,CAAnB,CAAlB,AKsCd2H,CLtCa,CAAR,KKsCd,CAArB,GFjCS,CAA+BrG,KAA/B,CAAP,CAFsB,CAIxB;AHPwF,AKuCxFsG,ADjBA,ICiBAA,IDjBI4L,KCiBK,GAAG5L,CDjBC,CAACjH,MAAV,CCiBiB,IAAI,ADjBA,CAAzB,EAA4B,0BCiBMiH,SAAT,CAAzB;ALtCD,AGOC,AEgCAC,ADjBE2H,GJ5VuB,CAwU3B,AKqCE3H,EDjBE2H,EDfE,EEgCE,EDjBE,CDfC1E,AEgCAjD,EDjBE2L,ICiBI,EFhCX,EEgCe,CDjBC,CAACC,CDfC,IAAtB,EACE,GCcS,CAAqB,CDdzBxG,ACcI,EAAwByG,GDdjC,CAAW,ICcF,CDdO5I,ACc0B,EAAjC,CAAT,CCiB0BjD,IF/B1B,EAA0B,AE+BT,CAAnB,IF/BiCkD,UAA/B,EAA2C,KAAKC,OAAhD,EAAyD,KAAKxC,MAA9D,EANsB,CAQxB;AE8BA5D,ADjBE4K,ICiBF5K,EDjBE4K,GCiBG,GAAG5K,ADjBA,GAAG,ECiBE,IAAI,IDjBIlE,MAAV,CAAiB,CAAjB,EAAoB,IAAI8O,MAAM,CAAC7O,ICiBhBiE,EDjBf,GCiBM,CAAjB,ADjBoD4K,MAAlD;ADZF,ACaC,KAHD,CAIA,IDdMtC,KAAK,GAAG,KAAKnC,UAAL,KAAoB,IAAlC;AHRF7J,AKuCE,ADrBA,EJlBFA,OIuBO,CCgBCkT,CLvCC,CAAC1S,IAAD,AKuCK,ELvCE,CKuCC,KAAK8U,UAAL,CAAgB5R,KAAhB,CAAf;ALtCA,AGQA,AE8BA,ADfE4K,QJvBE7N,AIuBF6N,CDfG5E,CE8BkCoM,GAAG,CDflC,CJvBG,CKsCkC,CDflC,CJvBG,AIuBF,CAACxD,ECeqCO,ELtClD,CGQA,CE8BA,EFxCwB,CAWxB,ACcsB,CAACN,UAAV,CAAqB,CAArB,IAA0B,MAA3B,IAAqC,KAArC,GACCD,SAAS,CAACC,UAAV,CAAqB,CAArB,CADD,GAC2B,MAD5B,EACoCC,QADpC,CAC6C,EAD7C,CAAT;AJtBF,AIwBElE,QAAAA,EJxBI5N,IIwBE,GAAG,CJxBG,GAAGF,IAAI,CAACG,KIwBGnB,EJxBR,CAAahD,GIwBnB,CAAqB,CAArB,EAAwB,KAAK8R,EJxBvB,EAA6B,CAAC1N,CIwBD,CAACnB,MJxBD,AIwBnC,EJxB8CoB,EIwBAyN,MJxBX,AIwB5C,EJxBiExN,QAArB,EAA+BC,WAA/B,KAA+C;AAC3F,AKqCF,ADbC,QCaGsU,KAAK,GAAG,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","file":"src.b20bf42d.js","sourceRoot":"..","sourcesContent":["const RDF  = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n    XSD  = 'http://www.w3.org/2001/XMLSchema#',\n    SWAP = 'http://www.w3.org/2000/10/swap/';\n\nexport default {\n  xsd: {\n    decimal: `${XSD}decimal`,\n    boolean: `${XSD}boolean`,\n    double:  `${XSD}double`,\n    integer: `${XSD}integer`,\n    string:  `${XSD}string`,\n  },\n  rdf: {\n    type:       `${RDF}type`,\n    nil:        `${RDF}nil`,\n    first:      `${RDF}first`,\n    rest:       `${RDF}rest`,\n    langString: `${RDF}langString`,\n  },\n  owl: {\n    sameAs: 'http://www.w3.org/2002/07/owl#sameAs',\n  },\n  r: {\n    forSome: `${SWAP}reify#forSome`,\n    forAll:  `${SWAP}reify#forAll`,\n  },\n  log: {\n    implies: `${SWAP}log#implies`,\n  },\n};\n","/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nlet promise\n\nmodule.exports = typeof queueMicrotask === 'function'\n  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : global)\n  // reuse resolved promise, and allocate it lazily\n  : cb => (promise || (promise = Promise.resolve()))\n    .then(cb)\n    .catch(err => setTimeout(() => { throw err }, 0))\n","// **N3Lexer** tokenizes N3 documents.\nimport namespaces from './IRIs';\nimport queueMicrotask from 'queue-microtask';\n\nconst { xsd } = namespaces;\n\n// Regular expression and replacement string to escape N3 strings\nconst escapeSequence = /\\\\u([a-fA-F0-9]{4})|\\\\U([a-fA-F0-9]{8})|\\\\([^])/g;\nconst escapeReplacements = {\n  '\\\\': '\\\\', \"'\": \"'\", '\"': '\"',\n  'n': '\\n', 'r': '\\r', 't': '\\t', 'f': '\\f', 'b': '\\b',\n  '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',\n  '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',\n  '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',\n};\nconst illegalIriChars = /[\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]/;\n\nconst lineModeRegExps = {\n  _iri: true,\n  _unescapedIri: true,\n  _simpleQuotedString: true,\n  _langcode: true,\n  _blank: true,\n  _newline: true,\n  _comment: true,\n  _whitespace: true,\n  _endOfFile: true,\n};\nconst invalidRegExp = /$0^/;\n\n// ## Constructor\nexport default class N3Lexer {\n  constructor(options) {\n    // ## Regular expressions\n    // It's slightly faster to have these as properties than as in-scope variables\n    this._iri = /^<((?:[^ <>{}\\\\]|\\\\[uU])+)>[ \\t]*/; // IRI with escape sequences; needs sanity check after unescaping\n    this._unescapedIri = /^<([^\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]*)>[ \\t]*/; // IRI without escape sequences; no unescaping\n    this._simpleQuotedString = /^\"([^\"\\\\\\r\\n]*)\"(?=[^\"])/; // string without escape sequences\n    this._simpleApostropheString = /^'([^'\\\\\\r\\n]*)'(?=[^'])/;\n    this._langcode = /^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\\-])/i;\n    this._prefix = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:(?=[#\\s<])/;\n    this._prefixed = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:((?:(?:[0-:A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])(?:(?:[\\.\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])*(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~]))?)?)(?:[ \\t]+|(?=\\.?[,;!\\^\\s#()\\[\\]\\{\\}\"'<>]))/;\n    this._variable = /^\\?(?:(?:[A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?=[.,;!\\^\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._blank = /^_:((?:[0-9A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?:[ \\t]+|(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<>]))/;\n    this._number = /^[\\-+]?(?:(\\d+\\.\\d*|\\.?\\d+)[eE][\\-+]?|\\d*(\\.)?)\\d+(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._boolean = /^(?:true|false)(?=[.,;\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._keyword = /^@[a-z]+(?=[\\s#<:])/i;\n    this._sparqlKeyword = /^(?:PREFIX|BASE|GRAPH)(?=[\\s#<])/i;\n    this._shortPredicates = /^a(?=[\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._newline = /^[ \\t]*(?:#[^\\n\\r]*)?(?:\\r\\n|\\n|\\r)[ \\t]*/;\n    this._comment = /#([^\\n\\r]*)/;\n    this._whitespace = /^[ \\t]+/;\n    this._endOfFile = /^(?:#[^\\n\\r]*)?$/;\n    options = options || {};\n\n    // In line mode (N-Triples or N-Quads), only simple features may be parsed\n    if (this._lineMode = !!options.lineMode) {\n      this._n3Mode = false;\n      // Don't tokenize special literals\n      for (const key in this) {\n        if (!(key in lineModeRegExps) && this[key] instanceof RegExp)\n          this[key] = invalidRegExp;\n      }\n    }\n    // When not in line mode, enable N3 functionality by default\n    else {\n      this._n3Mode = options.n3 !== false;\n    }\n    // Don't output comment tokens by default\n    this._comments = !!options.comments;\n    // Cache the last tested closing position of long literals\n    this._literalClosingPos = 0;\n  }\n\n  // ## Private methods\n\n  // ### `_tokenizeToEnd` tokenizes as for as possible, emitting tokens through the callback\n  _tokenizeToEnd(callback, inputFinished) {\n    // Continue parsing as far as possible; the loop will return eventually\n    let input = this._input;\n    const outputComments = this._comments;\n    while (true) {\n      // Count and skip whitespace lines\n      let whiteSpaceMatch, comment;\n      while (whiteSpaceMatch = this._newline.exec(input)) {\n        // Try to find a comment\n        if (outputComments && (comment = this._comment.exec(whiteSpaceMatch[0])))\n          callback(null, { line: this._line, type: 'comment', value: comment[1], prefix: '' });\n        // Advance the input\n        input = input.substr(whiteSpaceMatch[0].length, input.length);\n        this._line++;\n      }\n      // Skip whitespace on current line\n      if (!whiteSpaceMatch && (whiteSpaceMatch = this._whitespace.exec(input)))\n        input = input.substr(whiteSpaceMatch[0].length, input.length);\n\n      // Stop for now if we're at the end\n      if (this._endOfFile.test(input)) {\n        // If the input is finished, emit EOF\n        if (inputFinished) {\n          // Try to find a final comment\n          if (outputComments && (comment = this._comment.exec(input)))\n            callback(null, { line: this._line, type: 'comment', value: comment[1], prefix: '' });\n          callback(input = null, { line: this._line, type: 'eof', value: '', prefix: '' });\n        }\n        return this._input = input;\n      }\n\n      // Look for specific token types based on the first character\n      const line = this._line, firstChar = input[0];\n      let type = '', value = '', prefix = '',\n          match = null, matchLength = 0, inconclusive = false;\n      switch (firstChar) {\n      case '^':\n        // We need at least 3 tokens lookahead to distinguish ^^<IRI> and ^^pre:fixed\n        if (input.length < 3)\n          break;\n        // Try to match a type\n        else if (input[1] === '^') {\n          this._previousMarker = '^^';\n          // Move to type IRI or prefixed name\n          input = input.substr(2);\n          if (input[0] !== '<') {\n            inconclusive = true;\n            break;\n          }\n        }\n        // If no type, it must be a path expression\n        else {\n          if (this._n3Mode) {\n            matchLength = 1;\n            type = '^';\n          }\n          break;\n        }\n        // Fall through in case the type is an IRI\n      case '<':\n        // Try to find a full IRI without escape sequences\n        if (match = this._unescapedIri.exec(input))\n          type = 'IRI', value = match[1];\n        // Try to find a full IRI with escape sequences\n        else if (match = this._iri.exec(input)) {\n          value = this._unescape(match[1]);\n          if (value === null || illegalIriChars.test(value))\n            return reportSyntaxError(this);\n          type = 'IRI';\n        }\n        // Try to find a nested triple\n        else if (input.length > 1 && input[1] === '<')\n          type = '<<', matchLength = 2;\n        // Try to find a backwards implication arrow\n        else if (this._n3Mode && input.length > 1 && input[1] === '=')\n          type = 'inverse', matchLength = 2, value = '>';\n        break;\n\n      case '>':\n        if (input.length > 1 && input[1] === '>')\n          type = '>>', matchLength = 2;\n        break;\n\n      case '_':\n        // Try to find a blank node. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a blank node.\n        // Therefore, try inserting a space if we're at the end of the input.\n        if ((match = this._blank.exec(input)) ||\n            inputFinished && (match = this._blank.exec(`${input} `)))\n          type = 'blank', prefix = '_', value = match[1];\n        break;\n\n      case '\"':\n        // Try to find a literal without escape sequences\n        if (match = this._simpleQuotedString.exec(input))\n          value = match[1];\n        // Try to find a literal wrapped in three pairs of quotes\n        else {\n          ({ value, matchLength } = this._parseLiteral(input));\n          if (value === null)\n            return reportSyntaxError(this);\n        }\n        if (match !== null || matchLength !== 0) {\n          type = 'literal';\n          this._literalClosingPos = 0;\n        }\n        break;\n\n      case \"'\":\n        if (!this._lineMode) {\n          // Try to find a literal without escape sequences\n          if (match = this._simpleApostropheString.exec(input))\n            value = match[1];\n          // Try to find a literal wrapped in three pairs of quotes\n          else {\n            ({ value, matchLength } = this._parseLiteral(input));\n            if (value === null)\n              return reportSyntaxError(this);\n          }\n          if (match !== null || matchLength !== 0) {\n            type = 'literal';\n            this._literalClosingPos = 0;\n          }\n        }\n        break;\n\n      case '?':\n        // Try to find a variable\n        if (this._n3Mode && (match = this._variable.exec(input)))\n          type = 'var', value = match[0];\n        break;\n\n      case '@':\n        // Try to find a language code\n        if (this._previousMarker === 'literal' && (match = this._langcode.exec(input)))\n          type = 'langcode', value = match[1];\n        // Try to find a keyword\n        else if (match = this._keyword.exec(input))\n          type = match[0];\n        break;\n\n      case '.':\n        // Try to find a dot as punctuation\n        if (input.length === 1 ? inputFinished : (input[1] < '0' || input[1] > '9')) {\n          type = '.';\n          matchLength = 1;\n          break;\n        }\n        // Fall through to numerical case (could be a decimal dot)\n\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n      case '+':\n      case '-':\n        // Try to find a number. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a number.\n        // Therefore, try inserting a space if we're at the end of the input.\n        if (match = this._number.exec(input) ||\n            inputFinished && (match = this._number.exec(`${input} `))) {\n          type = 'literal', value = match[0];\n          prefix = (typeof match[1] === 'string' ? xsd.double :\n                    (typeof match[2] === 'string' ? xsd.decimal : xsd.integer));\n        }\n        break;\n\n      case 'B':\n      case 'b':\n      case 'p':\n      case 'P':\n      case 'G':\n      case 'g':\n        // Try to find a SPARQL-style keyword\n        if (match = this._sparqlKeyword.exec(input))\n          type = match[0].toUpperCase();\n        else\n          inconclusive = true;\n        break;\n\n      case 'f':\n      case 't':\n        // Try to match a boolean\n        if (match = this._boolean.exec(input))\n          type = 'literal', value = match[0], prefix = xsd.boolean;\n        else\n          inconclusive = true;\n        break;\n\n      case 'a':\n        // Try to find an abbreviated predicate\n        if (match = this._shortPredicates.exec(input))\n          type = 'abbreviation', value = 'a';\n        else\n          inconclusive = true;\n        break;\n\n      case '=':\n        // Try to find an implication arrow or equals sign\n        if (this._n3Mode && input.length > 1) {\n          type = 'abbreviation';\n          if (input[1] !== '>')\n            matchLength = 1, value = '=';\n          else\n            matchLength = 2, value = '>';\n        }\n        break;\n\n      case '!':\n        if (!this._n3Mode)\n          break;\n      case ',':\n      case ';':\n      case '[':\n      case ']':\n      case '(':\n      case ')':\n      case '{':\n      case '}':\n        if (!this._lineMode) {\n          matchLength = 1;\n          type = firstChar;\n        }\n        break;\n\n      default:\n        inconclusive = true;\n      }\n\n      // Some first characters do not allow an immediate decision, so inspect more\n      if (inconclusive) {\n        // Try to find a prefix\n        if ((this._previousMarker === '@prefix' || this._previousMarker === 'PREFIX') &&\n            (match = this._prefix.exec(input)))\n          type = 'prefix', value = match[1] || '';\n        // Try to find a prefixed name. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a prefixed name.\n        // Therefore, try inserting a space if we're at the end of the input.\n        else if ((match = this._prefixed.exec(input)) ||\n                 inputFinished && (match = this._prefixed.exec(`${input} `)))\n          type = 'prefixed', prefix = match[1] || '', value = this._unescape(match[2]);\n      }\n\n      // A type token is special: it can only be emitted after an IRI or prefixed name is read\n      if (this._previousMarker === '^^') {\n        switch (type) {\n        case 'prefixed': type = 'type';    break;\n        case 'IRI':      type = 'typeIRI'; break;\n        default:         type = '';\n        }\n      }\n\n      // What if nothing of the above was found?\n      if (!type) {\n        // We could be in streaming mode, and then we just wait for more input to arrive.\n        // Otherwise, a syntax error has occurred in the input.\n        // One exception: error on an unaccounted linebreak (= not inside a triple-quoted literal).\n        if (inputFinished || (!/^'''|^\"\"\"/.test(input) && /\\n|\\r/.test(input)))\n          return reportSyntaxError(this);\n        else\n          return this._input = input;\n      }\n\n      // Emit the parsed token\n      const token = { line: line, type: type, value: value, prefix: prefix };\n      callback(null, token);\n      this.previousToken = token;\n      this._previousMarker = type;\n      // Advance to next part to tokenize\n      input = input.substr(matchLength || match[0].length, input.length);\n    }\n\n    // Signals the syntax error through the callback\n    function reportSyntaxError(self) { callback(self._syntaxError(/^\\S*/.exec(input)[0])); }\n  }\n\n  // ### `_unescape` replaces N3 escape codes by their corresponding characters\n  _unescape(item) {\n    let invalid = false;\n    const replaced = item.replace(escapeSequence, (sequence, unicode4, unicode8, escapedChar) => {\n      // 4-digit unicode character\n      if (typeof unicode4 === 'string')\n        return String.fromCharCode(Number.parseInt(unicode4, 16));\n      // 8-digit unicode character\n      if (typeof unicode8 === 'string') {\n        let charCode = Number.parseInt(unicode8, 16);\n        return charCode <= 0xFFFF ? String.fromCharCode(Number.parseInt(unicode8, 16)) :\n          String.fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));\n      }\n      // fixed escape sequence\n      if (escapedChar in escapeReplacements)\n        return escapeReplacements[escapedChar];\n      // invalid escape sequence\n      invalid = true;\n      return '';\n    });\n    return invalid ? null : replaced;\n  }\n\n  // ### `_parseLiteral` parses a literal into an unescaped value\n  _parseLiteral(input) {\n    // Ensure we have enough lookahead to identify triple-quoted strings\n    if (input.length >= 3) {\n      // Identify the opening quote(s)\n      const opening = input.match(/^(?:\"\"\"|\"|'''|'|)/)[0];\n      const openingLength = opening.length;\n\n      // Find the next candidate closing quotes\n      let closingPos = Math.max(this._literalClosingPos, openingLength);\n      while ((closingPos = input.indexOf(opening, closingPos)) > 0) {\n        // Count backslashes right before the closing quotes\n        let backslashCount = 0;\n        while (input[closingPos - backslashCount - 1] === '\\\\')\n          backslashCount++;\n\n        // An even number of backslashes (in particular 0)\n        // means these are actual, non-escaped closing quotes\n        if (backslashCount % 2 === 0) {\n          // Extract and unescape the value\n          const raw = input.substring(openingLength, closingPos);\n          const lines = raw.split(/\\r\\n|\\r|\\n/).length - 1;\n          const matchLength = closingPos + openingLength;\n          // Only triple-quoted strings can be multi-line\n          if (openingLength === 1 && lines !== 0 ||\n              openingLength === 3 && this._lineMode)\n            break;\n          this._line += lines;\n          return { value: this._unescape(raw), matchLength };\n        }\n        closingPos++;\n      }\n      this._literalClosingPos = input.length - openingLength + 1;\n    }\n    return { value: '', matchLength: 0 };\n  }\n\n  // ### `_syntaxError` creates a syntax error for the given issue\n  _syntaxError(issue) {\n    this._input = null;\n    const err = new Error(`Unexpected \"${issue}\" on line ${this._line}.`);\n    err.context = {\n      token: undefined,\n      line: this._line,\n      previousToken: this.previousToken,\n    };\n    return err;\n  }\n\n  // ## Public methods\n\n  // ### `tokenize` starts the transformation of an N3 document into an array of tokens.\n  // The input can be a string or a stream.\n  tokenize(input, callback) {\n    this._line = 1;\n\n    // If the input is a string, continuously emit tokens through the callback until the end\n    if (typeof input === 'string') {\n      this._input = input;\n      // If a callback was passed, asynchronously call it\n      if (typeof callback === 'function')\n        queueMicrotask(() => this._tokenizeToEnd(callback, true));\n      // If no callback was passed, tokenize synchronously and return\n      else {\n        const tokens = [];\n        let error;\n        this._tokenizeToEnd((e, t) => e ? (error = e) : tokens.push(t), true);\n        if (error) throw error;\n        return tokens;\n      }\n    }\n    // Otherwise, the input must be a stream\n    else {\n      this._input = '';\n      this._pendingBuffer = null;\n      if (typeof input.setEncoding === 'function')\n        input.setEncoding('utf8');\n      // Adds the data chunk to the buffer and parses as far as possible\n      input.on('data', data => {\n        if (this._input !== null && data.length !== 0) {\n          // Prepend any previous pending writes\n          if (this._pendingBuffer) {\n            data = Buffer.concat([this._pendingBuffer, data]);\n            this._pendingBuffer = null;\n          }\n          // Hold if the buffer ends in an incomplete unicode sequence\n          if (data[data.length - 1] & 0x80) {\n            this._pendingBuffer = data;\n          }\n          // Otherwise, tokenize as far as possible\n          else {\n            this._input += data;\n            this._tokenizeToEnd(callback, false);\n          }\n        }\n      });\n      // Parses until the end\n      input.on('end', () => {\n        if (this._input !== null)\n          this._tokenizeToEnd(callback, true);\n      });\n      input.on('error', callback);\n    }\n  }\n}\n","// **N3Util** provides N3 utility functions.\n\nimport N3DataFactory from './N3DataFactory';\n\n// Tests whether the given term represents an IRI\nexport function isNamedNode(term) {\n  return !!term && term.termType === 'NamedNode';\n}\n\n// Tests whether the given term represents a blank node\nexport function isBlankNode(term) {\n  return !!term && term.termType === 'BlankNode';\n}\n\n// Tests whether the given term represents a literal\nexport function isLiteral(term) {\n  return !!term && term.termType === 'Literal';\n}\n\n// Tests whether the given term represents a variable\nexport function isVariable(term) {\n  return !!term && term.termType === 'Variable';\n}\n\n// Tests whether the given term represents the default graph\nexport function isDefaultGraph(term) {\n  return !!term && term.termType === 'DefaultGraph';\n}\n\n// Tests whether the given quad is in the default graph\nexport function inDefaultGraph(quad) {\n  return isDefaultGraph(quad.graph);\n}\n\n// Creates a function that prepends the given IRI to a local name\nexport function prefix(iri, factory) {\n  return prefixes({ '': iri }, factory)('');\n}\n\n// Creates a function that allows registering and expanding prefixes\nexport function prefixes(defaultPrefixes, factory) {\n  // Add all of the default prefixes\n  const prefixes = Object.create(null);\n  for (const prefix in defaultPrefixes)\n    processPrefix(prefix, defaultPrefixes[prefix]);\n  // Set the default factory if none was specified\n  factory = factory || N3DataFactory;\n\n  // Registers a new prefix (if an IRI was specified)\n  // or retrieves a function that expands an existing prefix (if no IRI was specified)\n  function processPrefix(prefix, iri) {\n    // Create a new prefix if an IRI is specified or the prefix doesn't exist\n    if (typeof iri === 'string') {\n      // Create a function that expands the prefix\n      const cache = Object.create(null);\n      prefixes[prefix] = local => {\n        return cache[local] || (cache[local] = factory.namedNode(iri + local));\n      };\n    }\n    else if (!(prefix in prefixes)) {\n      throw new Error(`Unknown prefix: ${prefix}`);\n    }\n    return prefixes[prefix];\n  }\n  return processPrefix;\n}\n","// N3.js implementations of the RDF/JS core data types\n// See https://github.com/rdfjs/representation-task-force/blob/master/interface-spec.md\n\nimport namespaces from './IRIs';\nimport { isDefaultGraph } from './N3Util';\nconst { rdf, xsd } = namespaces;\n\n// eslint-disable-next-line prefer-const\nlet DEFAULTGRAPH;\nlet _blankNodeCounter = 0;\n\nconst escapedLiteral = /^\"(.*\".*)(?=\"[^\"]*$)/;\nconst quadId = /^<<(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) ?(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+)?>>$/;\n\n// ## DataFactory singleton\nconst DataFactory = {\n  namedNode,\n  blankNode,\n  variable,\n  literal,\n  defaultGraph,\n  quad,\n  triple: quad,\n};\nexport default DataFactory;\n\n// ## Term constructor\nexport class Term {\n  constructor(id) {\n    this.id = id;\n  }\n\n  // ### The value of this term\n  get value() {\n    return this.id;\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both terms were created by this library,\n    // equality can be computed through ids\n    if (other instanceof Term)\n      return this.id === other.id;\n    // Otherwise, compare term type and value\n    return !!other && this.termType === other.termType &&\n                      this.value    === other.value;\n  }\n\n  // ### Returns a plain object representation of this term\n  toJSON() {\n    return {\n      termType: this.termType,\n      value:    this.value,\n    };\n  }\n}\n\n\n// ## NamedNode constructor\nexport class NamedNode extends Term {\n  // ### The term type of this term\n  get termType() {\n    return 'NamedNode';\n  }\n}\n\n// ## Literal constructor\nexport class Literal extends Term {\n  // ### The term type of this term\n  get termType() {\n    return 'Literal';\n  }\n\n  // ### The text value of this literal\n  get value() {\n    return this.id.substring(1, this.id.lastIndexOf('\"'));\n  }\n\n  // ### The language of this literal\n  get language() {\n    // Find the last quotation mark (e.g., '\"abc\"@en-us')\n    const id = this.id;\n    let atPos = id.lastIndexOf('\"') + 1;\n    // If \"@\" it follows, return the remaining substring; empty otherwise\n    return atPos < id.length && id[atPos++] === '@' ? id.substr(atPos).toLowerCase() : '';\n  }\n\n  // ### The datatype IRI of this literal\n  get datatype() {\n    return new NamedNode(this.datatypeString);\n  }\n\n  // ### The datatype string of this literal\n  get datatypeString() {\n    // Find the last quotation mark (e.g., '\"abc\"^^http://ex.org/types#t')\n    const id = this.id, dtPos = id.lastIndexOf('\"') + 1;\n    const char = dtPos < id.length ? id[dtPos] : '';\n    // If \"^\" it follows, return the remaining substring\n    return char === '^' ? id.substr(dtPos + 2) :\n           // If \"@\" follows, return rdf:langString; xsd:string otherwise\n           (char !== '@' ? xsd.string : rdf.langString);\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both literals were created by this library,\n    // equality can be computed through ids\n    if (other instanceof Literal)\n      return this.id === other.id;\n    // Otherwise, compare term type, value, language, and datatype\n    return !!other && !!other.datatype &&\n                      this.termType === other.termType &&\n                      this.value    === other.value    &&\n                      this.language === other.language &&\n                      this.datatype.value === other.datatype.value;\n  }\n\n  toJSON() {\n    return {\n      termType: this.termType,\n      value:    this.value,\n      language: this.language,\n      datatype: { termType: 'NamedNode', value: this.datatypeString },\n    };\n  }\n}\n\n// ## BlankNode constructor\nexport class BlankNode extends Term {\n  constructor(name) {\n    super(`_:${name}`);\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'BlankNode';\n  }\n\n  // ### The name of this blank node\n  get value() {\n    return this.id.substr(2);\n  }\n}\n\nexport class Variable extends Term {\n  constructor(name) {\n    super(`?${name}`);\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'Variable';\n  }\n\n  // ### The name of this variable\n  get value() {\n    return this.id.substr(1);\n  }\n}\n\n// ## DefaultGraph constructor\nexport class DefaultGraph extends Term {\n  constructor() {\n    super('');\n    return DEFAULTGRAPH || this;\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'DefaultGraph';\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both terms were created by this library,\n    // equality can be computed through strict equality;\n    // otherwise, compare term types.\n    return (this === other) || (!!other && (this.termType === other.termType));\n  }\n}\n\n// ## DefaultGraph singleton\nDEFAULTGRAPH = new DefaultGraph();\n\n\n// ### Constructs a term from the given internal string ID\nexport function termFromId(id, factory) {\n  factory = factory || DataFactory;\n\n  // Falsy value or empty string indicate the default graph\n  if (!id)\n    return factory.defaultGraph();\n\n  // Identify the term type based on the first character\n  switch (id[0]) {\n  case '?':\n    return factory.variable(id.substr(1));\n  case '_':\n    return factory.blankNode(id.substr(2));\n  case '\"':\n    // Shortcut for internal literals\n    if (factory === DataFactory)\n      return new Literal(id);\n    // Literal without datatype or language\n    if (id[id.length - 1] === '\"')\n      return factory.literal(id.substr(1, id.length - 2));\n    // Literal with datatype or language\n    const endPos = id.lastIndexOf('\"', id.length - 1);\n    return factory.literal(id.substr(1, endPos - 1),\n            id[endPos + 1] === '@' ? id.substr(endPos + 2)\n                                   : factory.namedNode(id.substr(endPos + 3)));\n  case '<':\n    const components = quadId.exec(id);\n    return factory.quad(\n      termFromId(unescapeQuotes(components[1]), factory),\n      termFromId(unescapeQuotes(components[2]), factory),\n      termFromId(unescapeQuotes(components[3]), factory),\n      components[4] && termFromId(unescapeQuotes(components[4]), factory)\n    );\n  default:\n    return factory.namedNode(id);\n  }\n}\n\n// ### Constructs an internal string ID from the given term or ID string\nexport function termToId(term) {\n  if (typeof term === 'string')\n    return term;\n  if (term instanceof Term && term.termType !== 'Quad')\n    return term.id;\n  if (!term)\n    return DEFAULTGRAPH.id;\n\n  // Term instantiated with another library\n  switch (term.termType) {\n  case 'NamedNode':    return term.value;\n  case 'BlankNode':    return `_:${term.value}`;\n  case 'Variable':     return `?${term.value}`;\n  case 'DefaultGraph': return '';\n  case 'Literal':      return `\"${term.value}\"${\n    term.language ? `@${term.language}` :\n      (term.datatype && term.datatype.value !== xsd.string ? `^^${term.datatype.value}` : '')}`;\n  case 'Quad':\n    // To identify RDF* quad components, we escape quotes by doubling them.\n    // This avoids the overhead of backslash parsing of Turtle-like syntaxes.\n    return `<<${\n        escapeQuotes(termToId(term.subject))\n      } ${\n        escapeQuotes(termToId(term.predicate))\n      } ${\n        escapeQuotes(termToId(term.object))\n      }${\n        (isDefaultGraph(term.graph)) ? '' : ` ${termToId(term.graph)}`\n      }>>`;\n  default: throw new Error(`Unexpected termType: ${term.termType}`);\n  }\n}\n\n\n// ## Quad constructor\nexport class Quad extends Term {\n  constructor(subject, predicate, object, graph) {\n    super('');\n    this.subject   = subject;\n    this.predicate = predicate;\n    this.object    = object;\n    this.graph     = graph || DEFAULTGRAPH;\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'Quad';\n  }\n\n  // ### Returns a plain object representation of this quad\n  toJSON() {\n    return {\n      termType:  this.termType,\n      subject:   this.subject.toJSON(),\n      predicate: this.predicate.toJSON(),\n      object:    this.object.toJSON(),\n      graph:     this.graph.toJSON(),\n    };\n  }\n\n  // ### Returns whether this object represents the same quad as the other\n  equals(other) {\n    return !!other && this.subject.equals(other.subject)     &&\n                      this.predicate.equals(other.predicate) &&\n                      this.object.equals(other.object)       &&\n                      this.graph.equals(other.graph);\n  }\n}\nexport { Quad as Triple };\n\n// ### Escapes the quotes within the given literal\nexport function escapeQuotes(id) {\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"/g, '\"\"')}`);\n}\n\n// ### Unescapes the quotes within the given literal\nexport function unescapeQuotes(id) {\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"\"/g, '\"')}`);\n}\n\n// ### Creates an IRI\nfunction namedNode(iri) {\n  return new NamedNode(iri);\n}\n\n// ### Creates a blank node\nfunction blankNode(name) {\n  return new BlankNode(name || `n3-${_blankNodeCounter++}`);\n}\n\n// ### Creates a literal\nfunction literal(value, languageOrDataType) {\n  // Create a language-tagged string\n  if (typeof languageOrDataType === 'string')\n    return new Literal(`\"${value}\"@${languageOrDataType.toLowerCase()}`);\n\n  // Automatically determine datatype for booleans and numbers\n  let datatype = languageOrDataType ? languageOrDataType.value : '';\n  if (datatype === '') {\n    // Convert a boolean\n    if (typeof value === 'boolean')\n      datatype = xsd.boolean;\n    // Convert an integer or double\n    else if (typeof value === 'number') {\n      if (Number.isFinite(value))\n        datatype = Number.isInteger(value) ? xsd.integer : xsd.double;\n      else {\n        datatype = xsd.double;\n        if (!Number.isNaN(value))\n          value = value > 0 ? 'INF' : '-INF';\n      }\n    }\n  }\n\n  // Create a datatyped literal\n  return (datatype === '' || datatype === xsd.string) ?\n    new Literal(`\"${value}\"`) :\n    new Literal(`\"${value}\"^^${datatype}`);\n}\n\n// ### Creates a variable\nfunction variable(name) {\n  return new Variable(name);\n}\n\n// ### Returns the default graph\nfunction defaultGraph() {\n  return DEFAULTGRAPH;\n}\n\n// ### Creates a quad\nfunction quad(subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph);\n}\n","// **N3Parser** parses N3 documents.\nimport N3Lexer from './N3Lexer';\nimport N3DataFactory from './N3DataFactory';\nimport namespaces from './IRIs';\n\nlet blankNodePrefix = 0;\n\n// ## Constructor\nexport default class N3Parser {\n  constructor(options) {\n    this._contextStack = [];\n    this._graph = null;\n\n    // Set the document IRI\n    options = options || {};\n    this._setBase(options.baseIRI);\n    options.factory && initDataFactory(this, options.factory);\n\n    // Set supported features depending on the format\n    const format = (typeof options.format === 'string') ?\n                 options.format.match(/\\w*$/)[0].toLowerCase() : '',\n        isTurtle = /turtle/.test(format), isTriG = /trig/.test(format),\n        isNTriples = /triple/.test(format), isNQuads = /quad/.test(format),\n        isN3 = this._n3Mode = /n3/.test(format),\n        isLineMode = isNTriples || isNQuads;\n    if (!(this._supportsNamedGraphs = !(isTurtle || isN3)))\n      this._readPredicateOrNamedGraph = this._readPredicate;\n    // Support triples in other graphs\n    this._supportsQuads = !(isTurtle || isTriG || isNTriples || isN3);\n    // Support nesting of triples\n    this._supportsRDFStar = format === '' || /star|\\*$/.test(format);\n    // Disable relative IRIs in N-Triples or N-Quads mode\n    if (isLineMode)\n      this._resolveRelativeIRI = iri => { return null; };\n    this._blankNodePrefix = typeof options.blankNodePrefix !== 'string' ? '' :\n                              options.blankNodePrefix.replace(/^(?!_:)/, '_:');\n    this._lexer = options.lexer || new N3Lexer({ lineMode: isLineMode, n3: isN3 });\n    // Disable explicit quantifiers by default\n    this._explicitQuantifiers = !!options.explicitQuantifiers;\n  }\n\n  // ## Static class methods\n\n  // ### `_resetBlankNodePrefix` restarts blank node prefix identification\n  static _resetBlankNodePrefix() {\n    blankNodePrefix = 0;\n  }\n\n  // ## Private methods\n\n  // ### `_setBase` sets the base IRI to resolve relative IRIs\n  _setBase(baseIRI) {\n    if (!baseIRI) {\n      this._base = '';\n      this._basePath = '';\n    }\n    else {\n      // Remove fragment if present\n      const fragmentPos = baseIRI.indexOf('#');\n      if (fragmentPos >= 0)\n        baseIRI = baseIRI.substr(0, fragmentPos);\n      // Set base IRI and its components\n      this._base = baseIRI;\n      this._basePath   = baseIRI.indexOf('/') < 0 ? baseIRI :\n                         baseIRI.replace(/[^\\/?]*(?:\\?.*)?$/, '');\n      baseIRI = baseIRI.match(/^(?:([a-z][a-z0-9+.-]*:))?(?:\\/\\/[^\\/]*)?/i);\n      this._baseRoot   = baseIRI[0];\n      this._baseScheme = baseIRI[1];\n    }\n  }\n\n  // ### `_saveContext` stores the current parsing context\n  // when entering a new scope (list, blank node, formula)\n  _saveContext(type, graph, subject, predicate, object) {\n    const n3Mode = this._n3Mode;\n    this._contextStack.push({\n      subject: subject, predicate: predicate, object: object,\n      graph: graph, type: type,\n      inverse: n3Mode ? this._inversePredicate : false,\n      blankPrefix: n3Mode ? this._prefixes._ : '',\n      quantified: n3Mode ? this._quantified : null,\n    });\n    // The settings below only apply to N3 streams\n    if (n3Mode) {\n      // Every new scope resets the predicate direction\n      this._inversePredicate = false;\n      // In N3, blank nodes are scoped to a formula\n      // (using a dot as separator, as a blank node label cannot start with it)\n      this._prefixes._ = (this._graph ? `${this._graph.id.substr(2)}.` : '.');\n      // Quantifiers are scoped to a formula\n      this._quantified = Object.create(this._quantified);\n    }\n  }\n\n  // ### `_restoreContext` restores the parent context\n  // when leaving a scope (list, blank node, formula)\n  _restoreContext() {\n    const context = this._contextStack.pop(), n3Mode = this._n3Mode;\n    this._subject   = context.subject;\n    this._predicate = context.predicate;\n    this._object    = context.object;\n    this._graph     = context.graph;\n    // The settings below only apply to N3 streams\n    if (n3Mode) {\n      this._inversePredicate = context.inverse;\n      this._prefixes._ = context.blankPrefix;\n      this._quantified = context.quantified;\n    }\n  }\n\n  // ### `_readInTopContext` reads a token when in the top context\n  _readInTopContext(token) {\n    switch (token.type) {\n    // If an EOF token arrives in the top context, signal that we're done\n    case 'eof':\n      if (this._graph !== null)\n        return this._error('Unclosed graph', token);\n      delete this._prefixes._;\n      return this._callback(null, null, this._prefixes);\n    // It could be a prefix declaration\n    case 'PREFIX':\n      this._sparqlStyle = true;\n    case '@prefix':\n      return this._readPrefix;\n    // It could be a base declaration\n    case 'BASE':\n      this._sparqlStyle = true;\n    case '@base':\n      return this._readBaseIRI;\n    // It could be a graph\n    case '{':\n      if (this._supportsNamedGraphs) {\n        this._graph = '';\n        this._subject = null;\n        return this._readSubject;\n      }\n    case 'GRAPH':\n      if (this._supportsNamedGraphs)\n        return this._readNamedGraphLabel;\n    // Otherwise, the next token must be a subject\n    default:\n      return this._readSubject(token);\n    }\n  }\n\n  // ### `_readEntity` reads an IRI, prefixed name, blank node, or variable\n  _readEntity(token, quantifier) {\n    let value;\n    switch (token.type) {\n    // Read a relative or absolute IRI\n    case 'IRI':\n    case 'typeIRI':\n      const iri = this._resolveIRI(token.value);\n      if (iri === null)\n        return this._error('Invalid IRI', token);\n      value = this._namedNode(iri);\n      break;\n    // Read a prefixed name\n    case 'type':\n    case 'prefixed':\n      const prefix = this._prefixes[token.prefix];\n      if (prefix === undefined)\n        return this._error(`Undefined prefix \"${token.prefix}:\"`, token);\n      value = this._namedNode(prefix + token.value);\n      break;\n    // Read a blank node\n    case 'blank':\n      value = this._blankNode(this._prefixes[token.prefix] + token.value);\n      break;\n    // Read a variable\n    case 'var':\n      value = this._variable(token.value.substr(1));\n      break;\n    // Everything else is not an entity\n    default:\n      return this._error(`Expected entity but got ${token.type}`, token);\n    }\n    // In N3 mode, replace the entity if it is quantified\n    if (!quantifier && this._n3Mode && (value.id in this._quantified))\n      value = this._quantified[value.id];\n    return value;\n  }\n\n  // ### `_readSubject` reads a quad's subject\n  _readSubject(token) {\n    this._predicate = null;\n    switch (token.type) {\n    case '[':\n      // Start a new quad with a new blank node as subject\n      this._saveContext('blank', this._graph,\n                        this._subject = this._blankNode(), null, null);\n      return this._readBlankNodeHead;\n    case '(':\n      // Start a new list\n      this._saveContext('list', this._graph, this.RDF_NIL, null, null);\n      this._subject = null;\n      return this._readListItem;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph,\n                        this._graph = this._blankNode(), null, null);\n      return this._readSubject;\n    case '}':\n       // No subject; the graph in which we are reading is closed instead\n      return this._readPunctuation(token);\n    case '@forSome':\n      if (!this._n3Mode)\n        return this._error('Unexpected \"@forSome\"', token);\n      this._subject = null;\n      this._predicate = this.N3_FORSOME;\n      this._quantifier = this._blankNode;\n      return this._readQuantifierList;\n    case '@forAll':\n      if (!this._n3Mode)\n        return this._error('Unexpected \"@forAll\"', token);\n      this._subject = null;\n      this._predicate = this.N3_FORALL;\n      this._quantifier = this._variable;\n      return this._readQuantifierList;\n    case 'literal':\n      if (!this._n3Mode)\n        return this._error('Unexpected literal', token);\n\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        return this._completeSubjectLiteral;\n      }\n      else\n        this._subject = this._literal(token.value, this._namedNode(token.prefix));\n\n      break;\n    case '<<':\n      if (!this._supportsRDFStar)\n        return this._error('Unexpected RDF* syntax', token);\n      this._saveContext('<<', this._graph, null, null, null);\n      this._graph = null;\n      return this._readSubject;\n    default:\n      // Read the subject entity\n      if ((this._subject = this._readEntity(token)) === undefined)\n        return;\n      // In N3 mode, the subject might be a path\n      if (this._n3Mode)\n        return this._getPathReader(this._readPredicateOrNamedGraph);\n    }\n\n    // The next token must be a predicate,\n    // or, if the subject was actually a graph IRI, a named graph\n    return this._readPredicateOrNamedGraph;\n  }\n\n  // ### `_readPredicate` reads a quad's predicate\n  _readPredicate(token) {\n    const type = token.type;\n    switch (type) {\n    case 'inverse':\n      this._inversePredicate = true;\n    case 'abbreviation':\n      this._predicate = this.ABBREVIATIONS[token.value];\n      break;\n    case '.':\n    case ']':\n    case '}':\n      // Expected predicate didn't come, must have been trailing semicolon\n      if (this._predicate === null)\n        return this._error(`Unexpected ${type}`, token);\n      this._subject = null;\n      return type === ']' ? this._readBlankNodeTail(token) : this._readPunctuation(token);\n    case ';':\n      // Additional semicolons can be safely ignored\n      return this._predicate !== null ? this._readPredicate :\n             this._error('Expected predicate but got ;', token);\n    case 'blank':\n      if (!this._n3Mode)\n        return this._error('Disallowed blank node as predicate', token);\n    default:\n      if ((this._predicate = this._readEntity(token)) === undefined)\n        return;\n    }\n    // The next token must be an object\n    return this._readObject;\n  }\n\n  // ### `_readObject` reads a quad's object\n  _readObject(token) {\n    switch (token.type) {\n    case 'literal':\n      // Regular literal, can still get a datatype or language\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        return this._readDataTypeOrLang;\n      }\n      // Pre-datatyped string literal (prefix stores the datatype)\n      else\n        this._object = this._literal(token.value, this._namedNode(token.prefix));\n      break;\n    case '[':\n      // Start a new quad with a new blank node as subject\n      this._saveContext('blank', this._graph, this._subject, this._predicate,\n                        this._subject = this._blankNode());\n      return this._readBlankNodeHead;\n    case '(':\n      // Start a new list\n      this._saveContext('list', this._graph, this._subject, this._predicate, this.RDF_NIL);\n      this._subject = null;\n      return this._readListItem;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph, this._subject, this._predicate,\n                        this._graph = this._blankNode());\n      return this._readSubject;\n    case '<<':\n      if (!this._supportsRDFStar)\n        return this._error('Unexpected RDF* syntax', token);\n      this._saveContext('<<', this._graph, this._subject, this._predicate, null);\n      this._graph = null;\n      return this._readSubject;\n    default:\n      // Read the object entity\n      if ((this._object = this._readEntity(token)) === undefined)\n        return;\n      // In N3 mode, the object might be a path\n      if (this._n3Mode)\n        return this._getPathReader(this._getContextEndReader());\n    }\n    return this._getContextEndReader();\n  }\n\n  // ### `_readPredicateOrNamedGraph` reads a quad's predicate, or a named graph\n  _readPredicateOrNamedGraph(token) {\n    return token.type === '{' ? this._readGraph(token) : this._readPredicate(token);\n  }\n\n  // ### `_readGraph` reads a graph\n  _readGraph(token) {\n    if (token.type !== '{')\n      return this._error(`Expected graph but got ${token.type}`, token);\n    // The \"subject\" we read is actually the GRAPH's label\n    this._graph = this._subject, this._subject = null;\n    return this._readSubject;\n  }\n\n  // ### `_readBlankNodeHead` reads the head of a blank node\n  _readBlankNodeHead(token) {\n    if (token.type === ']') {\n      this._subject = null;\n      return this._readBlankNodeTail(token);\n    }\n    else {\n      this._predicate = null;\n      return this._readPredicate(token);\n    }\n  }\n\n  // ### `_readBlankNodeTail` reads the end of a blank node\n  _readBlankNodeTail(token) {\n    if (token.type !== ']')\n      return this._readBlankNodePunctuation(token);\n\n    // Store blank node quad\n    if (this._subject !== null)\n      this._emit(this._subject, this._predicate, this._object, this._graph);\n\n    // Restore the parent context containing this blank node\n    const empty = this._predicate === null;\n    this._restoreContext();\n    // If the blank node was the subject, continue reading the predicate\n    if (this._object === null)\n      // If the blank node was empty, it could be a named graph label\n      return empty ? this._readPredicateOrNamedGraph : this._readPredicateAfterBlank;\n    // If the blank node was the object, restore previous context and read punctuation\n    else\n      return this._getContextEndReader();\n  }\n\n  // ### `_readPredicateAfterBlank` reads a predicate after an anonymous blank node\n  _readPredicateAfterBlank(token) {\n    switch (token.type) {\n    case '.':\n    case '}':\n      // No predicate is coming if the triple is terminated here\n      this._subject = null;\n      return this._readPunctuation(token);\n    default:\n      return this._readPredicate(token);\n    }\n  }\n\n  // ### `_readListItem` reads items from a list\n  _readListItem(token) {\n    let item = null,                      // The item of the list\n        list = null,                      // The list itself\n        next = this._readListItem;        // The next function to execute\n    const previousList = this._subject,   // The previous list that contains this list\n        stack = this._contextStack,       // The stack of parent contexts\n        parent = stack[stack.length - 1]; // The parent containing the current list\n\n    switch (token.type) {\n    case '[':\n      // Stack the current list quad and start a new quad with a blank node as subject\n      this._saveContext('blank', this._graph,\n                        list = this._blankNode(), this.RDF_FIRST,\n                        this._subject = item = this._blankNode());\n      next = this._readBlankNodeHead;\n      break;\n    case '(':\n      // Stack the current list quad and start a new list\n      this._saveContext('list', this._graph,\n                        list = this._blankNode(), this.RDF_FIRST, this.RDF_NIL);\n      this._subject = null;\n      break;\n    case ')':\n      // Closing the list; restore the parent context\n      this._restoreContext();\n      // If this list is contained within a parent list, return the membership quad here.\n      // This will be `<parent list element> rdf:first <this list>.`.\n      if (stack.length !== 0 && stack[stack.length - 1].type === 'list')\n        this._emit(this._subject, this._predicate, this._object, this._graph);\n      // Was this list the parent's subject?\n      if (this._predicate === null) {\n        // The next token is the predicate\n        next = this._readPredicate;\n        // No list tail if this was an empty list\n        if (this._subject === this.RDF_NIL)\n          return next;\n      }\n      // The list was in the parent context's object\n      else {\n        next = this._getContextEndReader();\n        // No list tail if this was an empty list\n        if (this._object === this.RDF_NIL)\n          return next;\n      }\n      // Close the list by making the head nil\n      list = this.RDF_NIL;\n      break;\n    case 'literal':\n      // Regular literal, can still get a datatype or language\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        next = this._readListItemDataTypeOrLang;\n      }\n      // Pre-datatyped string literal (prefix stores the datatype)\n      else {\n        item = this._literal(token.value, this._namedNode(token.prefix));\n        next = this._getContextEndReader();\n      }\n      break;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph, this._subject, this._predicate,\n                        this._graph = this._blankNode());\n      return this._readSubject;\n    default:\n      if ((item = this._readEntity(token)) === undefined)\n        return;\n    }\n\n     // Create a new blank node if no item head was assigned yet\n    if (list === null)\n      this._subject = list = this._blankNode();\n\n    // Is this the first element of the list?\n    if (previousList === null) {\n      // This list is either the subject or the object of its parent\n      if (parent.predicate === null)\n        parent.subject = list;\n      else\n        parent.object = list;\n    }\n    else {\n      // Continue the previous list with the current list\n      this._emit(previousList, this.RDF_REST, list, this._graph);\n    }\n    // If an item was read, add it to the list\n    if (item !== null) {\n      // In N3 mode, the item might be a path\n      if (this._n3Mode && (token.type === 'IRI' || token.type === 'prefixed')) {\n        // Create a new context to add the item's path\n        this._saveContext('item', this._graph, list, this.RDF_FIRST, item);\n        this._subject = item, this._predicate = null;\n        // _readPath will restore the context and output the item\n        return this._getPathReader(this._readListItem);\n      }\n      // Output the item\n      this._emit(list, this.RDF_FIRST, item, this._graph);\n    }\n    return next;\n  }\n\n  // ### `_readDataTypeOrLang` reads an _optional_ datatype or language\n  _readDataTypeOrLang(token) {\n    return this._completeObjectLiteral(token, false);\n  }\n\n\n  // ### `_readListItemDataTypeOrLang` reads an _optional_ datatype or language in a list\n  _readListItemDataTypeOrLang(token) {\n    return this._completeObjectLiteral(token, true);\n  }\n\n  // ### `_completeLiteral` completes a literal with an optional datatype or language\n  _completeLiteral(token) {\n    // Create a simple string literal by default\n    let literal = this._literal(this._literalValue);\n\n    switch (token.type) {\n    // Create a datatyped literal\n    case 'type':\n    case 'typeIRI':\n      const datatype = this._readEntity(token);\n      if (datatype === undefined) return; // No datatype means an error occurred\n      literal = this._literal(this._literalValue, datatype);\n      token = null;\n      break;\n    // Create a language-tagged string\n    case 'langcode':\n      literal = this._literal(this._literalValue, token.value);\n      token = null;\n      break;\n    }\n\n    return { token, literal };\n  }\n\n  // Completes a literal in subject position\n  _completeSubjectLiteral(token) {\n    this._subject = this._completeLiteral(token).literal;\n    return this._readPredicateOrNamedGraph;\n  }\n\n  // Completes a literal in object position\n  _completeObjectLiteral(token, listItem) {\n    const completed = this._completeLiteral(token);\n    if (!completed)\n      return;\n    this._object = completed.literal;\n\n    // If this literal was part of a list, write the item\n    // (we could also check the context stack, but passing in a flag is faster)\n    if (listItem)\n      this._emit(this._subject, this.RDF_FIRST, this._object, this._graph);\n    // If the token was consumed, continue with the rest of the input\n    if (completed.token === null)\n      return this._getContextEndReader();\n    // Otherwise, consume the token now\n    else {\n      this._readCallback = this._getContextEndReader();\n      return this._readCallback(completed.token);\n    }\n  }\n\n  // ### `_readFormulaTail` reads the end of a formula\n  _readFormulaTail(token) {\n    if (token.type !== '}')\n      return this._readPunctuation(token);\n\n    // Store the last quad of the formula\n    if (this._subject !== null)\n      this._emit(this._subject, this._predicate, this._object, this._graph);\n\n    // Restore the parent context containing this formula\n    this._restoreContext();\n    // If the formula was the subject, continue reading the predicate.\n    // If the formula was the object, read punctuation.\n    return this._object === null ? this._readPredicate : this._getContextEndReader();\n  }\n\n  // ### `_readPunctuation` reads punctuation between quads or quad parts\n  _readPunctuation(token) {\n    let next, graph = this._graph;\n    const subject = this._subject, inversePredicate = this._inversePredicate;\n    switch (token.type) {\n    // A closing brace ends a graph\n    case '}':\n      if (this._graph === null)\n        return this._error('Unexpected graph closing', token);\n      if (this._n3Mode)\n        return this._readFormulaTail(token);\n      this._graph = null;\n    // A dot just ends the statement, without sharing anything with the next\n    case '.':\n      this._subject = null;\n      next = this._contextStack.length ? this._readSubject : this._readInTopContext;\n      if (inversePredicate) this._inversePredicate = false;\n      break;\n    // Semicolon means the subject is shared; predicate and object are different\n    case ';':\n      next = this._readPredicate;\n      break;\n    // Comma means both the subject and predicate are shared; the object is different\n    case ',':\n      next = this._readObject;\n      break;\n    default:\n      // An entity means this is a quad (only allowed if not already inside a graph)\n      if (this._supportsQuads && this._graph === null && (graph = this._readEntity(token)) !== undefined) {\n        next = this._readQuadPunctuation;\n        break;\n      }\n      return this._error(`Expected punctuation to follow \"${this._object.id}\"`, token);\n    }\n    // A quad has been completed now, so return it\n    if (subject !== null) {\n      const predicate = this._predicate, object = this._object;\n      if (!inversePredicate)\n        this._emit(subject, predicate, object,  graph);\n      else\n        this._emit(object,  predicate, subject, graph);\n    }\n    return next;\n  }\n\n    // ### `_readBlankNodePunctuation` reads punctuation in a blank node\n  _readBlankNodePunctuation(token) {\n    let next;\n    switch (token.type) {\n    // Semicolon means the subject is shared; predicate and object are different\n    case ';':\n      next = this._readPredicate;\n      break;\n    // Comma means both the subject and predicate are shared; the object is different\n    case ',':\n      next = this._readObject;\n      break;\n    default:\n      return this._error(`Expected punctuation to follow \"${this._object.id}\"`, token);\n    }\n    // A quad has been completed now, so return it\n    this._emit(this._subject, this._predicate, this._object, this._graph);\n    return next;\n  }\n\n  // ### `_readQuadPunctuation` reads punctuation after a quad\n  _readQuadPunctuation(token) {\n    if (token.type !== '.')\n      return this._error('Expected dot to follow quad', token);\n    return this._readInTopContext;\n  }\n\n  // ### `_readPrefix` reads the prefix of a prefix declaration\n  _readPrefix(token) {\n    if (token.type !== 'prefix')\n      return this._error('Expected prefix to follow @prefix', token);\n    this._prefix = token.value;\n    return this._readPrefixIRI;\n  }\n\n  // ### `_readPrefixIRI` reads the IRI of a prefix declaration\n  _readPrefixIRI(token) {\n    if (token.type !== 'IRI')\n      return this._error(`Expected IRI to follow prefix \"${this._prefix}:\"`, token);\n    const prefixNode = this._readEntity(token);\n    this._prefixes[this._prefix] = prefixNode.value;\n    this._prefixCallback(this._prefix, prefixNode);\n    return this._readDeclarationPunctuation;\n  }\n\n  // ### `_readBaseIRI` reads the IRI of a base declaration\n  _readBaseIRI(token) {\n    const iri = token.type === 'IRI' && this._resolveIRI(token.value);\n    if (!iri)\n      return this._error('Expected valid IRI to follow base declaration', token);\n    this._setBase(iri);\n    return this._readDeclarationPunctuation;\n  }\n\n  // ### `_readNamedGraphLabel` reads the label of a named graph\n  _readNamedGraphLabel(token) {\n    switch (token.type) {\n    case 'IRI':\n    case 'blank':\n    case 'prefixed':\n      return this._readSubject(token), this._readGraph;\n    case '[':\n      return this._readNamedGraphBlankLabel;\n    default:\n      return this._error('Invalid graph label', token);\n    }\n  }\n\n  // ### `_readNamedGraphLabel` reads a blank node label of a named graph\n  _readNamedGraphBlankLabel(token) {\n    if (token.type !== ']')\n      return this._error('Invalid graph label', token);\n    this._subject = this._blankNode();\n    return this._readGraph;\n  }\n\n  // ### `_readDeclarationPunctuation` reads the punctuation of a declaration\n  _readDeclarationPunctuation(token) {\n    // SPARQL-style declarations don't have punctuation\n    if (this._sparqlStyle) {\n      this._sparqlStyle = false;\n      return this._readInTopContext(token);\n    }\n\n    if (token.type !== '.')\n      return this._error('Expected declaration to end with a dot', token);\n    return this._readInTopContext;\n  }\n\n  // Reads a list of quantified symbols from a @forSome or @forAll statement\n  _readQuantifierList(token) {\n    let entity;\n    switch (token.type) {\n    case 'IRI':\n    case 'prefixed':\n      if ((entity = this._readEntity(token, true)) !== undefined)\n        break;\n    default:\n      return this._error(`Unexpected ${token.type}`, token);\n    }\n    // Without explicit quantifiers, map entities to a quantified entity\n    if (!this._explicitQuantifiers)\n      this._quantified[entity.id] = this._quantifier(this._blankNode().value);\n    // With explicit quantifiers, output the reified quantifier\n    else {\n      // If this is the first item, start a new quantifier list\n      if (this._subject === null)\n        this._emit(this._graph || this.DEFAULTGRAPH, this._predicate,\n                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);\n      // Otherwise, continue the previous list\n      else\n        this._emit(this._subject, this.RDF_REST,\n                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);\n      // Output the list item\n      this._emit(this._subject, this.RDF_FIRST, entity, this.QUANTIFIERS_GRAPH);\n    }\n    return this._readQuantifierPunctuation;\n  }\n\n  // Reads punctuation from a @forSome or @forAll statement\n  _readQuantifierPunctuation(token) {\n    // Read more quantifiers\n    if (token.type === ',')\n      return this._readQuantifierList;\n    // End of the quantifier list\n    else {\n      // With explicit quantifiers, close the quantifier list\n      if (this._explicitQuantifiers) {\n        this._emit(this._subject, this.RDF_REST, this.RDF_NIL, this.QUANTIFIERS_GRAPH);\n        this._subject = null;\n      }\n      // Read a dot\n      this._readCallback = this._getContextEndReader();\n      return this._readCallback(token);\n    }\n  }\n\n  // ### `_getPathReader` reads a potential path and then resumes with the given function\n  _getPathReader(afterPath) {\n    this._afterPath = afterPath;\n    return this._readPath;\n  }\n\n  // ### `_readPath` reads a potential path\n  _readPath(token) {\n    switch (token.type) {\n    // Forward path\n    case '!': return this._readForwardPath;\n    // Backward path\n    case '^': return this._readBackwardPath;\n    // Not a path; resume reading where we left off\n    default:\n      const stack = this._contextStack, parent = stack.length && stack[stack.length - 1];\n      // If we were reading a list item, we still need to output it\n      if (parent && parent.type === 'item') {\n        // The list item is the remaining subejct after reading the path\n        const item = this._subject;\n        // Switch back to the context of the list\n        this._restoreContext();\n        // Output the list item\n        this._emit(this._subject, this.RDF_FIRST, item, this._graph);\n      }\n      return this._afterPath(token);\n    }\n  }\n\n  // ### `_readForwardPath` reads a '!' path\n  _readForwardPath(token) {\n    let subject, predicate;\n    const object = this._blankNode();\n    // The next token is the predicate\n    if ((predicate = this._readEntity(token)) === undefined)\n      return;\n    // If we were reading a subject, replace the subject by the path's object\n    if (this._predicate === null)\n      subject = this._subject, this._subject = object;\n    // If we were reading an object, replace the subject by the path's object\n    else\n      subject = this._object,  this._object  = object;\n    // Emit the path's current quad and read its next section\n    this._emit(subject, predicate, object, this._graph);\n    return this._readPath;\n  }\n\n  // ### `_readBackwardPath` reads a '^' path\n  _readBackwardPath(token) {\n    const subject = this._blankNode();\n    let predicate, object;\n    // The next token is the predicate\n    if ((predicate = this._readEntity(token)) === undefined)\n      return;\n    // If we were reading a subject, replace the subject by the path's subject\n    if (this._predicate === null)\n      object = this._subject, this._subject = subject;\n    // If we were reading an object, replace the subject by the path's subject\n    else\n      object = this._object,  this._object  = subject;\n    // Emit the path's current quad and read its next section\n    this._emit(subject, predicate, object, this._graph);\n    return this._readPath;\n  }\n\n  // ### `_readRDFStarTailOrGraph` reads the graph of a nested RDF* quad or the end of a nested RDF* triple\n  _readRDFStarTailOrGraph(token) {\n    if (token.type !== '>>') {\n      // An entity means this is a quad (only allowed if not already inside a graph)\n      if (this._supportsQuads && this._graph === null && (this._graph = this._readEntity(token)) !== undefined)\n        return this._readRDFStarTail;\n      return this._error(`Expected >> to follow \"${this._object.id}\"`, token);\n    }\n    return this._readRDFStarTail(token);\n  }\n\n  // ### `_readRDFStarTail` reads the end of a nested RDF* triple\n  _readRDFStarTail(token) {\n    if (token.type !== '>>')\n      return this._error(`Expected >> but got ${token.type}`, token);\n    // Read the quad and restore the previous context\n    const quad = this._quad(this._subject, this._predicate, this._object,\n      this._graph || this.DEFAULTGRAPH);\n    this._restoreContext();\n    // If the triple was the subject, continue by reading the predicate.\n    if (this._subject === null) {\n      this._subject = quad;\n      return this._readPredicate;\n    }\n    // If the triple was the object, read context end.\n    else {\n      this._object = quad;\n      return this._getContextEndReader();\n    }\n  }\n\n  // ### `_getContextEndReader` gets the next reader function at the end of a context\n  _getContextEndReader() {\n    const contextStack = this._contextStack;\n    if (!contextStack.length)\n      return this._readPunctuation;\n\n    switch (contextStack[contextStack.length - 1].type) {\n    case 'blank':\n      return this._readBlankNodeTail;\n    case 'list':\n      return this._readListItem;\n    case 'formula':\n      return this._readFormulaTail;\n    case '<<':\n      return this._readRDFStarTailOrGraph;\n    }\n  }\n\n  // ### `_emit` sends a quad through the callback\n  _emit(subject, predicate, object, graph) {\n    this._callback(null, this._quad(subject, predicate, object, graph || this.DEFAULTGRAPH));\n  }\n\n  // ### `_error` emits an error message through the callback\n  _error(message, token) {\n    const err = new Error(`${message} on line ${token.line}.`);\n    err.context = {\n      token: token,\n      line: token.line,\n      previousToken: this._lexer.previousToken,\n    };\n    this._callback(err);\n    this._callback = noop;\n  }\n\n  // ### `_resolveIRI` resolves an IRI against the base path\n  _resolveIRI(iri) {\n    return /^[a-z][a-z0-9+.-]*:/i.test(iri) ? iri : this._resolveRelativeIRI(iri);\n  }\n\n  // ### `_resolveRelativeIRI` resolves an IRI against the base path,\n  // assuming that a base path has been set and that the IRI is indeed relative\n  _resolveRelativeIRI(iri) {\n    // An empty relative IRI indicates the base IRI\n    if (!iri.length)\n      return this._base;\n    // Decide resolving strategy based in the first character\n    switch (iri[0]) {\n    // Resolve relative fragment IRIs against the base IRI\n    case '#': return this._base + iri;\n    // Resolve relative query string IRIs by replacing the query string\n    case '?': return this._base.replace(/(?:\\?.*)?$/, iri);\n    // Resolve root-relative IRIs at the root of the base IRI\n    case '/':\n      // Resolve scheme-relative IRIs to the scheme\n      return (iri[1] === '/' ? this._baseScheme : this._baseRoot) + this._removeDotSegments(iri);\n    // Resolve all other IRIs at the base IRI's path\n    default:\n      // Relative IRIs cannot contain a colon in the first path segment\n      return (/^[^/:]*:/.test(iri)) ? null : this._removeDotSegments(this._basePath + iri);\n    }\n  }\n\n  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986\n  _removeDotSegments(iri) {\n    // Don't modify the IRI if it does not contain any dot segments\n    if (!/(^|\\/)\\.\\.?($|[/#?])/.test(iri))\n      return iri;\n\n    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'\n    const length = iri.length;\n    let result = '', i = -1, pathStart = -1, segmentStart = 0, next = '/';\n\n    while (i < length) {\n      switch (next) {\n      // The path starts with the first slash after the authority\n      case ':':\n        if (pathStart < 0) {\n          // Skip two slashes before the authority\n          if (iri[++i] === '/' && iri[++i] === '/')\n            // Skip to slash after the authority\n            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')\n              i = pathStart;\n        }\n        break;\n      // Don't modify a query string or fragment\n      case '?':\n      case '#':\n        i = length;\n        break;\n      // Handle '/.' or '/..' path segments\n      case '/':\n        if (iri[i + 1] === '.') {\n          next = iri[++i + 1];\n          switch (next) {\n          // Remove a '/.' segment\n          case '/':\n            result += iri.substring(segmentStart, i - 1);\n            segmentStart = i + 1;\n            break;\n          // Remove a trailing '/.' segment\n          case undefined:\n          case '?':\n          case '#':\n            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);\n          // Remove a '/..' segment\n          case '.':\n            next = iri[++i + 1];\n            if (next === undefined || next === '/' || next === '?' || next === '#') {\n              result += iri.substring(segmentStart, i - 2);\n              // Try to remove the parent path from result\n              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)\n                result = result.substr(0, segmentStart);\n              // Remove a trailing '/..' segment\n              if (next !== '/')\n                return `${result}/${iri.substr(i + 1)}`;\n              segmentStart = i + 1;\n            }\n          }\n        }\n      }\n      next = iri[++i];\n    }\n    return result + iri.substring(segmentStart);\n  }\n\n  // ## Public methods\n\n  // ### `parse` parses the N3 input and emits each parsed quad through the callback\n  parse(input, quadCallback, prefixCallback) {\n    // The read callback is the next function to be executed when a token arrives.\n    // We start reading in the top context.\n    this._readCallback = this._readInTopContext;\n    this._sparqlStyle = false;\n    this._prefixes = Object.create(null);\n    this._prefixes._ = this._blankNodePrefix ? this._blankNodePrefix.substr(2)\n                                             : `b${blankNodePrefix++}_`;\n    this._prefixCallback = prefixCallback || noop;\n    this._inversePredicate = false;\n    this._quantified = Object.create(null);\n\n    // Parse synchronously if no quad callback is given\n    if (!quadCallback) {\n      const quads = [];\n      let error;\n      this._callback = (e, t) => { e ? (error = e) : t && quads.push(t); };\n      this._lexer.tokenize(input).every(token => {\n        return this._readCallback = this._readCallback(token);\n      });\n      if (error) throw error;\n      return quads;\n    }\n\n    // Parse asynchronously otherwise, executing the read callback when a token arrives\n    this._callback = quadCallback;\n    this._lexer.tokenize(input, (error, token) => {\n      if (error !== null)\n        this._callback(error), this._callback = noop;\n      else if (this._readCallback)\n        this._readCallback = this._readCallback(token);\n    });\n  }\n}\n\n// The empty function\nfunction noop() {}\n\n// Initializes the parser with the given data factory\nfunction initDataFactory(parser, factory) {\n  // Set factory methods\n  const namedNode = factory.namedNode;\n  parser._namedNode   = namedNode;\n  parser._blankNode   = factory.blankNode;\n  parser._literal     = factory.literal;\n  parser._variable    = factory.variable;\n  parser._quad        = factory.quad;\n  parser.DEFAULTGRAPH = factory.defaultGraph();\n\n  // Set common named nodes\n  parser.RDF_FIRST  = namedNode(namespaces.rdf.first);\n  parser.RDF_REST   = namedNode(namespaces.rdf.rest);\n  parser.RDF_NIL    = namedNode(namespaces.rdf.nil);\n  parser.N3_FORALL  = namedNode(namespaces.r.forAll);\n  parser.N3_FORSOME = namedNode(namespaces.r.forSome);\n  parser.ABBREVIATIONS = {\n    'a': namedNode(namespaces.rdf.type),\n    '=': namedNode(namespaces.owl.sameAs),\n    '>': namedNode(namespaces.log.implies),\n  };\n  parser.QUANTIFIERS_GRAPH = namedNode('urn:n3:quantifiers');\n}\ninitDataFactory(N3Parser.prototype, N3DataFactory);\n","// **N3Writer** writes N3 documents.\nimport namespaces from './IRIs';\nimport { default as N3DataFactory, Term } from './N3DataFactory';\nimport { isDefaultGraph } from './N3Util';\n\nconst DEFAULTGRAPH = N3DataFactory.defaultGraph();\n\nconst { rdf, xsd } = namespaces;\n\n// Characters in literals that require escaping\nconst escape    = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019\\ud800-\\udbff]/,\n    escapeAll = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019]|[\\ud800-\\udbff][\\udc00-\\udfff]/g,\n    escapedCharacters = {\n      '\\\\': '\\\\\\\\', '\"': '\\\\\"', '\\t': '\\\\t',\n      '\\n': '\\\\n', '\\r': '\\\\r', '\\b': '\\\\b', '\\f': '\\\\f',\n    };\n\n// ## Placeholder class to represent already pretty-printed terms\nclass SerializedTerm extends Term {\n  // Pretty-printed nodes are not equal to any other node\n  // (e.g., [] does not equal [])\n  equals() {\n    return false;\n  }\n}\n\n// ## Constructor\nexport default class N3Writer {\n  constructor(outputStream, options) {\n    // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes\n    this._prefixRegex = /$0^/;\n\n    // Shift arguments if the first argument is not a stream\n    if (outputStream && typeof outputStream.write !== 'function')\n      options = outputStream, outputStream = null;\n    options = options || {};\n    this._lists = options.lists;\n\n    // If no output stream given, send the output as string through the end callback\n    if (!outputStream) {\n      let output = '';\n      this._outputStream = {\n        write(chunk, encoding, done) { output += chunk; done && done(); },\n        end: done => { done && done(null, output); },\n      };\n      this._endStream = true;\n    }\n    else {\n      this._outputStream = outputStream;\n      this._endStream = options.end === undefined ? true : !!options.end;\n    }\n\n    // Initialize writer, depending on the format\n    this._subject = null;\n    if (!(/triple|quad/i).test(options.format)) {\n      this._lineMode = false;\n      this._graph = DEFAULTGRAPH;\n      this._baseIRI = options.baseIRI;\n      this._prefixIRIs = Object.create(null);\n      options.prefixes && this.addPrefixes(options.prefixes);\n    }\n    else {\n      this._lineMode = true;\n      this._writeQuad = this._writeQuadLine;\n    }\n  }\n\n  // ## Private methods\n\n  // ### Whether the current graph is the default graph\n  get _inDefaultGraph() {\n    return DEFAULTGRAPH.equals(this._graph);\n  }\n\n  // ### `_write` writes the argument to the output stream\n  _write(string, callback) {\n    this._outputStream.write(string, 'utf8', callback);\n  }\n\n  // ### `_writeQuad` writes the quad to the output stream\n  _writeQuad(subject, predicate, object, graph, done) {\n    try {\n      // Write the graph's label if it has changed\n      if (!graph.equals(this._graph)) {\n        // Close the previous graph and start the new one\n        this._write((this._subject === null ? '' : (this._inDefaultGraph ? '.\\n' : '\\n}\\n')) +\n                    (DEFAULTGRAPH.equals(graph) ? '' : `${this._encodeIriOrBlank(graph)} {\\n`));\n        this._graph = graph;\n        this._subject = null;\n      }\n      // Don't repeat the subject if it's the same\n      if (subject.equals(this._subject)) {\n        // Don't repeat the predicate if it's the same\n        if (predicate.equals(this._predicate))\n          this._write(`, ${this._encodeObject(object)}`, done);\n        // Same subject, different predicate\n        else\n          this._write(`;\\n    ${\n                      this._encodePredicate(this._predicate = predicate)} ${\n                      this._encodeObject(object)}`, done);\n      }\n      // Different subject; write the whole quad\n      else\n        this._write(`${(this._subject === null ? '' : '.\\n') +\n                    this._encodeSubject(this._subject = subject)} ${\n                    this._encodePredicate(this._predicate = predicate)} ${\n                    this._encodeObject(object)}`, done);\n    }\n    catch (error) { done && done(error); }\n  }\n\n  // ### `_writeQuadLine` writes the quad to the output stream as a single line\n  _writeQuadLine(subject, predicate, object, graph, done) {\n    // Write the quad without prefixes\n    delete this._prefixMatch;\n    this._write(this.quadToString(subject, predicate, object, graph), done);\n  }\n\n  // ### `quadToString` serializes a quad as a string\n  quadToString(subject, predicate, object, graph) {\n    return  `${this._encodeSubject(subject)} ${\n            this._encodeIriOrBlank(predicate)} ${\n            this._encodeObject(object)\n            }${graph && graph.value ? ` ${this._encodeIriOrBlank(graph)} .\\n` : ' .\\n'}`;\n  }\n\n  // ### `quadsToString` serializes an array of quads as a string\n  quadsToString(quads) {\n    return quads.map(t => {\n      return this.quadToString(t.subject, t.predicate, t.object, t.graph);\n    }).join('');\n  }\n\n  // ### `_encodeSubject` represents a subject\n  _encodeSubject(entity) {\n    return entity.termType === 'Quad' ?\n      this._encodeQuad(entity) : this._encodeIriOrBlank(entity);\n  }\n\n  // ### `_encodeIriOrBlank` represents an IRI or blank node\n  _encodeIriOrBlank(entity) {\n    // A blank node or list is represented as-is\n    if (entity.termType !== 'NamedNode') {\n      // If it is a list head, pretty-print it\n      if (this._lists && (entity.value in this._lists))\n        entity = this.list(this._lists[entity.value]);\n      return 'id' in entity ? entity.id : `_:${entity.value}`;\n    }\n    let iri = entity.value;\n    // Use relative IRIs if requested and possible\n    if (this._baseIRI && iri.startsWith(this._baseIRI))\n      iri = iri.substr(this._baseIRI.length);\n    // Escape special characters\n    if (escape.test(iri))\n      iri = iri.replace(escapeAll, characterReplacer);\n    // Try to represent the IRI as prefixed name\n    const prefixMatch = this._prefixRegex.exec(iri);\n    return !prefixMatch ? `<${iri}>` :\n           (!prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2]);\n  }\n\n  // ### `_encodeLiteral` represents a literal\n  _encodeLiteral(literal) {\n    // Escape special characters\n    let value = literal.value;\n    if (escape.test(value))\n      value = value.replace(escapeAll, characterReplacer);\n\n    // Write a language-tagged literal\n    if (literal.language)\n      return `\"${value}\"@${literal.language}`;\n\n    // Write dedicated literals per data type\n    if (this._lineMode) {\n      // Only abbreviate strings in N-Triples or N-Quads\n      if (literal.datatype.value === xsd.string)\n        return `\"${value}\"`;\n    }\n    else {\n      // Use common datatype abbreviations in Turtle or TriG\n      switch (literal.datatype.value) {\n      case xsd.string:\n        return `\"${value}\"`;\n      case xsd.boolean:\n        if (value === 'true' || value === 'false')\n          return value;\n        break;\n      case xsd.integer:\n        if (/^[+-]?\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.decimal:\n        if (/^[+-]?\\d*\\.\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.double:\n        if (/^[+-]?(?:\\d+\\.\\d*|\\.?\\d+)[eE][+-]?\\d+$/.test(value))\n          return value;\n        break;\n      }\n    }\n\n    // Write a regular datatyped literal\n    return `\"${value}\"^^${this._encodeIriOrBlank(literal.datatype)}`;\n  }\n\n  // ### `_encodePredicate` represents a predicate\n  _encodePredicate(predicate) {\n    return predicate.value === rdf.type ? 'a' : this._encodeIriOrBlank(predicate);\n  }\n\n  // ### `_encodeObject` represents an object\n  _encodeObject(object) {\n    switch (object.termType) {\n    case 'Quad':\n      return this._encodeQuad(object);\n    case 'Literal':\n      return this._encodeLiteral(object);\n    default:\n      return this._encodeIriOrBlank(object);\n    }\n  }\n\n  // ### `_encodeQuad` encodes an RDF* quad\n  _encodeQuad({ subject, predicate, object, graph }) {\n    return `<<${\n      this._encodeSubject(subject)} ${\n      this._encodePredicate(predicate)} ${\n      this._encodeObject(object)}${\n      isDefaultGraph(graph) ? '' : ` ${this._encodeIriOrBlank(graph)}`}>>`;\n  }\n\n  // ### `_blockedWrite` replaces `_write` after the writer has been closed\n  _blockedWrite() {\n    throw new Error('Cannot write because the writer has been closed.');\n  }\n\n  // ### `addQuad` adds the quad to the output stream\n  addQuad(subject, predicate, object, graph, done) {\n    // The quad was given as an object, so shift parameters\n    if (object === undefined)\n      this._writeQuad(subject.subject, subject.predicate, subject.object, subject.graph, predicate);\n    // The optional `graph` parameter was not provided\n    else if (typeof graph === 'function')\n      this._writeQuad(subject, predicate, object, DEFAULTGRAPH, graph);\n    // The `graph` parameter was provided\n    else\n      this._writeQuad(subject, predicate, object, graph || DEFAULTGRAPH, done);\n  }\n\n  // ### `addQuads` adds the quads to the output stream\n  addQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.addQuad(quads[i]);\n  }\n\n  // ### `addPrefix` adds the prefix to the output stream\n  addPrefix(prefix, iri, done) {\n    const prefixes = {};\n    prefixes[prefix] = iri;\n    this.addPrefixes(prefixes, done);\n  }\n\n  // ### `addPrefixes` adds the prefixes to the output stream\n  addPrefixes(prefixes, done) {\n    // Ignore prefixes if not supported by the serialization\n    if (!this._prefixIRIs)\n      return done && done();\n\n    // Write all new prefixes\n    let hasPrefixes = false;\n    for (let prefix in prefixes) {\n      let iri = prefixes[prefix];\n      if (typeof iri !== 'string')\n        iri = iri.value;\n      hasPrefixes = true;\n      // Finish a possible pending quad\n      if (this._subject !== null) {\n        this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n        this._subject = null, this._graph = '';\n      }\n      // Store and write the prefix\n      this._prefixIRIs[iri] = (prefix += ':');\n      this._write(`@prefix ${prefix} <${iri}>.\\n`);\n    }\n    // Recreate the prefix matcher\n    if (hasPrefixes) {\n      let IRIlist = '', prefixList = '';\n      for (const prefixIRI in this._prefixIRIs) {\n        IRIlist += IRIlist ? `|${prefixIRI}` : prefixIRI;\n        prefixList += (prefixList ? '|' : '') + this._prefixIRIs[prefixIRI];\n      }\n      IRIlist = IRIlist.replace(/[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n      this._prefixRegex = new RegExp(`^(?:${prefixList})[^\\/]*$|` +\n                                     `^(${IRIlist})([a-zA-Z][\\\\-_a-zA-Z0-9]*)$`);\n    }\n    // End a prefix block with a newline\n    this._write(hasPrefixes ? '\\n' : '', done);\n  }\n\n  // ### `blank` creates a blank node with the given content\n  blank(predicate, object) {\n    let children = predicate, child, length;\n    // Empty blank node\n    if (predicate === undefined)\n      children = [];\n    // Blank node passed as blank(Term(\"predicate\"), Term(\"object\"))\n    else if (predicate.termType)\n      children = [{ predicate: predicate, object: object }];\n    // Blank node passed as blank({ predicate: predicate, object: object })\n    else if (!('length' in predicate))\n      children = [predicate];\n\n    switch (length = children.length) {\n    // Generate an empty blank node\n    case 0:\n      return new SerializedTerm('[]');\n    // Generate a non-nested one-triple blank node\n    case 1:\n      child = children[0];\n      if (!(child.object instanceof SerializedTerm))\n        return new SerializedTerm(`[ ${this._encodePredicate(child.predicate)} ${\n                                  this._encodeObject(child.object)} ]`);\n    // Generate a multi-triple or nested blank node\n    default:\n      let contents = '[';\n      // Write all triples in order\n      for (let i = 0; i < length; i++) {\n        child = children[i];\n        // Write only the object is the predicate is the same as the previous\n        if (child.predicate.equals(predicate))\n          contents += `, ${this._encodeObject(child.object)}`;\n        // Otherwise, write the predicate and the object\n        else {\n          contents += `${(i ? ';\\n  ' : '\\n  ') +\n                      this._encodePredicate(child.predicate)} ${\n                      this._encodeObject(child.object)}`;\n          predicate = child.predicate;\n        }\n      }\n      return new SerializedTerm(`${contents}\\n]`);\n    }\n  }\n\n  // ### `list` creates a list node with the given content\n  list(elements) {\n    const length = elements && elements.length || 0, contents = new Array(length);\n    for (let i = 0; i < length; i++)\n      contents[i] = this._encodeObject(elements[i]);\n    return new SerializedTerm(`(${contents.join(' ')})`);\n  }\n\n  // ### `end` signals the end of the output stream\n  end(done) {\n    // Finish a possible pending quad\n    if (this._subject !== null) {\n      this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n      this._subject = null;\n    }\n    // Disallow further writing\n    this._write = this._blockedWrite;\n\n    // Try to end the underlying stream, ensuring done is called exactly one time\n    let singleDone = done && ((error, result) => { singleDone = null, done(error, result); });\n    if (this._endStream) {\n      try { return this._outputStream.end(singleDone); }\n      catch (error) { /* error closing stream */ }\n    }\n    singleDone && singleDone();\n  }\n}\n\n// Replaces a character by its escaped version\nfunction characterReplacer(character) {\n  // Replace a single character by its escaped version\n  let result = escapedCharacters[character];\n  if (result === undefined) {\n    // Replace a single character with its 4-bit unicode escape sequence\n    if (character.length === 1) {\n      result = character.charCodeAt(0).toString(16);\n      result = '\\\\u0000'.substr(0, 6 - result.length) + result;\n    }\n    // Replace a surrogate pair with its 8-bit unicode escape sequence\n    else {\n      result = ((character.charCodeAt(0) - 0xD800) * 0x400 +\n                 character.charCodeAt(1) + 0x2400).toString(16);\n      result = '\\\\U00000000'.substr(0, 10 - result.length) + result;\n    }\n  }\n  return result;\n}\n","// **N3Store** objects store N3 quads by graph in memory.\nimport { default as N3DataFactory, termToId, termFromId } from './N3DataFactory';\nimport { Readable } from 'readable-stream';\nimport namespaces from './IRIs';\n\n// ## Constructor\nexport default class N3Store {\n  constructor(quads, options) {\n    // The number of quads is initially zero\n    this._size = 0;\n    // `_graphs` contains subject, predicate, and object indexes per graph\n    this._graphs = Object.create(null);\n    // `_ids` maps entities such as `http://xmlns.com/foaf/0.1/name` to numbers,\n    // saving memory by using only numbers as keys in `_graphs`\n    this._id = 0;\n    this._ids = Object.create(null);\n    this._ids['><'] = 0; // dummy entry, so the first actual key is non-zero\n    this._entities = Object.create(null); // inverse of `_ids`\n    // `_blankNodeIndex` is the index of the last automatically named blank node\n    this._blankNodeIndex = 0;\n\n    // Shift parameters if `quads` is not given\n    if (!options && quads && !quads[0])\n      options = quads, quads = null;\n    options = options || {};\n    this._factory = options.factory || N3DataFactory;\n\n    // Add quads if passed\n    if (quads)\n      this.addQuads(quads);\n  }\n\n  // ## Public properties\n\n  // ### `size` returns the number of quads in the store\n  get size() {\n    // Return the quad count if if was cached\n    let size = this._size;\n    if (size !== null)\n      return size;\n\n    // Calculate the number of quads by counting to the deepest level\n    size = 0;\n    const graphs = this._graphs;\n    let subjects, subject;\n    for (const graphKey in graphs)\n      for (const subjectKey in (subjects = graphs[graphKey].subjects))\n        for (const predicateKey in (subject = subjects[subjectKey]))\n          size += Object.keys(subject[predicateKey]).length;\n    return this._size = size;\n  }\n\n  // ## Private methods\n\n  // ### `_addToIndex` adds a quad to a three-layered index.\n  // Returns if the index has changed, if the entry did not already exist.\n  _addToIndex(index0, key0, key1, key2) {\n    // Create layers as necessary\n    const index1 = index0[key0] || (index0[key0] = {});\n    const index2 = index1[key1] || (index1[key1] = {});\n    // Setting the key to _any_ value signals the presence of the quad\n    const existed = key2 in index2;\n    if (!existed)\n      index2[key2] = null;\n    return !existed;\n  }\n\n  // ### `_removeFromIndex` removes a quad from a three-layered index\n  _removeFromIndex(index0, key0, key1, key2) {\n    // Remove the quad from the index\n    const index1 = index0[key0], index2 = index1[key1];\n    delete index2[key2];\n\n    // Remove intermediary index layers if they are empty\n    for (const key in index2) return;\n    delete index1[key1];\n    for (const key in index1) return;\n    delete index0[key0];\n  }\n\n  // ### `_findInIndex` finds a set of quads in a three-layered index.\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\n  // `name0`, `name1`, and `name2` are the names of the keys at each level,\n  // used when reconstructing the resulting quad\n  // (for instance: _subject_, _predicate_, and _object_).\n  // Finally, `graph` will be the graph of the created quads.\n  // If `callback` is given, each result is passed through it\n  // and iteration halts when it returns truthy for any quad.\n  // If instead `array` is given, each result is added to the array.\n  _findInIndex(index0, key0, key1, key2, name0, name1, name2, graph, callback, array) {\n    let tmp, index1, index2;\n    // Depending on the number of variables, keys or reverse index are faster\n    const varCount = !key0 + !key1 + !key2,\n        entityKeys = varCount > 1 ? Object.keys(this._ids) : this._entities;\n\n    // If a key is specified, use only that part of index 0.\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\n    for (const value0 in index0) {\n      const entity0 = entityKeys[value0];\n\n      if (index1 = index0[value0]) {\n        // If a key is specified, use only that part of index 1.\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\n        for (const value1 in index1) {\n          const entity1 = entityKeys[value1];\n\n          if (index2 = index1[value1]) {\n            // If a key is specified, use only that part of index 2, if it exists.\n            const values = key2 ? (key2 in index2 ? [key2] : []) : Object.keys(index2);\n            // Create quads for all items found in index 2.\n            for (let l = 0; l < values.length; l++) {\n              const parts = { subject: null, predicate: null, object: null };\n              parts[name0] = termFromId(entity0, this._factory);\n              parts[name1] = termFromId(entity1, this._factory);\n              parts[name2] = termFromId(entityKeys[values[l]], this._factory);\n              const quad = this._factory.quad(\n                parts.subject, parts.predicate, parts.object, termFromId(graph, this._factory));\n              if (array)\n                array.push(quad);\n              else if (callback(quad))\n                return true;\n            }\n          }\n        }\n      }\n    }\n    return array;\n  }\n\n  // ### `_loop` executes the callback on all keys of index 0\n  _loop(index0, callback) {\n    for (const key0 in index0)\n      callback(key0);\n  }\n\n  // ### `_loopByKey0` executes the callback on all keys of a certain entry in index 0\n  _loopByKey0(index0, key0, callback) {\n    let index1, key1;\n    if (index1 = index0[key0]) {\n      for (key1 in index1)\n        callback(key1);\n    }\n  }\n\n  // ### `_loopByKey1` executes the callback on given keys of all entries in index 0\n  _loopByKey1(index0, key1, callback) {\n    let key0, index1;\n    for (key0 in index0) {\n      index1 = index0[key0];\n      if (index1[key1])\n        callback(key0);\n    }\n  }\n\n  // ### `_loopBy2Keys` executes the callback on given keys of certain entries in index 2\n  _loopBy2Keys(index0, key0, key1, callback) {\n    let index1, index2, key2;\n    if ((index1 = index0[key0]) && (index2 = index1[key1])) {\n      for (key2 in index2)\n        callback(key2);\n    }\n  }\n\n  // ### `_countInIndex` counts matching quads in a three-layered index.\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\n  _countInIndex(index0, key0, key1, key2) {\n    let count = 0, tmp, index1, index2;\n\n    // If a key is specified, count only that part of index 0\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\n    for (const value0 in index0) {\n      if (index1 = index0[value0]) {\n        // If a key is specified, count only that part of index 1\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\n        for (const value1 in index1) {\n          if (index2 = index1[value1]) {\n            // If a key is specified, count the quad if it exists\n            if (key2) (key2 in index2) && count++;\n            // Otherwise, count all quads\n            else count += Object.keys(index2).length;\n          }\n        }\n      }\n    }\n    return count;\n  }\n\n  // ### `_getGraphs` returns an array with the given graph,\n  // or all graphs if the argument is null or undefined.\n  _getGraphs(graph) {\n    if (!isString(graph))\n      return this._graphs;\n    const graphs = {};\n    graphs[graph] = this._graphs[graph];\n    return graphs;\n  }\n\n  // ### `_uniqueEntities` returns a function that accepts an entity ID\n  // and passes the corresponding entity to callback if it hasn't occurred before.\n  _uniqueEntities(callback) {\n    const uniqueIds = Object.create(null);\n    return id => {\n      if (!(id in uniqueIds)) {\n        uniqueIds[id] = true;\n        callback(termFromId(this._entities[id], this._factory));\n      }\n    };\n  }\n\n  // ## Public methods\n\n  // ### `addQuad` adds a new quad to the store.\n  // Returns if the quad index has changed, if the quad did not already exist.\n  addQuad(subject, predicate, object, graph) {\n    // Shift arguments if a quad object is given instead of components\n    if (!predicate)\n      graph = subject.graph, object = subject.object,\n        predicate = subject.predicate, subject = subject.subject;\n\n    // Convert terms to internal string representation\n    subject = termToId(subject);\n    predicate = termToId(predicate);\n    object = termToId(object);\n    graph = termToId(graph);\n\n    // Find the graph that will contain the triple\n    let graphItem = this._graphs[graph];\n    // Create the graph if it doesn't exist yet\n    if (!graphItem) {\n      graphItem = this._graphs[graph] = { subjects: {}, predicates: {}, objects: {} };\n      // Freezing a graph helps subsequent `add` performance,\n      // and properties will never be modified anyway\n      Object.freeze(graphItem);\n    }\n\n    // Since entities can often be long IRIs, we avoid storing them in every index.\n    // Instead, we have a separate index that maps entities to numbers,\n    // which are then used as keys in the other indexes.\n    const ids = this._ids;\n    const entities = this._entities;\n    subject   = ids[subject]   || (ids[entities[++this._id] = subject]   = this._id);\n    predicate = ids[predicate] || (ids[entities[++this._id] = predicate] = this._id);\n    object    = ids[object]    || (ids[entities[++this._id] = object]    = this._id);\n\n    const changed = this._addToIndex(graphItem.subjects,   subject,   predicate, object);\n    this._addToIndex(graphItem.predicates, predicate, object,    subject);\n    this._addToIndex(graphItem.objects,    object,    subject,   predicate);\n\n    // The cached quad count is now invalid\n    this._size = null;\n    return changed;\n  }\n\n  // ### `addQuads` adds multiple quads to the store\n  addQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.addQuad(quads[i]);\n  }\n\n  // ### `import` adds a stream of quads to the store\n  import(stream) {\n    stream.on('data', quad => { this.addQuad(quad); });\n    return stream;\n  }\n\n  // ### `removeQuad` removes a quad from the store if it exists\n  removeQuad(subject, predicate, object, graph) {\n    // Shift arguments if a quad object is given instead of components\n    if (!predicate)\n      graph = subject.graph, object = subject.object,\n        predicate = subject.predicate, subject = subject.subject;\n\n    // Convert terms to internal string representation\n    subject = termToId(subject);\n    predicate = termToId(predicate);\n    object = termToId(object);\n    graph = termToId(graph);\n\n    // Find internal identifiers for all components\n    // and verify the quad exists.\n    const ids = this._ids, graphs = this._graphs;\n    let graphItem, subjects, predicates;\n    if (!(subject    = ids[subject]) || !(predicate = ids[predicate]) ||\n        !(object     = ids[object])  || !(graphItem = graphs[graph])  ||\n        !(subjects   = graphItem.subjects[subject]) ||\n        !(predicates = subjects[predicate]) ||\n        !(object in predicates))\n      return false;\n\n    // Remove it from all indexes\n    this._removeFromIndex(graphItem.subjects,   subject,   predicate, object);\n    this._removeFromIndex(graphItem.predicates, predicate, object,    subject);\n    this._removeFromIndex(graphItem.objects,    object,    subject,   predicate);\n    if (this._size !== null) this._size--;\n\n    // Remove the graph if it is empty\n    for (subject in graphItem.subjects) return true;\n    delete graphs[graph];\n    return true;\n  }\n\n  // ### `removeQuads` removes multiple quads from the store\n  removeQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.removeQuad(quads[i]);\n  }\n\n  // ### `remove` removes a stream of quads from the store\n  remove(stream) {\n    stream.on('data', quad => { this.removeQuad(quad); });\n    return stream;\n  }\n\n  // ### `removeMatches` removes all matching quads from the store\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  removeMatches(subject, predicate, object, graph) {\n    return this.remove(this.match(subject, predicate, object, graph));\n  }\n\n  // ### `deleteGraph` removes all triples with the given graph from the store\n  deleteGraph(graph) {\n    return this.removeMatches(null, null, null, graph);\n  }\n\n  // ### `getQuads` returns an array of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getQuads(subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const quads = [], graphs = this._getGraphs(graph), ids = this._ids;\n    let content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\n        isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return quads;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subjectId) {\n          if (objectId)\n            // If subject and object are given, the object index will be the fastest\n            this._findInIndex(content.objects, objectId, subjectId, predicateId,\n                              'object', 'subject', 'predicate', graphId, null, quads);\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            this._findInIndex(content.subjects, subjectId, predicateId, null,\n                              'subject', 'predicate', 'object', graphId, null, quads);\n        }\n        else if (predicateId)\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          this._findInIndex(content.predicates, predicateId, objectId, null,\n                            'predicate', 'object', 'subject', graphId, null, quads);\n        else if (objectId)\n          // If only object is given, the object index will be the fastest\n          this._findInIndex(content.objects, objectId, null, null,\n                            'object', 'subject', 'predicate', graphId, null, quads);\n        else\n          // If nothing is given, iterate subjects and predicates first\n          this._findInIndex(content.subjects, null, null, null,\n                            'subject', 'predicate', 'object', graphId, null, quads);\n      }\n    }\n    return quads;\n  }\n\n  // ### `match` returns a stream of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  match(subject, predicate, object, graph) {\n    const stream = new Readable({ objectMode: true });\n\n    // Initialize stream once it is being read\n    stream._read = () => {\n      for (const quad of this.getQuads(subject, predicate, object, graph))\n        stream.push(quad);\n      stream.push(null);\n    };\n\n    return stream;\n  }\n\n  // ### `countQuads` returns the number of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  countQuads(subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const graphs = this._getGraphs(graph), ids = this._ids;\n    let count = 0, content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\n        isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return 0;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subject) {\n          if (object)\n            // If subject and object are given, the object index will be the fastest\n            count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            count += this._countInIndex(content.subjects, subjectId, predicateId, objectId);\n        }\n        else if (predicate) {\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          count += this._countInIndex(content.predicates, predicateId, objectId, subjectId);\n        }\n        else {\n          // If only object is possibly given, the object index will be the fastest\n          count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\n        }\n      }\n    }\n    return count;\n  }\n\n  // ### `forEach` executes the callback on all quads.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forEach(callback, subject, predicate, object, graph) {\n    this.some(quad => {\n      callback(quad);\n      return false;\n    }, subject, predicate, object, graph);\n  }\n\n  // ### `every` executes the callback on all quads,\n  // and returns `true` if it returns truthy for all them.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  every(callback, subject, predicate, object, graph) {\n    let some = false;\n    const every = !this.some(quad => {\n      some = true;\n      return !callback(quad);\n    }, subject, predicate, object, graph);\n    return some && every;\n  }\n\n  // ### `some` executes the callback on all quads,\n  // and returns `true` if it returns truthy for any of them.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  some(callback, subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const graphs = this._getGraphs(graph), ids = this._ids;\n    let content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\n        isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return false;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subjectId) {\n          if (objectId) {\n          // If subject and object are given, the object index will be the fastest\n            if (this._findInIndex(content.objects, objectId, subjectId, predicateId,\n                                  'object', 'subject', 'predicate', graphId, callback, null))\n              return true;\n          }\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            if (this._findInIndex(content.subjects, subjectId, predicateId, null,\n                                  'subject', 'predicate', 'object', graphId, callback, null))\n              return true;\n        }\n        else if (predicateId) {\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          if (this._findInIndex(content.predicates, predicateId, objectId, null,\n                                'predicate', 'object', 'subject', graphId, callback, null)) {\n            return true;\n          }\n        }\n        else if (objectId) {\n          // If only object is given, the object index will be the fastest\n          if (this._findInIndex(content.objects, objectId, null, null,\n                                'object', 'subject', 'predicate', graphId, callback, null)) {\n            return true;\n          }\n        }\n        else\n        // If nothing is given, iterate subjects and predicates first\n        if (this._findInIndex(content.subjects, null, null, null,\n                              'subject', 'predicate', 'object', graphId, callback, null)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  // ### `getSubjects` returns all subjects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getSubjects(predicate, object, graph) {\n    const results = [];\n    this.forSubjects(s => { results.push(s); }, predicate, object, graph);\n    return results;\n  }\n\n  // ### `forSubjects` executes the callback on all subjects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forSubjects(callback, predicate, object, graph) {\n    // Convert terms to internal string representation\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const ids = this._ids, graphs = this._getGraphs(graph);\n    let content, predicateId, objectId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (predicateId) {\n          if (objectId)\n            // If predicate and object are given, the POS index is best.\n            this._loopBy2Keys(content.predicates, predicateId, objectId, callback);\n          else\n            // If only predicate is given, the SPO index is best.\n            this._loopByKey1(content.subjects, predicateId, callback);\n        }\n        else if (objectId)\n          // If only object is given, the OSP index is best.\n          this._loopByKey0(content.objects, objectId, callback);\n        else\n          // If no params given, iterate all the subjects\n          this._loop(content.subjects, callback);\n      }\n    }\n  }\n\n  // ### `getPredicates` returns all predicates that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getPredicates(subject, object, graph) {\n    const results = [];\n    this.forPredicates(p => { results.push(p); }, subject, object, graph);\n    return results;\n  }\n\n  // ### `forPredicates` executes the callback on all predicates that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forPredicates(callback, subject, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const ids = this._ids, graphs = this._getGraphs(graph);\n    let content, subjectId, objectId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject) && !(subjectId = ids[subject]) ||\n        isString(object)  && !(objectId  = ids[object]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (subjectId) {\n          if (objectId)\n            // If subject and object are given, the OSP index is best.\n            this._loopBy2Keys(content.objects, objectId, subjectId, callback);\n          else\n            // If only subject is given, the SPO index is best.\n            this._loopByKey0(content.subjects, subjectId, callback);\n        }\n        else if (objectId)\n          // If only object is given, the POS index is best.\n          this._loopByKey1(content.predicates, objectId, callback);\n        else\n          // If no params given, iterate all the predicates.\n          this._loop(content.predicates, callback);\n      }\n    }\n  }\n\n  // ### `getObjects` returns all objects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getObjects(subject, predicate, graph) {\n    const results = [];\n    this.forObjects(o => { results.push(o); }, subject, predicate, graph);\n    return results;\n  }\n\n  // ### `forObjects` executes the callback on all objects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forObjects(callback, subject, predicate, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    graph = graph && termToId(graph);\n\n    const ids = this._ids, graphs = this._getGraphs(graph);\n    let content, subjectId, predicateId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject]) ||\n        isString(predicate) && !(predicateId = ids[predicate]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (subjectId) {\n          if (predicateId)\n            // If subject and predicate are given, the SPO index is best.\n            this._loopBy2Keys(content.subjects, subjectId, predicateId, callback);\n          else\n            // If only subject is given, the OSP index is best.\n            this._loopByKey1(content.objects, subjectId, callback);\n        }\n        else if (predicateId)\n          // If only predicate is given, the POS index is best.\n          this._loopByKey0(content.predicates, predicateId, callback);\n        else\n          // If no params given, iterate all the objects.\n          this._loop(content.objects, callback);\n      }\n    }\n  }\n\n  // ### `getGraphs` returns all graphs that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getGraphs(subject, predicate, object) {\n    const results = [];\n    this.forGraphs(g => { results.push(g); }, subject, predicate, object);\n    return results;\n  }\n\n  // ### `forGraphs` executes the callback on all graphs that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forGraphs(callback, subject, predicate, object) {\n    for (const graph in this._graphs) {\n      this.some(quad => {\n        callback(quad.graph);\n        return true; // Halt iteration of some()\n      }, subject, predicate, object, graph);\n    }\n  }\n\n  // ### `createBlankNode` creates a new blank node, returning its name\n  createBlankNode(suggestedName) {\n    let name, index;\n    // Generate a name based on the suggested name\n    if (suggestedName) {\n      name = suggestedName = `_:${suggestedName}`, index = 1;\n      while (this._ids[name])\n        name = suggestedName + index++;\n    }\n    // Generate a generic blank node name\n    else {\n      do { name = `_:b${this._blankNodeIndex++}`; }\n      while (this._ids[name]);\n    }\n    // Add the blank node to the entities, avoiding the generation of duplicates\n    this._ids[name] = ++this._id;\n    this._entities[this._id] = name;\n    return this._factory.blankNode(name.substr(2));\n  }\n\n  // ### `extractLists` finds and removes all list triples\n  // and returns the items per list.\n  extractLists({ remove = false, ignoreErrors = false } = {}) {\n    const lists = {}; // has scalar keys so could be a simple Object\n    const onError = ignoreErrors ? (() => true) :\n                  ((node, message) => { throw new Error(`${node.value} ${message}`); });\n\n    // Traverse each list from its tail\n    const tails = this.getQuads(null, namespaces.rdf.rest, namespaces.rdf.nil, null);\n    const toRemove = remove ? [...tails] : [];\n    tails.forEach(tailQuad => {\n      const items = [];             // the members found as objects of rdf:first quads\n      let malformed = false;      // signals whether the current list is malformed\n      let head;                   // the head of the list (_:b1 in above example)\n      let headPos;                // set to subject or object when head is set\n      const graph = tailQuad.graph; // make sure list is in exactly one graph\n\n      // Traverse the list from tail to end\n      let current = tailQuad.subject;\n      while (current && !malformed) {\n        const objectQuads = this.getQuads(null, null, current, null);\n        const subjectQuads = this.getQuads(current, null, null, null);\n        let quad, first = null, rest = null, parent = null;\n\n        // Find the first and rest of this list node\n        for (let i = 0; i < subjectQuads.length && !malformed; i++) {\n          quad = subjectQuads[i];\n          if (!quad.graph.equals(graph))\n            malformed = onError(current, 'not confined to single graph');\n          else if (head)\n            malformed = onError(current, 'has non-list arcs out');\n\n          // one rdf:first\n          else if (quad.predicate.value === namespaces.rdf.first) {\n            if (first)\n              malformed = onError(current, 'has multiple rdf:first arcs');\n            else\n              toRemove.push(first = quad);\n          }\n\n          // one rdf:rest\n          else if (quad.predicate.value === namespaces.rdf.rest) {\n            if (rest)\n              malformed = onError(current, 'has multiple rdf:rest arcs');\n            else\n              toRemove.push(rest = quad);\n          }\n\n          // alien triple\n          else if (objectQuads.length)\n            malformed = onError(current, 'can\\'t be subject and object');\n          else {\n            head = quad; // e.g. { (1 2 3) :p :o }\n            headPos = 'subject';\n          }\n        }\n\n        // { :s :p (1 2) } arrives here with no head\n        // { (1 2) :p :o } arrives here with head set to the list.\n        for (let i = 0; i < objectQuads.length && !malformed; ++i) {\n          quad = objectQuads[i];\n          if (head)\n            malformed = onError(current, 'can\\'t have coreferences');\n          // one rdf:rest\n          else if (quad.predicate.value === namespaces.rdf.rest) {\n            if (parent)\n              malformed = onError(current, 'has incoming rdf:rest arcs');\n            else\n              parent = quad;\n          }\n          else {\n            head = quad; // e.g. { :s :p (1 2) }\n            headPos = 'object';\n          }\n        }\n\n        // Store the list item and continue with parent\n        if (!first)\n          malformed = onError(current, 'has no list head');\n        else\n          items.unshift(first.object);\n        current = parent && parent.subject;\n      }\n\n      // Don't remove any quads if the list is malformed\n      if (malformed)\n        remove = false;\n      // Store the list under the value of its head\n      else if (head)\n        lists[head[headPos].value] = items;\n    });\n\n    // Remove list quads if requested\n    if (remove)\n      this.removeQuads(toRemove);\n    return lists;\n  }\n}\n\n// Determines whether the argument is a string\nfunction isString(s) {\n  return typeof s === 'string' || s instanceof String;\n}\n","// **N3StreamParser** parses a text stream into a quad stream.\nimport N3Parser from './N3Parser';\nimport { Transform } from 'readable-stream';\n\n// ## Constructor\nexport default class N3StreamParser extends Transform {\n  constructor(options) {\n    super({ decodeStrings: true });\n    this._readableState.objectMode = true;\n\n    // Set up parser with dummy stream to obtain `data` and `end` callbacks\n    const parser = new N3Parser(options);\n    let onData, onEnd;\n    parser.parse({\n      on: (event, callback) => {\n        switch (event) {\n        case 'data': onData = callback; break;\n        case 'end':   onEnd = callback; break;\n        }\n      },\n    },\n      // Handle quads by pushing them down the pipeline\n      (error, quad) => { error && this.emit('error', error) || quad && this.push(quad); },\n      // Emit prefixes through the `prefix` event\n      (prefix, uri) => { this.emit('prefix', prefix, uri); }\n    );\n\n    // Implement Transform methods through parser callbacks\n    this._transform = (chunk, encoding, done) => { onData(chunk); done(); };\n    this._flush = done => { onEnd(); done(); };\n  }\n\n  // ### Parses a stream of strings\n  import(stream) {\n    stream.on('data',  chunk => { this.write(chunk); });\n    stream.on('end',   ()      => { this.end(); });\n    stream.on('error', error => { this.emit('error', error); });\n    return this;\n  }\n}\n","// **N3StreamWriter** serializes a quad stream into a text stream.\nimport { Transform } from 'readable-stream';\nimport N3Writer from './N3Writer';\n\n// ## Constructor\nexport default class N3StreamWriter extends Transform {\n  constructor(options) {\n    super({ encoding: 'utf8', writableObjectMode: true });\n\n    // Set up writer with a dummy stream object\n    const writer = this._writer = new N3Writer({\n      write: (quad, encoding, callback) => { this.push(quad); callback && callback(); },\n      end: callback => { this.push(null); callback && callback(); },\n    }, options);\n\n    // Implement Transform methods on top of writer\n    this._transform = (quad, encoding, done) => { writer.addQuad(quad, done); };\n    this._flush = done => { writer.end(done); };\n  }\n\n// ### Serializes a stream of quads\n  import(stream) {\n    stream.on('data',   quad => { this.write(quad); });\n    stream.on('end',    () => { this.end(); });\n    stream.on('error',  error => { this.emit('error', error); });\n    stream.on('prefix', (prefix, iri) => { this._writer.addPrefix(prefix, iri); });\n    return this;\n  }\n}\n","import Lexer from './N3Lexer';\nimport Parser from './N3Parser';\nimport Writer from './N3Writer';\nimport Store from './N3Store';\nimport StreamParser from './N3StreamParser';\nimport StreamWriter from './N3StreamWriter';\nimport * as Util from './N3Util';\n\nimport {\n  default as DataFactory,\n\n  Term,\n  NamedNode,\n  Literal,\n  BlankNode,\n  Variable,\n  DefaultGraph,\n  Quad,\n  Triple,\n\n  termFromId,\n  termToId,\n} from './N3DataFactory';\n\nexport {\n  Lexer,\n  Parser,\n  Writer,\n  Store,\n  StreamParser,\n  StreamWriter,\n  Util,\n\n  DataFactory,\n\n  Term,\n  NamedNode,\n  Literal,\n  BlankNode,\n  Variable,\n  DefaultGraph,\n  Quad,\n  Triple,\n\n  termFromId,\n  termToId,\n};\n"]}